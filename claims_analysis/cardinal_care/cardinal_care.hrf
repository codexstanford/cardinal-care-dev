covered(C):-
    claim.policy(C,P) &
    policy.type(P,T) &
    covered_under_policy(C,P,T).

covered_under_policy(C,P,cardinal):-
    valid_insuree(C,P) &
    policy_active(C,P) &
    valid_hospitalization(C,P).

valid_insuree(C,P):-
    claim.claimant(C,Cl) &
    policy.insuree(P,Cl).

% check if the policy is active
policy_active(C,P):-
  claim.claimant(C,Cl) &
  claim.hospitalization(C,H) &
  hospitalization.start_time(H,H_START_DATE,H_START_TIME) & 
  hospitalization.end_time(H,H_END_DATE,H_END_TIME) &
  policy.startdate(P,Cl,P_START_DATE) &
  policy.enddate(P,Cl,P_END_DATE) &
  get_timestamp_from_date(H_START_DATE,H_START_STAMP) &
  get_timestamp_from_date(H_END_DATE,H_END_STAMP) &
  get_timestamp_from_date(P_END_DATE,P_END_STAMP) &
  get_timestamp_from_date(P_START_DATE,P_START_STAMP) &
  leq(P_START_STAMP,H_START_STAMP) &
  leq(H_END_STAMP,P_END_STAMP)

% check if the hospitali is valid and the service is covered
valid_hospitalization(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.hospital(H,Hosp) &
  valid_hospital(Hosp) &
  hospitalization.reason(H,R) &
  eligible_service(C,P,R) &
  ~exception(C,P).

%% seperate rule for emergency room as out of network hospitals are covered
valid_hospitalization(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.reason(H,emergency_room) &
  hospitalization.type_of_care(H,emergency) &
  ~exception(C,P).


get_timestamp_from_datetime(DATE,TIME,STAMP) :-
  evaluate(parsedate(DATE),[D,M,Y]) &
  evaluate(parsetime(TIME),[HR,MIN]) &
  evaluate(maketimestamp(Y,M,D,HR,MIN,0),STAMP)

get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[D,M,Y]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)

definition(parsedate(DATE),map(readstring,tail(matches(stringify(DATE),"(..)_(..)_(....)"))))
definition(parsetime(TIME),map(readstring,tail(matches(stringify(TIME),"(..)_(..)"))))
definition(tail(X!L),L)

get_age(C_D, DOB, Age) :-
  evaluate(parsedate(C_D),[D,M,Y]) &
  evaluate(parsedate(DOB),[D2,M2,Y2]) &
  evaluate(minus(Y,Y2),YearDiff) &
  evaluate(minus(M,M2), MonthDiff) &
  evaluate(minus(D,D2), DayDiff) &
  evaluate(plus(imul(31,MonthDiff), DayDiff), MDDiff) &
  evaluate(plus(YearDiff, if(leq(MDDiff,-1), -1, true, 0)), Age)

get_age_in_months(C_D, DOB, AgeInMonths) :-
  evaluate(parsedate(C_D),[D,M,Y]) &
  evaluate(parsedate(DOB),[D2,M2,Y2]) &
  evaluate(minus(Y,Y2), YearDiff) &
  evaluate(minus(M,M2), MonthDiff) &
  evaluate(minus(D,D2), DayDiff) &
  evaluate(plus(imul(12, YearDiff), MonthDiff), PreliminaryMonths) &
  evaluate(if(leq(DayDiff, -1), minus(PreliminaryMonths, 1), true, PreliminaryMonths), AgeInMonths).

minor_or_dependent(C,Cl):-
  person.dependent(Cl,yes).

minor_or_dependent(C,Cl):-
  person.dob(Cl,DOB) &
  claim.time(C,C_D,C_T) &
  get_age(C_D, DOB, Age) &
  leq(Age,17).

exception(C,P):-
  claim.claimant(C,Cl) &
  person.occupation(Cl,armed_forces) &
  claim.consequence_of_occupation(C,yes).

exception(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.reason(H,home_health_care) &
  home_not_covered_list(List) &
  hospitalization.home_service(H,Service) &
  member(Service,List).

exception(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.reason(H,home_health_care) &
  claim.claimant(C,Cl) &
  minor_or_dependent(C,Cl) &
  hospitalization.family_member_present(H,no).

%%% Services that have location restriction and visit limit in the policy year

%%%%%%%%%%%%%%%%%%% Eligible Services %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% yearly limit and location
eligible_service(C,P,Service):-
  check_policy_year_limit(C,Service) &
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(Service,L).

% location
eligible_service(C,P,X):-
  covered_list_with_location(List) &
  member(X,List) &
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(X,L).

% no restrictions
eligible_service(C,P,X):-
  covered_list(List) &
  member(X,List).

eligible_service(C,P,specialized_screening_counselling):-
  claim.hospitalization(C,H) &
  hospitalization.screening_type(H,Type) &
  valid_screening_list(List) &
  member(Type,List).

eligible_service(C,P,specialized_screening_counselling):-
  claim.hospitalization(C,H) &
  hospitalization.screening_type(H,cancer) &
  hospitalization.cancer_type(H,lung) &
  evaluate(countofall(X,lung_cancer_past_twelve_months(C,X)),0). 

eligible_service(C,P,specialized_screening_counselling):-
  claim.hospitalization(C,H) &
  hospitalization.screening_type(H,cancer) &
  check_age_range_limit(C,cancer).   

eligible_service(C,P,preventive_care):-
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(preventive_care,L) &
  check_age_range_limit(C,vaccine).

eligible_service(C,P,preventive_care):-
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(preventive_care,L) &
  hospitalization.vaccine(H,hep_b) &
  claim.claimant(C,Cl) &
  person.dob(Cl,DOB) &
  hospitalization.start_time(H,C_D,C_T) &
  get_age(C_D, DOB, Y) &
  get_age_in_months(C_D, DOB, M) &
  age_range_limit_hepb(C,N,Y,M) &
  hospitalization.vaccine_dose_count(H,D) &
  leq(D,N).

eligible_service(C,P,female_contraceptives):-
  claim.claimant(C,Cl) &
  person.sex(Cl, female) &
  claim.hospitalization(C,H) &
  hospitalization.contraceptive_service(H,Service) &
  fda_approved(Service) &
  hospitalization.location(H,L) &
  contraceptive_location_check(Service,L).

eligible_service(C,P,inpatient_surgical_services):-
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(inpatient_surgical_services,L) &
  hospitalization.service_provider(H,O) &
  valid_service_provider(inpatient_surgical_services, O).

eligible_service(C,P,outpatient_surgical_services):-
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(outpatient_surgical_services,L) &
  hospitalization.service_provider(H,O) &
  valid_service_provider(outpatient_surgical_services, O).


eligible_service(C,P,outpatient_surgery_facility_charges):-
  claim.hospitalization(C,H) &
  hospitalization.location(H,L) &
  valid_location(outpatient_surgery_facility_charges,L).

%%%%%%%%%%%%%%%%%%% Range Limit Checks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Age limits for hep_b vaccines

age_range_limit_hepb(C,1,Y,0).

age_range_limit_hepb(C,3,Y,M):-
  leq(2,M) &
  leq(M,5).

age_range_limit_hepb(C,4,Y,M):-
  leq(6,M) &
  leq(Y,17).

age_range_limit_hepb(C,4,18,M):-
  claim.hospitalization(C,H) &
  hospitalization.vaccine_brand(H,twinrix).

age_range_limit_hepb(C,4,Y,M):- 
  leq(19,Y) &
  leq(Y,200).

age_range_limit_hepb(C,7,Y,M):-
  leq(Y,2) &
  claim.hospitalization(C,H) &
  mother_hbsag_positive_unknown(H) &
  hospitalization.anti_hbs_count(H,Count) &
  leq(Count,10).

mother_hbsag_positive_unknown(H):-
  hospitalization.mother_hbsag(H,positive)

mother_hbsag_positive_unknown(H):-
  hospitalization.mother_hbsag(H,unknown)

age_range_limit_hepb(C,7,Y,M):-
  leq(Y,2) &
  claim.hospitalization(C,H) &
  hospitalization.birth_weight(H,Weight) &
  leq(Weight,2000) &
  hospitalization.anti_hbs_count(H,Count) &
  leq(Count,10).

age_range_limit_hepb(C,7,Y,M):-
  claim.claimant(C,Cl) &
  eligible_for_revaccination(Cl) &
  person.occupation(Cl,healthcare_worker) &
  hospitalization.anti_hbs_count(H,Count) &
  leq(Count,10).

eligible_for_revaccination(Cl):-
  person.occupation(Cl,healthcare_worker)

eligible_for_revaccination(Cl):-
  person.condition(Cl,immunocompromised)

eligible_for_revaccination(Cl):-
  person.condition(Cl,hemodialysis_patient).


% Age limit for cancer
check_age_range_limit(Claim, cancer):- 
  claim.claimant(Claim,Cl) &
  person.dob(Cl,DOB) &
  claim.time(Claim,C_D,C_T) &
  get_date_diff(C_D, DOB, Age) &
  claim.hospitalization(Claim,Hosp) &
  hospitalization.screening_type(Hosp,cancer) &
  hospitalization.cancer_type(Hosp,Cancer) &
  get_age_range_limit(cancer,Cancer,Age,Limit,MinAge,MaxAge) &
  evaluate(plus(countofall(X,age_range_visit_cancer(Claim,X)),1),Count) &
  leq(Count,Limit).

% Age limit for vaccines
check_age_range_limit(Claim,vaccine):-
  claim.claimant(Claim,Cl) &
  person.dob(Cl,DOB) &
  claim.time(Claim,C_D,C_T) &
  get_date_diff(C_D, DOB, Age) &
  claim.hospitalization(Claim,Hosp) &
  hospitalization.vaccine(Hosp,V) &
  get_age_range_limit(vaccine,V,Age,Limit,MinAge,MaxAge) &
  evaluate(plus(countofall(X,age_range_visit_vaccine(Claim,X)),1),Count) &
  leq(Count,Limit).

% check if the two claims are for the same vaccine and within the age range
age_range_visit_vaccine(Claim1,Claim2):-
  claim.claimant(Claim1,Person) &
  claim.claimant(Claim2,Person) &
  claim.policy(Claim1,Policy) &
  claim.policy(Claim2,Policy) &
  claim.hospitalization(Claim2,Hosp2) &
  claim.hospitalization(Claim1,Hosp1) &
  hospitalization.reason(Hosp1,preventive_care) &
  hospitalization.reason(Hosp2,preventive_care) &
  hospitalization.vaccine(Hosp1,V) &
  hospitalization.vaccine(Hosp2,V) &
  claim.time(Claim1,C1_D,C1_T) &
  person.dob(Person,DOB) &
  get_date_diff(C1_D, DOB, Age) &
  get_age_range_limit(vaccine,V,Age,Limit,MinAge,MaxAge) &
  age_range_visit(Claim1,Claim2,MinAge,MaxAge,DOB).

% check if the two claims are for the same cancer type and within the age range
age_range_visit_cancer(Claim1,Claim2):-
  claim.claimant(Claim1,Person) &
  claim.claimant(Claim2,Person) &
  claim.policy(Claim1,Policy) &
  claim.policy(Claim2,Policy) &
  claim.hospitalization(Claim2,Hosp2) &
  claim.hospitalization(Claim1,Hosp1) &
  hospitalization.reason(Hosp1,specialized_screening_counselling) &
  hospitalization.reason(Hosp2,specialized_screening_counselling) &
  hospitalization.screening_type(Hosp1,cancer) &
  hospitalization.screening_type(Hosp2,cancer) &
  hospitalization.cancer_type(Hosp1,Cancer) &
  hospitalization.cancer_type(Hosp2,Cancer) &
  claim.time(Claim1,C1_D,C1_T) &
  person.dob(Person,DOB) &
  get_date_diff(C1_D, DOB, Age) &
  get_age_range_limit(cancer,Cancer,Age,Limit,MinAge,MaxAge) &
  age_range_visit(Claim1,Claim2,MinAge,MaxAge,DOB).

% check if the claim is within the age range
age_range_visit(Claim1,Claim2,MinAge,MaxAge,DOB):-
  claim.time(Claim2,C2_D,C2_T) &
  claim.time(Claim1,C1_D,C1_T) &
  get_date_diff(C2_D, DOB, Age2) &
  leq(Age2,MaxAge) &
  leq(MinAge,Age2) &
  get_timestamp_from_datetime(C1_D,C1_T,C1_TS) &
  get_timestamp_from_datetime(C2_D,C2_T,C2_TS) &
  lt(C2_TS,C1_TS) &
  covered(Claim2). 

get_age_range_limit(Type,Case,Age,Limit,MinAge,MaxAge):-
  age_range_limit(Type,Case,MinAge,MaxAge,Limit) &
  evaluate(minus(MaxAge,1),MaxAgeMinus) &
  leq(Age,MaxAgeMinus) &
  leq(MinAge,Age).

% Visit limit for lung cancer
lung_cancer_past_twelve_months(Claim1,Claim2):-
  claim.claimant(Claim1,Cl) &
  claim.claimant(Claim2,Cl) &
  claim.hospitalization(Claim2,Hosp2) &
  claim.hospitalization(Claim1,Hosp1) &
  hospitalization.reason(Hosp1,specialized_screening_counselling) &
  hospitalization.reason(Hosp2,specialized_screening_counselling) &
  hospitalization.screening_type(Hosp1,cancer) &
  hospitalization.screening_type(Hosp2,cancer) &
  hospitalization.cancer_type(Hosp1,lung) &
  hospitalization.cancer_type(Hosp2,lung) &
  evaluate(parsedate(C1_D),[D,M,Y]) &
  evaluate(parsedate(C2_D),[D2,M2,Y2]) &
  get_date_diff(C1_D, C2_D, Age) &
  same(Age, 0)

% Visit limit in general
check_policy_year_limit(C,Service):-
  claim.claimant(C,Cl) &
  person.dob(Cl,DOB) &
  claim.time(C,C_D,C_T) &
  get_date_diff(C_D, DOB, Age) &
  yearly_visit_limit(Service,Age,Limit) &
  evaluate(plus(countofall(X,visit_current_year(Service,C,X)),1),Count) &
  leq(Count,Limit).

yearly_visit_limit(Service,Age,Limit):-
  yearly_visit_limit(Service,MinAge,MaxAge,Limit) &
  evaluate(minus(MaxAge,1),MaxAgeMinus) &
  leq(Age,MaxAgeMinus) &
  leq(MinAge,Age).

visit_current_year(Service,Claim1,Claim2):-
  claim.claimant(Claim1,Person) &
  claim.claimant(Claim2,Person) &
  claim.policy(Claim1,Policy) &
  claim.policy(Claim2,Policy) &
  claim.hospitalization(Claim2,Hosp2) &
  claim.hospitalization(Claim1,Hosp1) &
  hospitalization.reason(Hosp1,Service) &
  hospitalization.reason(Hosp2,Service) &
  hospitalization.start_time(Hosp1,Hosp1_StartDate,Hosp1_StartTime) &
  hospitalization.start_time(Hosp2,Hosp2_StartDate,Hosp2_StartTime) &
  policy_year_startdate(Policy_StartDate) &
  get_timestamp_from_datetime(Hosp2_StartDate,Hosp2_StartTime,Hosp2_Timestamp) &
  get_timestamp_from_date(Policy_StartDate,Policy_Timestamp) &
  get_timestamp_from_datetime(Hosp1_StartDate,Hosp1_StartTime,Hosp1_Timestamp) &
  leq(Policy_Timestamp,Hosp2_Timestamp) &
  leq(Policy_Timestamp,Hosp1_Timestamp) &
  claim.time(Claim1,C1_D,C1_T) &
  claim.time(Claim2,C2_D,C2_T) &
  get_timestamp_from_datetime(C1_D,C1_T,C1_TS) &
  get_timestamp_from_datetime(C2_D,C2_T,C2_TS) &
  lt(C2_TS,C1_TS) 
  % &
  % covered(Claim2)
  
contraceptive_location_check(Service,L):-
  valid_location_contraceptive(Service,L).

contraceptive_location_check(sterilization_surgery_for_women,L).
contraceptive_location_check(sterilization_surgery_for_men,L).

%%%%%%%%%%%%%%%%%%% Exceptions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

exception(C,P):-
  claim.claimant(C,Cl) &
  person.occupation(Cl,armed_forces) &
  claim.hospitalization(C,H) &
  hospitalization.consequence_of_occupation(H,yes).

exception(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.reason(H,home_health_care) &
  home_not_covered_list(List) &
  hospitalization.home_service(H,Service) &
  member(Service,List).

exception(C,P):-
  claim.hospitalization(C,H) &
  hospitalization.reason(H,home_health_care) &
  claim.claimant(C,Cl) &
  minor_or_dependent(C,Cl) &
  hospitalization.family_member_present(H,no).


%%%%%%%%%%%%%%%%%%% Example Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

policy_year_startdate(01_08_2023).

valid_hospital(stanford_medical_center).
valid_hospital(menlo_medical_clinic).
valid_hospital(sutter_health).
yearly_visit_limit(routine_physical,0,22,0).
yearly_visit_limit(routine_physical,22,200,1)
yearly_visit_limit(gynecological_exam,0,200,1).
yearly_visit_limit(home_health_care,0,200,100).

valid_location(routine_physical,phys_office).
valid_location(preventive_care,phys_office).
valid_location(preventive_care,facility).
valid_location(gynecological_exam,phys_office).
valid_location(gynecological_exam,ob_office).
valid_location(gynecological_exam,gyn_office).
valid_location(gynecological_exam,ob_gyn).
valid_location(physician_consultation,telemedicine)
valid_location(physician_consultation,phys_office)
valid_location(physician_consultation,sp_office)
valid_location(allergy,phys_office)
valid_location(allergy,allergy_specialist)
valid_location(inpatient_surgical_services,hospital)
valid_location(inpatient_surgical_services,birthing_center)
valid_location(outpatient_surgical_services,phys_office)
valid_location(outpatient_surgical_services,sp_office)
valid_location(outpatient_surgical_services,outpatient_dept)
valid_location(outpatient_surgical_services,surgery_center)
valid_location(inpatient_care,hospital)
valid_location(inpatient_care,birthing_center)
valid_location(outpatient_surgery_facility_charges,outpatient_dept)
valid_location(outpatient_surgery_facility_charges,surgery_center)
valid_location(home_health_care,home)
valid_location(non_surgical_physican_service,hospital)


valid_location_contraceptive(counseling,contra_office)
valid_location_contraceptive(rod,contra_office)
valid_location_contraceptive(larc,contra_office)
valid_location_contraceptive(preogestin,contra_office)
valid_location_contraceptive(oral,contra_office)

valid_service_provider(inpatient_surgical_services, operating_surgeon)
valid_service_provider(inpatient_surgical_services, anesthetist)
valid_service_provider(inpatient_surgical_services, surgical_assistant)
valid_service_provider(outpatient_surgical_services, operating_surgeon)
valid_service_provider(outpatient_surgical_services, anesthetist)
valid_service_provider(outpatient_surgical_services, surgical_assistant)


valid_screening_list([obesity,healthy_diet,alcohol_misuse,tobacco_missuse,depression,sti,
genetic_risk_cancer,stress_management,chronic_condition,lactation,prenatal_postpartum]).
covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service])
covered_list([breast_pump_supplies,hospice,skilled_nursing]).
home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy]).
age_range_limit(vaccine,covid,0,200,3).
age_range_limit(vaccine,polio,0,5,5).
age_range_limit(vaccine,polio,5,100,0).
age_range_limit(vaccine,tb,0,24,1).
age_range_limit(vaccine,tb,24,200,0).
age_range_limit(cancer,prostate,0,200,1). 
age_range_limit(cancer,breast,0,200,1).

fda_approved(counseling).
fda_approved(rod).
fda_approved(oral).
fda_approved(sterilization_surgery_for_women).
fda_approved(sterilization_surgery_for_men).
fda_approved(larc).
fda_approved(iud_with_preogestin).
fda_approved(implantable_rod).
fda_approved(progestin_shot_injection).
fda_approved(the_pill_estrogen_and_progestin).
fda_approved(the_mini_pill_progestin).
fda_approved(patch).
fda_approved(vaginal_contraceptive_ring).
fda_approved(diaphragm_with_spermicide).
fda_approved(sponge_with_spermicide).
fda_approved(cervical_cap_with_spermicide).
fda_approved(male_condom).
fda_approved(female_condom).
fda_approved(spermicide).
fda_approved(levonorgestrel_15_mg).
fda_approved(ulipristal_acetate).

%%%%%%%%%%%%%%%%%%% Helper Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_timestamp_from_datetime(DATE,TIME,STAMP) :-
  evaluate(parsedate(DATE),[D,M,Y]) &
  evaluate(parsetime(TIME),[HR,MIN]) &
  evaluate(maketimestamp(Y,M,D,HR,MIN,0),STAMP)

get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[D,M,Y]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)

definition(parsedate(DATE),map(readstring,tail(matches(stringify(DATE),"(..)_(..)_(....)"))))
definition(parsetime(TIME),map(readstring,tail(matches(stringify(TIME),"(..)_(..)"))))
definition(tail(X!L),L)

get_date_diff(C_D, C_D2, Age) :-
  evaluate(parsedate(C_D),[D,M,Y]) &
  evaluate(parsedate(C_D2),[D2,M2,Y2]) &
  evaluate(minus(Y,Y2),YearDiff) &
  evaluate(minus(M,M2), MonthDiff) &
  evaluate(minus(D,D2), DayDiff) &
  evaluate(plus(imul(31,MonthDiff), DayDiff), MDDiff) &
  evaluate(plus(YearDiff, if(leq(MDDiff,-1), -1, true, 0)), Age)

lt(X,Y):-
  leq(X,Y) &
  ~same(X,Y).

minor_or_dependent(C,Cl):-
  person.dependent(Cl,yes).

minor_or_dependent(C,Cl):-
  person.dob(Cl,DOB) &
  claim.time(C,C_D,C_T) &
  get_date_diff(C_D, DOB, Age) &
  leq(Age,17).

covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services])

