============ BEGIN CARDINAL CARE TESTS ============
Expected Result:  null
Call: covered(X)
| Call: claim.policy(X,V1)
| Exit: claim.policy(claim5,policy1)
| Call: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim5,policy1,cardinal)
| | Call: valid_insuree(claim5,policy1)
| | | Call: claim.claimant(claim5,V3)
| | | Exit: claim.claimant(claim5,person3)
| | | Call: policy.insuree(policy1,person3)
| | | Exit: policy.insuree(policy1,person3)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim5,policy1)
| | | Call: claim.claimant(claim5,V4)
| | | Exit: claim.claimant(claim5,person3)
| | | Call: claim.hosp_start_time(claim5,V5,V6)
| | | Exit: claim.hosp_start_time(claim5,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim5,V7,V8)
| | | Exit: claim.hosp_end_time(claim5,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person3,V9)
| | | Exit: policy.startdate(policy1,person3,01_08_2023)
| | | Call: policy.enddate(policy1,person3,V10)
| | | Exit: policy.enddate(policy1,person3,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V11)
| | | | Call: evaluate(parsedate(02_09_2023),[V12,V13,V14])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V11)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V15)
| | | | Call: evaluate(parsedate(02_09_2023),[V16,V17,V18])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V15)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V19)
| | | | Call: evaluate(parsedate(30_06_2024),[V20,V21,V22])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V19)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V23)
| | | | Call: evaluate(parsedate(01_08_2023),[V24,V25,V26])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V23)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim5,policy1)
| | | Call: claim.hospital(claim5,V27)
| | | Exit: claim.hospital(claim5,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim5,V28)
| | | Exit: claim.reason(claim5,inpatient_care)
| | | Call: eligible_service(claim5,policy1,inpatient_care)
| | | | Call: check_policy_year_limit(claim5,inpatient_care)
| | | | | Call: claim.claimant(claim5,V29)
| | | | | Exit: claim.claimant(claim5,person3)
| | | | | Call: person.dob(person3,V30)
| | | | | Exit: person.dob(person3,01_01_2001)
| | | | | Call: claim.time(claim5,V31,V32)
| | | | | Exit: claim.time(claim5,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V33)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V34,V35,V36])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V37,V38,V39])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V40)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V41)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V42)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V43)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V33)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(inpatient_care,23,V44)
| | | | | | Call: yearly_visit_limit(inpatient_care,V45,V46,V44)
| | | | | | Fail: yearly_visit_limit(inpatient_care,V45,V46,V44)
| | | | | Fail: yearly_visit_limit(inpatient_care,23,V44)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V33)
| | | | | Redo: claim.time(claim5,V31,V32)
| | | | | Fail: claim.time(claim5,V31,V32)
| | | | | Redo: person.dob(person3,V30)
| | | | | Fail: person.dob(person3,V30)
| | | | | Redo: claim.claimant(claim5,V29)
| | | | | Fail: claim.claimant(claim5,V29)
| | | | Fail: check_policy_year_limit(claim5,inpatient_care)
| | | | Call: covered_list_with_location(V47)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim5,V48)
| | | | Exit: claim.location(claim5,hospital)
| | | | Call: valid_location(inpatient_care,hospital)
| | | | Exit: valid_location(inpatient_care,hospital)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim5,policy1)
Call: exception(claim5,policy1)
| Call: claim.claimant(claim5,V49)
| Exit: claim.claimant(claim5,person3)
| Call: person.occupation(person3,armed_forces)
| Fail: person.occupation(person3,armed_forces)
| Redo: claim.claimant(claim5,V49)
| Fail: claim.claimant(claim5,V49)
| Call: claim.reason(claim5,home_health_care)
| Fail: claim.reason(claim5,home_health_care)
| Call: claim.reason(claim5,home_health_care)
| Fail: claim.reason(claim5,home_health_care)
Fail: exception(claim5,policy1)
| | | Exit: ~exception(claim5,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim5)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(inpatient_care,hospital)
| | | | Fail: valid_location(inpatient_care,hospital)
| | | | Redo: claim.location(claim5,V48)
| | | | Fail: claim.location(claim5,V48)
| | | | Redo: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V47)
| | | | Fail: covered_list_with_location(V47)
| | | | Call: covered_list_with_service_provider(V50)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(inpatient_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(inpatient_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V50)
| | | | Fail: covered_list_with_service_provider(V50)
| | | | Call: covered_list(V51)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(inpatient_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(inpatient_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V51)
| | | | Fail: covered_list(V51)
| | | Fail: eligible_service(claim5,policy1,inpatient_care)
| | | Redo: claim.reason(claim5,V28)
| | | Fail: claim.reason(claim5,V28)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim5,V27)
| | | Fail: claim.hospital(claim5,V27)
| | | Call: claim.reason(claim5,emergency_room)
| | | Fail: claim.reason(claim5,emergency_room)
| | Fail: valid_hospitalization(claim5,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V23)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V19)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V15)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V11)
| | | Redo: policy.enddate(policy1,person3,V10)
| | | Fail: policy.enddate(policy1,person3,V10)
| | | Redo: policy.startdate(policy1,person3,V9)
| | | Fail: policy.startdate(policy1,person3,V9)
| | | Redo: claim.hosp_end_time(claim5,V7,V8)
| | | Fail: claim.hosp_end_time(claim5,V7,V8)
| | | Redo: claim.hosp_start_time(claim5,V5,V6)
| | | Fail: claim.hosp_start_time(claim5,V5,V6)
| | | Redo: claim.claimant(claim5,V4)
| | | Fail: claim.claimant(claim5,V4)
| | Fail: policy_active(claim5,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person3)
| | | Fail: policy.insuree(policy1,person3)
| | | Redo: claim.claimant(claim5,V3)
| | | Fail: claim.claimant(claim5,V3)
| | Fail: valid_insuree(claim5,policy1)
| Fail: covered_under_policy(claim5,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Fail: policy.type(policy1,V2)
| Redo: claim.policy(X,V1)
| Fail: claim.policy(X,V1)
Fail: covered(X)
Expected Result:  [ 'claim3' ]
Call: covered(X)
| Call: claim.policy(X,V52)
| Exit: claim.policy(claim3,policy1)
| Call: policy.type(policy1,V53)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim3,policy1,cardinal)
| | Call: valid_insuree(claim3,policy1)
| | | Call: claim.claimant(claim3,V54)
| | | Exit: claim.claimant(claim3,person2)
| | | Call: policy.insuree(policy1,person2)
| | | Exit: policy.insuree(policy1,person2)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim3,policy1)
| | | Call: claim.claimant(claim3,V55)
| | | Exit: claim.claimant(claim3,person2)
| | | Call: claim.hosp_start_time(claim3,V56,V57)
| | | Exit: claim.hosp_start_time(claim3,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim3,V58,V59)
| | | Exit: claim.hosp_end_time(claim3,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person2,V60)
| | | Exit: policy.startdate(policy1,person2,01_08_2023)
| | | Call: policy.enddate(policy1,person2,V61)
| | | Exit: policy.enddate(policy1,person2,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V62)
| | | | Call: evaluate(parsedate(02_09_2023),[V63,V64,V65])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V62)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V66)
| | | | Call: evaluate(parsedate(02_09_2023),[V67,V68,V69])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V66)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V70)
| | | | Call: evaluate(parsedate(30_06_2024),[V71,V72,V73])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V70)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V74)
| | | | Call: evaluate(parsedate(01_08_2023),[V75,V76,V77])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V74)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim3,policy1)
| | | Call: claim.hospital(claim3,V78)
| | | Exit: claim.hospital(claim3,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim3,V79)
| | | Exit: claim.reason(claim3,routine_physical)
| | | Call: eligible_service(claim3,policy1,routine_physical)
| | | | Call: check_policy_year_limit(claim3,routine_physical)
| | | | | Call: claim.claimant(claim3,V80)
| | | | | Exit: claim.claimant(claim3,person2)
| | | | | Call: person.dob(person2,V81)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim3,V82,V83)
| | | | | Exit: claim.time(claim3,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V85,V86,V87])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V88,V89,V90])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V91)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V92)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V93)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V94)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V84)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V95)
| | | | | | Call: yearly_visit_limit(routine_physical,V96,V97,V95)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V98)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V96,V97,V95)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V98)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V99,visit_current_year(routine_physical,claim3,V99)),1),V100)
| | | | | Exit: evaluate(plus(countofall(V102,visit_current_year(routine_physical,claim3,V102)),1),1)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim3,V103)
| | | | Exit: claim.location(claim3,phys_office)
| | | | Call: valid_location(routine_physical,phys_office)
| | | | Exit: valid_location(routine_physical,phys_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim3,policy1)
Call: exception(claim3,policy1)
| Call: claim.claimant(claim3,V104)
| Exit: claim.claimant(claim3,person2)
| Call: person.occupation(person2,armed_forces)
| Fail: person.occupation(person2,armed_forces)
| Redo: claim.claimant(claim3,V104)
| Fail: claim.claimant(claim3,V104)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
Fail: exception(claim3,policy1)
| | | Exit: ~exception(claim3,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim3)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(routine_physical,phys_office)
| | | | Fail: valid_location(routine_physical,phys_office)
| | | | Redo: claim.location(claim3,V103)
| | | | Fail: claim.location(claim3,V103)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V96,V97,V95)
| | | | | | Fail: yearly_visit_limit(routine_physical,V96,V97,V95)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V95)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | Redo: claim.time(claim3,V82,V83)
| | | | | Fail: claim.time(claim3,V82,V83)
| | | | | Redo: person.dob(person2,V81)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim3,V82,V83)
| | | | | Exit: claim.time(claim3,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V105,V106,V107])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V108,V109,V110])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V111)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V112)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V113)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V114)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V84)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V95)
| | | | | | Call: yearly_visit_limit(routine_physical,V115,V116,V95)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V117)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V115,V116,V95)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V117)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V102,visit_current_year(routine_physical,claim3,V102)),1),V100)
| | | | | Exit: evaluate(plus(countofall(V119,visit_current_year(routine_physical,claim3,V119)),1),1)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim3,V103)
| | | | Exit: claim.location(claim3,phys_office)
| | | | Call: valid_location(routine_physical,phys_office)
| | | | Exit: valid_location(routine_physical,phys_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim3,policy1)
Call: exception(claim3,policy1)
| Call: claim.claimant(claim3,V120)
| Exit: claim.claimant(claim3,person2)
| Call: person.occupation(person2,armed_forces)
| Fail: person.occupation(person2,armed_forces)
| Redo: claim.claimant(claim3,V120)
| Fail: claim.claimant(claim3,V120)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
Fail: exception(claim3,policy1)
| | | Exit: ~exception(claim3,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim3)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(routine_physical,phys_office)
| | | | Fail: valid_location(routine_physical,phys_office)
| | | | Redo: claim.location(claim3,V103)
| | | | Fail: claim.location(claim3,V103)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V115,V116,V95)
| | | | | | Fail: yearly_visit_limit(routine_physical,V115,V116,V95)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V95)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | Redo: claim.time(claim3,V82,V83)
| | | | | Fail: claim.time(claim3,V82,V83)
| | | | | Redo: person.dob(person2,V81)
| | | | | Fail: person.dob(person2,V81)
| | | | | Redo: claim.claimant(claim3,V80)
| | | | | Fail: claim.claimant(claim3,V80)
| | | | Fail: check_policy_year_limit(claim3,routine_physical)
| | | | Call: covered_list_with_location(V121)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V121)
| | | | Fail: covered_list_with_location(V121)
| | | | Call: covered_list_with_service_provider(V122)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V122)
| | | | Fail: covered_list_with_service_provider(V122)
| | | | Call: covered_list(V123)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V123)
| | | | Fail: covered_list(V123)
| | | Fail: eligible_service(claim3,policy1,routine_physical)
| | | Redo: claim.reason(claim3,V79)
| | | Fail: claim.reason(claim3,V79)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim3,V78)
| | | Fail: claim.hospital(claim3,V78)
| | | Call: claim.reason(claim3,emergency_room)
| | | Fail: claim.reason(claim3,emergency_room)
| | Fail: valid_hospitalization(claim3,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V74)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V70)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V66)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V62)
| | | Redo: policy.enddate(policy1,person2,V61)
| | | Fail: policy.enddate(policy1,person2,V61)
| | | Redo: policy.startdate(policy1,person2,V60)
| | | Fail: policy.startdate(policy1,person2,V60)
| | | Redo: claim.hosp_end_time(claim3,V58,V59)
| | | Fail: claim.hosp_end_time(claim3,V58,V59)
| | | Redo: claim.hosp_start_time(claim3,V56,V57)
| | | Fail: claim.hosp_start_time(claim3,V56,V57)
| | | Redo: claim.claimant(claim3,V55)
| | | Fail: claim.claimant(claim3,V55)
| | Fail: policy_active(claim3,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person2)
| | | Fail: policy.insuree(policy1,person2)
| | | Redo: claim.claimant(claim3,V54)
| | | Fail: claim.claimant(claim3,V54)
| | Fail: valid_insuree(claim3,policy1)
| Fail: covered_under_policy(claim3,policy1,cardinal)
| Redo: policy.type(policy1,V53)
| Fail: policy.type(policy1,V53)
| Redo: claim.policy(X,V52)
| Exit: claim.policy(claim4,policy1)
| Call: policy.type(policy1,V53)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim4,policy1,cardinal)
| | Call: valid_insuree(claim4,policy1)
| | | Call: claim.claimant(claim4,V124)
| | | Exit: claim.claimant(claim4,person2)
| | | Call: policy.insuree(policy1,person2)
| | | Exit: policy.insuree(policy1,person2)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim4,policy1)
| | | Call: claim.claimant(claim4,V125)
| | | Exit: claim.claimant(claim4,person2)
| | | Call: claim.hosp_start_time(claim4,V126,V127)
| | | Exit: claim.hosp_start_time(claim4,02_08_2023,00_00)
| | | Call: claim.hosp_end_time(claim4,V128,V129)
| | | Exit: claim.hosp_end_time(claim4,02_08_2023,01_13)
| | | Call: policy.startdate(policy1,person2,V130)
| | | Exit: policy.startdate(policy1,person2,01_08_2023)
| | | Call: policy.enddate(policy1,person2,V131)
| | | Exit: policy.enddate(policy1,person2,30_06_2024)
| | | Call: get_timestamp_from_date(02_08_2023,V132)
| | | | Call: evaluate(parsedate(02_08_2023),[V133,V134,V135])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V132)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_08_2023,V136)
| | | | Call: evaluate(parsedate(02_08_2023),[V137,V138,V139])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V136)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V140)
| | | | Call: evaluate(parsedate(30_06_2024),[V141,V142,V143])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V140)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V144)
| | | | Call: evaluate(parsedate(01_08_2023),[V145,V146,V147])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V144)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1690959600000)
| | | Exit: leq(1690873200000,1690959600000)
| | | Call: leq(1690959600000,1719730800000)
| | | Exit: leq(1690959600000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim4,policy1)
| | | Call: claim.hospital(claim4,V148)
| | | Exit: claim.hospital(claim4,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim4,V149)
| | | Exit: claim.reason(claim4,routine_physical)
| | | Call: eligible_service(claim4,policy1,routine_physical)
| | | | Call: check_policy_year_limit(claim4,routine_physical)
| | | | | Call: claim.claimant(claim4,V150)
| | | | | Exit: claim.claimant(claim4,person2)
| | | | | Call: person.dob(person2,V151)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim4,V152,V153)
| | | | | Exit: claim.time(claim4,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2001,V154)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V155,V156,V157])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V158,V159,V160])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V161)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(02,01),V162)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V163)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V164)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(23,if(leq(31,-1),-1,true,0)),V154)
| | | | | | Exit: evaluate(plus(23,if(leq(31,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V165)
| | | | | | Call: yearly_visit_limit(routine_physical,V166,V167,V165)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V168)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V166,V167,V165)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V168)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V169,visit_current_year(routine_physical,claim4,V169)),1),V170)
| | | | | Exit: evaluate(plus(countofall(V172,visit_current_year(routine_physical,claim4,V172)),1),2)
| | | | | Call: leq(2,1)
| | | | | Fail: leq(2,1)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V166,V167,V165)
| | | | | | Fail: yearly_visit_limit(routine_physical,V166,V167,V165)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V165)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2001,V154)
| | | | | Redo: claim.time(claim4,V152,V153)
| | | | | Fail: claim.time(claim4,V152,V153)
| | | | | Redo: person.dob(person2,V151)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim4,V152,V153)
| | | | | Exit: claim.time(claim4,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2001,V154)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V173,V174,V175])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V176,V177,V178])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V179)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(02,01),V180)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V181)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V182)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(23,if(leq(31,-1),-1,true,0)),V154)
| | | | | | Exit: evaluate(plus(23,if(leq(31,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V165)
| | | | | | Call: yearly_visit_limit(routine_physical,V183,V184,V165)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V185)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V183,V184,V165)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V185)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V172,visit_current_year(routine_physical,claim4,V172)),1),V170)
| | | | | Exit: evaluate(plus(countofall(V187,visit_current_year(routine_physical,claim4,V187)),1),2)
| | | | | Call: leq(2,1)
| | | | | Fail: leq(2,1)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V183,V184,V165)
| | | | | | Fail: yearly_visit_limit(routine_physical,V183,V184,V165)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V165)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2001,V154)
| | | | | Redo: claim.time(claim4,V152,V153)
| | | | | Fail: claim.time(claim4,V152,V153)
| | | | | Redo: person.dob(person2,V151)
| | | | | Fail: person.dob(person2,V151)
| | | | | Redo: claim.claimant(claim4,V150)
| | | | | Fail: claim.claimant(claim4,V150)
| | | | Fail: check_policy_year_limit(claim4,routine_physical)
| | | | Call: covered_list_with_location(V188)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V188)
| | | | Fail: covered_list_with_location(V188)
| | | | Call: covered_list_with_service_provider(V189)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V189)
| | | | Fail: covered_list_with_service_provider(V189)
| | | | Call: covered_list(V190)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V190)
| | | | Fail: covered_list(V190)
| | | Fail: eligible_service(claim4,policy1,routine_physical)
| | | Redo: claim.reason(claim4,V149)
| | | Fail: claim.reason(claim4,V149)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim4,V148)
| | | Fail: claim.hospital(claim4,V148)
| | | Call: claim.reason(claim4,emergency_room)
| | | Fail: claim.reason(claim4,emergency_room)
| | Fail: valid_hospitalization(claim4,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V144)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V140)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V136)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V132)
| | | Redo: policy.enddate(policy1,person2,V131)
| | | Fail: policy.enddate(policy1,person2,V131)
| | | Redo: policy.startdate(policy1,person2,V130)
| | | Fail: policy.startdate(policy1,person2,V130)
| | | Redo: claim.hosp_end_time(claim4,V128,V129)
| | | Fail: claim.hosp_end_time(claim4,V128,V129)
| | | Redo: claim.hosp_start_time(claim4,V126,V127)
| | | Fail: claim.hosp_start_time(claim4,V126,V127)
| | | Redo: claim.claimant(claim4,V125)
| | | Fail: claim.claimant(claim4,V125)
| | Fail: policy_active(claim4,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person2)
| | | Fail: policy.insuree(policy1,person2)
| | | Redo: claim.claimant(claim4,V124)
| | | Fail: claim.claimant(claim4,V124)
| | Fail: valid_insuree(claim4,policy1)
| Fail: covered_under_policy(claim4,policy1,cardinal)
| Redo: policy.type(policy1,V53)
| Fail: policy.type(policy1,V53)
| Redo: claim.policy(X,V52)
| Fail: claim.policy(X,V52)
Fail: covered(X)
===== TEST SUCCEEDED: Test test_cases_routine_physical.hdf===== 
======= CARDINAL CARE TEST RESULTS SUMMARY =======
1 out of 2 tests succeeded.
=== FAILING TESTS ===
Test test_cases_inpatient_care.hdf
============ END CARDINAL CARE TESTS ============
