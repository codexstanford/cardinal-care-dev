============ BEGIN CARDINAL CARE TESTS ============
Expected Result:  [ 'claim14' ]
Call: covered(X)
| Call: claim.policy(X,V1)
| Exit: claim.policy(claim14,policy1)
| Call: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim14,policy1,cardinal)
| | Call: valid_insuree(claim14,policy1)
| | | Call: claim.claimant(claim14,V3)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: policy.insuree(policy1,person14)
| | | Exit: policy.insuree(policy1,person14)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim14,policy1)
| | | Call: claim.claimant(claim14,V4)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: claim.hosp_start_time(claim14,V5,V6)
| | | Exit: claim.hosp_start_time(claim14,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim14,V7,V8)
| | | Exit: claim.hosp_end_time(claim14,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person14,V9)
| | | Exit: policy.startdate(policy1,person14,01_08_2023)
| | | Call: policy.enddate(policy1,person14,V10)
| | | Exit: policy.enddate(policy1,person14,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V11)
| | | | Call: evaluate(parsedate(02_09_2023),[V12,V13,V14])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V11)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V15)
| | | | Call: evaluate(parsedate(02_09_2023),[V16,V17,V18])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V15)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V19)
| | | | Call: evaluate(parsedate(30_06_2024),[V20,V21,V22])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V19)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V23)
| | | | Call: evaluate(parsedate(01_08_2023),[V24,V25,V26])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V23)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim14,policy1)
| | | Call: claim.hospital(claim14,V27)
| | | Exit: claim.hospital(claim14,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim14,V28)
| | | Exit: claim.reason(claim14,female_contraceptives)
| | | Call: eligible_service(claim14,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim14,female_contraceptives)
| | | | | Call: claim.claimant(claim14,V29)
| | | | | Exit: claim.claimant(claim14,person14)
| | | | | Call: person.dob(person14,V30)
| | | | | Exit: person.dob(person14,01_01_2001)
| | | | | Call: claim.time(claim14,V31,V32)
| | | | | Exit: claim.time(claim14,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V33)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V34,V35,V36])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V37,V38,V39])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V40)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V41)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V42)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V43)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V33)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V44)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V45,V46,V44)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V45,V46,V44)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V44)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V33)
| | | | | Redo: claim.time(claim14,V31,V32)
| | | | | Fail: claim.time(claim14,V31,V32)
| | | | | Redo: person.dob(person14,V30)
| | | | | Fail: person.dob(person14,V30)
| | | | | Redo: claim.claimant(claim14,V29)
| | | | | Fail: claim.claimant(claim14,V29)
| | | | Fail: check_policy_year_limit(claim14,female_contraceptives)
| | | | Call: covered_list_with_location(V47)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V47)
| | | | Fail: covered_list_with_location(V47)
| | | | Call: covered_list_with_service_provider(V48)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V48)
| | | | Fail: covered_list_with_service_provider(V48)
| | | | Call: covered_list(V49)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V49)
| | | | Fail: covered_list(V49)
| | | | Call: claim.claimant(claim14,V50)
| | | | Exit: claim.claimant(claim14,person14)
| | | | Call: claim.contraceptive_service(claim14,V51)
| | | | Exit: claim.contraceptive_service(claim14,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim14,V52)
| | | | Exit: claim.location(claim14,contra_office)
| | | | Call: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Exit: contraceptive_location_check(Service,contra_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim14,policy1)
Call: exception(claim14,policy1)
| Call: claim.claimant(claim14,V53)
| Exit: claim.claimant(claim14,person14)
| Call: person.occupation(person14,armed_forces)
| Fail: person.occupation(person14,armed_forces)
| Redo: claim.claimant(claim14,V53)
| Fail: claim.claimant(claim14,V53)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
Fail: exception(claim14,policy1)
| | | Exit: ~exception(claim14,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim14)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Redo: claim.location(claim14,V52)
| | | | Fail: claim.location(claim14,V52)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim14,V51)
| | | | Fail: claim.contraceptive_service(claim14,V51)
| | | | Redo: claim.claimant(claim14,V50)
| | | | Fail: claim.claimant(claim14,V50)
| | | Fail: eligible_service(claim14,policy1,female_contraceptives)
| | | Redo: claim.reason(claim14,V28)
| | | Fail: claim.reason(claim14,V28)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim14,V27)
| | | Fail: claim.hospital(claim14,V27)
| | | Call: claim.reason(claim14,emergency_room)
| | | Fail: claim.reason(claim14,emergency_room)
| | Fail: valid_hospitalization(claim14,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V23)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V19)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V15)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V11)
| | | Redo: policy.enddate(policy1,person14,V10)
| | | Fail: policy.enddate(policy1,person14,V10)
| | | Redo: policy.startdate(policy1,person14,V9)
| | | Fail: policy.startdate(policy1,person14,V9)
| | | Redo: claim.hosp_end_time(claim14,V7,V8)
| | | Fail: claim.hosp_end_time(claim14,V7,V8)
| | | Redo: claim.hosp_start_time(claim14,V5,V6)
| | | Fail: claim.hosp_start_time(claim14,V5,V6)
| | | Redo: claim.claimant(claim14,V4)
| | | Fail: claim.claimant(claim14,V4)
| | Fail: policy_active(claim14,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person14)
| | | Fail: policy.insuree(policy1,person14)
| | | Redo: claim.claimant(claim14,V3)
| | | Fail: claim.claimant(claim14,V3)
| | Fail: valid_insuree(claim14,policy1)
| Fail: covered_under_policy(claim14,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim14,policy1,cardinal)
| | Call: valid_insuree(claim14,policy1)
| | | Call: claim.claimant(claim14,V54)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: policy.insuree(policy1,person14)
| | | Exit: policy.insuree(policy1,person14)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim14,policy1)
| | | Call: claim.claimant(claim14,V55)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: claim.hosp_start_time(claim14,V56,V57)
| | | Exit: claim.hosp_start_time(claim14,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim14,V58,V59)
| | | Exit: claim.hosp_end_time(claim14,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person14,V60)
| | | Exit: policy.startdate(policy1,person14,01_08_2023)
| | | Call: policy.enddate(policy1,person14,V61)
| | | Exit: policy.enddate(policy1,person14,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V62)
| | | | Call: evaluate(parsedate(02_09_2023),[V63,V64,V65])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V62)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V66)
| | | | Call: evaluate(parsedate(02_09_2023),[V67,V68,V69])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V66)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V70)
| | | | Call: evaluate(parsedate(30_06_2024),[V71,V72,V73])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V70)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V74)
| | | | Call: evaluate(parsedate(01_08_2023),[V75,V76,V77])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V74)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim14,policy1)
| | | Call: claim.hospital(claim14,V78)
| | | Exit: claim.hospital(claim14,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim14,V79)
| | | Exit: claim.reason(claim14,female_contraceptives)
| | | Call: eligible_service(claim14,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim14,female_contraceptives)
| | | | | Call: claim.claimant(claim14,V80)
| | | | | Exit: claim.claimant(claim14,person14)
| | | | | Call: person.dob(person14,V81)
| | | | | Exit: person.dob(person14,01_01_2001)
| | | | | Call: claim.time(claim14,V82,V83)
| | | | | Exit: claim.time(claim14,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V85,V86,V87])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V88,V89,V90])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V91)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V92)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V93)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V94)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V84)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V95)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V96,V97,V95)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V96,V97,V95)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V95)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V84)
| | | | | Redo: claim.time(claim14,V82,V83)
| | | | | Fail: claim.time(claim14,V82,V83)
| | | | | Redo: person.dob(person14,V81)
| | | | | Fail: person.dob(person14,V81)
| | | | | Redo: claim.claimant(claim14,V80)
| | | | | Fail: claim.claimant(claim14,V80)
| | | | Fail: check_policy_year_limit(claim14,female_contraceptives)
| | | | Call: covered_list_with_location(V98)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V98)
| | | | Fail: covered_list_with_location(V98)
| | | | Call: covered_list_with_service_provider(V99)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V99)
| | | | Fail: covered_list_with_service_provider(V99)
| | | | Call: covered_list(V100)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V100)
| | | | Fail: covered_list(V100)
| | | | Call: claim.claimant(claim14,V101)
| | | | Exit: claim.claimant(claim14,person14)
| | | | Call: claim.contraceptive_service(claim14,V102)
| | | | Exit: claim.contraceptive_service(claim14,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim14,V103)
| | | | Exit: claim.location(claim14,contra_office)
| | | | Call: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Exit: contraceptive_location_check(Service,contra_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim14,policy1)
Call: exception(claim14,policy1)
| Call: claim.claimant(claim14,V104)
| Exit: claim.claimant(claim14,person14)
| Call: person.occupation(person14,armed_forces)
| Fail: person.occupation(person14,armed_forces)
| Redo: claim.claimant(claim14,V104)
| Fail: claim.claimant(claim14,V104)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
Fail: exception(claim14,policy1)
| | | Exit: ~exception(claim14,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim14)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Redo: claim.location(claim14,V103)
| | | | Fail: claim.location(claim14,V103)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim14,V102)
| | | | Fail: claim.contraceptive_service(claim14,V102)
| | | | Redo: claim.claimant(claim14,V101)
| | | | Fail: claim.claimant(claim14,V101)
| | | Fail: eligible_service(claim14,policy1,female_contraceptives)
| | | Redo: claim.reason(claim14,V79)
| | | Fail: claim.reason(claim14,V79)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim14,V78)
| | | Fail: claim.hospital(claim14,V78)
| | | Call: claim.reason(claim14,emergency_room)
| | | Fail: claim.reason(claim14,emergency_room)
| | Fail: valid_hospitalization(claim14,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V74)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V70)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V66)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V62)
| | | Redo: policy.enddate(policy1,person14,V61)
| | | Fail: policy.enddate(policy1,person14,V61)
| | | Redo: policy.startdate(policy1,person14,V60)
| | | Fail: policy.startdate(policy1,person14,V60)
| | | Redo: claim.hosp_end_time(claim14,V58,V59)
| | | Fail: claim.hosp_end_time(claim14,V58,V59)
| | | Redo: claim.hosp_start_time(claim14,V56,V57)
| | | Fail: claim.hosp_start_time(claim14,V56,V57)
| | | Redo: claim.claimant(claim14,V55)
| | | Fail: claim.claimant(claim14,V55)
| | Fail: policy_active(claim14,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person14)
| | | Fail: policy.insuree(policy1,person14)
| | | Redo: claim.claimant(claim14,V54)
| | | Fail: claim.claimant(claim14,V54)
| | Fail: valid_insuree(claim14,policy1)
| Fail: covered_under_policy(claim14,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim14,policy1,cardinal)
| | Call: valid_insuree(claim14,policy1)
| | | Call: claim.claimant(claim14,V105)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: policy.insuree(policy1,person14)
| | | Exit: policy.insuree(policy1,person14)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim14,policy1)
| | | Call: claim.claimant(claim14,V106)
| | | Exit: claim.claimant(claim14,person14)
| | | Call: claim.hosp_start_time(claim14,V107,V108)
| | | Exit: claim.hosp_start_time(claim14,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim14,V109,V110)
| | | Exit: claim.hosp_end_time(claim14,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person14,V111)
| | | Exit: policy.startdate(policy1,person14,01_08_2023)
| | | Call: policy.enddate(policy1,person14,V112)
| | | Exit: policy.enddate(policy1,person14,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V113)
| | | | Call: evaluate(parsedate(02_09_2023),[V114,V115,V116])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V113)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V117)
| | | | Call: evaluate(parsedate(02_09_2023),[V118,V119,V120])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V117)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V121)
| | | | Call: evaluate(parsedate(30_06_2024),[V122,V123,V124])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V121)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V125)
| | | | Call: evaluate(parsedate(01_08_2023),[V126,V127,V128])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V125)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim14,policy1)
| | | Call: claim.hospital(claim14,V129)
| | | Exit: claim.hospital(claim14,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim14,V130)
| | | Exit: claim.reason(claim14,female_contraceptives)
| | | Call: eligible_service(claim14,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim14,female_contraceptives)
| | | | | Call: claim.claimant(claim14,V131)
| | | | | Exit: claim.claimant(claim14,person14)
| | | | | Call: person.dob(person14,V132)
| | | | | Exit: person.dob(person14,01_01_2001)
| | | | | Call: claim.time(claim14,V133,V134)
| | | | | Exit: claim.time(claim14,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V135)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V136,V137,V138])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V139,V140,V141])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V142)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V143)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V144)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V145)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V135)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V146)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V147,V148,V146)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V147,V148,V146)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V146)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V135)
| | | | | Redo: claim.time(claim14,V133,V134)
| | | | | Fail: claim.time(claim14,V133,V134)
| | | | | Redo: person.dob(person14,V132)
| | | | | Fail: person.dob(person14,V132)
| | | | | Redo: claim.claimant(claim14,V131)
| | | | | Fail: claim.claimant(claim14,V131)
| | | | Fail: check_policy_year_limit(claim14,female_contraceptives)
| | | | Call: covered_list_with_location(V149)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V149)
| | | | Fail: covered_list_with_location(V149)
| | | | Call: covered_list_with_service_provider(V150)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V150)
| | | | Fail: covered_list_with_service_provider(V150)
| | | | Call: covered_list(V151)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V151)
| | | | Fail: covered_list(V151)
| | | | Call: claim.claimant(claim14,V152)
| | | | Exit: claim.claimant(claim14,person14)
| | | | Call: claim.contraceptive_service(claim14,V153)
| | | | Exit: claim.contraceptive_service(claim14,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim14,V154)
| | | | Exit: claim.location(claim14,contra_office)
| | | | Call: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Exit: contraceptive_location_check(Service,contra_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim14,policy1)
Call: exception(claim14,policy1)
| Call: claim.claimant(claim14,V155)
| Exit: claim.claimant(claim14,person14)
| Call: person.occupation(person14,armed_forces)
| Fail: person.occupation(person14,armed_forces)
| Redo: claim.claimant(claim14,V155)
| Fail: claim.claimant(claim14,V155)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
| Call: claim.reason(claim14,home_health_care)
| Fail: claim.reason(claim14,home_health_care)
Fail: exception(claim14,policy1)
| | | Exit: ~exception(claim14,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim14)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,contra_office)
| | | | Redo: claim.location(claim14,V154)
| | | | Fail: claim.location(claim14,V154)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim14,V153)
| | | | Fail: claim.contraceptive_service(claim14,V153)
| | | | Redo: claim.claimant(claim14,V152)
| | | | Fail: claim.claimant(claim14,V152)
| | | Fail: eligible_service(claim14,policy1,female_contraceptives)
| | | Redo: claim.reason(claim14,V130)
| | | Fail: claim.reason(claim14,V130)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim14,V129)
| | | Fail: claim.hospital(claim14,V129)
| | | Call: claim.reason(claim14,emergency_room)
| | | Fail: claim.reason(claim14,emergency_room)
| | Fail: valid_hospitalization(claim14,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V125)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V121)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V117)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V113)
| | | Redo: policy.enddate(policy1,person14,V112)
| | | Fail: policy.enddate(policy1,person14,V112)
| | | Redo: policy.startdate(policy1,person14,V111)
| | | Fail: policy.startdate(policy1,person14,V111)
| | | Redo: claim.hosp_end_time(claim14,V109,V110)
| | | Fail: claim.hosp_end_time(claim14,V109,V110)
| | | Redo: claim.hosp_start_time(claim14,V107,V108)
| | | Fail: claim.hosp_start_time(claim14,V107,V108)
| | | Redo: claim.claimant(claim14,V106)
| | | Fail: claim.claimant(claim14,V106)
| | Fail: policy_active(claim14,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person14)
| | | Fail: policy.insuree(policy1,person14)
| | | Redo: claim.claimant(claim14,V105)
| | | Fail: claim.claimant(claim14,V105)
| | Fail: valid_insuree(claim14,policy1)
| Fail: covered_under_policy(claim14,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Fail: policy.type(policy1,V2)
| Redo: claim.policy(X,V1)
| Exit: claim.policy(claim15,policy1)
| Call: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim15,policy1,cardinal)
| | Call: valid_insuree(claim15,policy1)
| | | Call: claim.claimant(claim15,V156)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: policy.insuree(policy1,person15)
| | | Exit: policy.insuree(policy1,person15)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim15,policy1)
| | | Call: claim.claimant(claim15,V157)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: claim.hosp_start_time(claim15,V158,V159)
| | | Exit: claim.hosp_start_time(claim15,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim15,V160,V161)
| | | Exit: claim.hosp_end_time(claim15,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person15,V162)
| | | Exit: policy.startdate(policy1,person15,01_08_2023)
| | | Call: policy.enddate(policy1,person15,V163)
| | | Exit: policy.enddate(policy1,person15,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V164)
| | | | Call: evaluate(parsedate(02_09_2023),[V165,V166,V167])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V164)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V168)
| | | | Call: evaluate(parsedate(02_09_2023),[V169,V170,V171])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V168)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V172)
| | | | Call: evaluate(parsedate(30_06_2024),[V173,V174,V175])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V172)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V176)
| | | | Call: evaluate(parsedate(01_08_2023),[V177,V178,V179])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V176)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim15,policy1)
| | | Call: claim.hospital(claim15,V180)
| | | Exit: claim.hospital(claim15,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim15,V181)
| | | Exit: claim.reason(claim15,female_contraceptives)
| | | Call: eligible_service(claim15,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim15,female_contraceptives)
| | | | | Call: claim.claimant(claim15,V182)
| | | | | Exit: claim.claimant(claim15,person15)
| | | | | Call: person.dob(person15,V183)
| | | | | Exit: person.dob(person15,01_01_2001)
| | | | | Call: claim.time(claim15,V184,V185)
| | | | | Exit: claim.time(claim15,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V186)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V187,V188,V189])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V190,V191,V192])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V193)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V194)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V195)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V196)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V186)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V197)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V198,V199,V197)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V198,V199,V197)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V197)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V186)
| | | | | Redo: claim.time(claim15,V184,V185)
| | | | | Fail: claim.time(claim15,V184,V185)
| | | | | Redo: person.dob(person15,V183)
| | | | | Fail: person.dob(person15,V183)
| | | | | Redo: claim.claimant(claim15,V182)
| | | | | Fail: claim.claimant(claim15,V182)
| | | | Fail: check_policy_year_limit(claim15,female_contraceptives)
| | | | Call: covered_list_with_location(V200)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V200)
| | | | Fail: covered_list_with_location(V200)
| | | | Call: covered_list_with_service_provider(V201)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V201)
| | | | Fail: covered_list_with_service_provider(V201)
| | | | Call: covered_list(V202)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V202)
| | | | Fail: covered_list(V202)
| | | | Call: claim.claimant(claim15,V203)
| | | | Exit: claim.claimant(claim15,person15)
| | | | Call: claim.contraceptive_service(claim15,V204)
| | | | Exit: claim.contraceptive_service(claim15,other)
| | | | Call: fda_approved(other)
| | | | Fail: fda_approved(other)
| | | | Redo: claim.contraceptive_service(claim15,V204)
| | | | Fail: claim.contraceptive_service(claim15,V204)
| | | | Redo: claim.claimant(claim15,V203)
| | | | Fail: claim.claimant(claim15,V203)
| | | Fail: eligible_service(claim15,policy1,female_contraceptives)
| | | Redo: claim.reason(claim15,V181)
| | | Fail: claim.reason(claim15,V181)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim15,V180)
| | | Fail: claim.hospital(claim15,V180)
| | | Call: claim.reason(claim15,emergency_room)
| | | Fail: claim.reason(claim15,emergency_room)
| | Fail: valid_hospitalization(claim15,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V176)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V172)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V168)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V164)
| | | Redo: policy.enddate(policy1,person15,V163)
| | | Fail: policy.enddate(policy1,person15,V163)
| | | Redo: policy.startdate(policy1,person15,V162)
| | | Fail: policy.startdate(policy1,person15,V162)
| | | Redo: claim.hosp_end_time(claim15,V160,V161)
| | | Fail: claim.hosp_end_time(claim15,V160,V161)
| | | Redo: claim.hosp_start_time(claim15,V158,V159)
| | | Fail: claim.hosp_start_time(claim15,V158,V159)
| | | Redo: claim.claimant(claim15,V157)
| | | Fail: claim.claimant(claim15,V157)
| | Fail: policy_active(claim15,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person15)
| | | Fail: policy.insuree(policy1,person15)
| | | Redo: claim.claimant(claim15,V156)
| | | Fail: claim.claimant(claim15,V156)
| | Fail: valid_insuree(claim15,policy1)
| Fail: covered_under_policy(claim15,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim15,policy1,cardinal)
| | Call: valid_insuree(claim15,policy1)
| | | Call: claim.claimant(claim15,V205)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: policy.insuree(policy1,person15)
| | | Exit: policy.insuree(policy1,person15)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim15,policy1)
| | | Call: claim.claimant(claim15,V206)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: claim.hosp_start_time(claim15,V207,V208)
| | | Exit: claim.hosp_start_time(claim15,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim15,V209,V210)
| | | Exit: claim.hosp_end_time(claim15,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person15,V211)
| | | Exit: policy.startdate(policy1,person15,01_08_2023)
| | | Call: policy.enddate(policy1,person15,V212)
| | | Exit: policy.enddate(policy1,person15,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V213)
| | | | Call: evaluate(parsedate(02_09_2023),[V214,V215,V216])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V213)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V217)
| | | | Call: evaluate(parsedate(02_09_2023),[V218,V219,V220])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V217)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V221)
| | | | Call: evaluate(parsedate(30_06_2024),[V222,V223,V224])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V221)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V225)
| | | | Call: evaluate(parsedate(01_08_2023),[V226,V227,V228])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V225)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim15,policy1)
| | | Call: claim.hospital(claim15,V229)
| | | Exit: claim.hospital(claim15,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim15,V230)
| | | Exit: claim.reason(claim15,female_contraceptives)
| | | Call: eligible_service(claim15,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim15,female_contraceptives)
| | | | | Call: claim.claimant(claim15,V231)
| | | | | Exit: claim.claimant(claim15,person15)
| | | | | Call: person.dob(person15,V232)
| | | | | Exit: person.dob(person15,01_01_2001)
| | | | | Call: claim.time(claim15,V233,V234)
| | | | | Exit: claim.time(claim15,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V235)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V236,V237,V238])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V239,V240,V241])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V242)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V243)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V244)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V245)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V235)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V246)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V247,V248,V246)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V247,V248,V246)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V246)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V235)
| | | | | Redo: claim.time(claim15,V233,V234)
| | | | | Fail: claim.time(claim15,V233,V234)
| | | | | Redo: person.dob(person15,V232)
| | | | | Fail: person.dob(person15,V232)
| | | | | Redo: claim.claimant(claim15,V231)
| | | | | Fail: claim.claimant(claim15,V231)
| | | | Fail: check_policy_year_limit(claim15,female_contraceptives)
| | | | Call: covered_list_with_location(V249)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V249)
| | | | Fail: covered_list_with_location(V249)
| | | | Call: covered_list_with_service_provider(V250)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V250)
| | | | Fail: covered_list_with_service_provider(V250)
| | | | Call: covered_list(V251)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V251)
| | | | Fail: covered_list(V251)
| | | | Call: claim.claimant(claim15,V252)
| | | | Exit: claim.claimant(claim15,person15)
| | | | Call: claim.contraceptive_service(claim15,V253)
| | | | Exit: claim.contraceptive_service(claim15,other)
| | | | Call: fda_approved(other)
| | | | Fail: fda_approved(other)
| | | | Redo: claim.contraceptive_service(claim15,V253)
| | | | Fail: claim.contraceptive_service(claim15,V253)
| | | | Redo: claim.claimant(claim15,V252)
| | | | Fail: claim.claimant(claim15,V252)
| | | Fail: eligible_service(claim15,policy1,female_contraceptives)
| | | Redo: claim.reason(claim15,V230)
| | | Fail: claim.reason(claim15,V230)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim15,V229)
| | | Fail: claim.hospital(claim15,V229)
| | | Call: claim.reason(claim15,emergency_room)
| | | Fail: claim.reason(claim15,emergency_room)
| | Fail: valid_hospitalization(claim15,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V225)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V221)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V217)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V213)
| | | Redo: policy.enddate(policy1,person15,V212)
| | | Fail: policy.enddate(policy1,person15,V212)
| | | Redo: policy.startdate(policy1,person15,V211)
| | | Fail: policy.startdate(policy1,person15,V211)
| | | Redo: claim.hosp_end_time(claim15,V209,V210)
| | | Fail: claim.hosp_end_time(claim15,V209,V210)
| | | Redo: claim.hosp_start_time(claim15,V207,V208)
| | | Fail: claim.hosp_start_time(claim15,V207,V208)
| | | Redo: claim.claimant(claim15,V206)
| | | Fail: claim.claimant(claim15,V206)
| | Fail: policy_active(claim15,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person15)
| | | Fail: policy.insuree(policy1,person15)
| | | Redo: claim.claimant(claim15,V205)
| | | Fail: claim.claimant(claim15,V205)
| | Fail: valid_insuree(claim15,policy1)
| Fail: covered_under_policy(claim15,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim15,policy1,cardinal)
| | Call: valid_insuree(claim15,policy1)
| | | Call: claim.claimant(claim15,V254)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: policy.insuree(policy1,person15)
| | | Exit: policy.insuree(policy1,person15)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim15,policy1)
| | | Call: claim.claimant(claim15,V255)
| | | Exit: claim.claimant(claim15,person15)
| | | Call: claim.hosp_start_time(claim15,V256,V257)
| | | Exit: claim.hosp_start_time(claim15,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim15,V258,V259)
| | | Exit: claim.hosp_end_time(claim15,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person15,V260)
| | | Exit: policy.startdate(policy1,person15,01_08_2023)
| | | Call: policy.enddate(policy1,person15,V261)
| | | Exit: policy.enddate(policy1,person15,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V262)
| | | | Call: evaluate(parsedate(02_09_2023),[V263,V264,V265])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V262)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V266)
| | | | Call: evaluate(parsedate(02_09_2023),[V267,V268,V269])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V266)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V270)
| | | | Call: evaluate(parsedate(30_06_2024),[V271,V272,V273])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V270)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V274)
| | | | Call: evaluate(parsedate(01_08_2023),[V275,V276,V277])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V274)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim15,policy1)
| | | Call: claim.hospital(claim15,V278)
| | | Exit: claim.hospital(claim15,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim15,V279)
| | | Exit: claim.reason(claim15,female_contraceptives)
| | | Call: eligible_service(claim15,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim15,female_contraceptives)
| | | | | Call: claim.claimant(claim15,V280)
| | | | | Exit: claim.claimant(claim15,person15)
| | | | | Call: person.dob(person15,V281)
| | | | | Exit: person.dob(person15,01_01_2001)
| | | | | Call: claim.time(claim15,V282,V283)
| | | | | Exit: claim.time(claim15,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V284)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V285,V286,V287])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V288,V289,V290])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V291)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V292)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V293)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V294)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V284)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V295)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V296,V297,V295)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V296,V297,V295)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V295)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V284)
| | | | | Redo: claim.time(claim15,V282,V283)
| | | | | Fail: claim.time(claim15,V282,V283)
| | | | | Redo: person.dob(person15,V281)
| | | | | Fail: person.dob(person15,V281)
| | | | | Redo: claim.claimant(claim15,V280)
| | | | | Fail: claim.claimant(claim15,V280)
| | | | Fail: check_policy_year_limit(claim15,female_contraceptives)
| | | | Call: covered_list_with_location(V298)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V298)
| | | | Fail: covered_list_with_location(V298)
| | | | Call: covered_list_with_service_provider(V299)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V299)
| | | | Fail: covered_list_with_service_provider(V299)
| | | | Call: covered_list(V300)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V300)
| | | | Fail: covered_list(V300)
| | | | Call: claim.claimant(claim15,V301)
| | | | Exit: claim.claimant(claim15,person15)
| | | | Call: claim.contraceptive_service(claim15,V302)
| | | | Exit: claim.contraceptive_service(claim15,other)
| | | | Call: fda_approved(other)
| | | | Fail: fda_approved(other)
| | | | Redo: claim.contraceptive_service(claim15,V302)
| | | | Fail: claim.contraceptive_service(claim15,V302)
| | | | Redo: claim.claimant(claim15,V301)
| | | | Fail: claim.claimant(claim15,V301)
| | | Fail: eligible_service(claim15,policy1,female_contraceptives)
| | | Redo: claim.reason(claim15,V279)
| | | Fail: claim.reason(claim15,V279)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim15,V278)
| | | Fail: claim.hospital(claim15,V278)
| | | Call: claim.reason(claim15,emergency_room)
| | | Fail: claim.reason(claim15,emergency_room)
| | Fail: valid_hospitalization(claim15,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V274)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V270)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V266)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V262)
| | | Redo: policy.enddate(policy1,person15,V261)
| | | Fail: policy.enddate(policy1,person15,V261)
| | | Redo: policy.startdate(policy1,person15,V260)
| | | Fail: policy.startdate(policy1,person15,V260)
| | | Redo: claim.hosp_end_time(claim15,V258,V259)
| | | Fail: claim.hosp_end_time(claim15,V258,V259)
| | | Redo: claim.hosp_start_time(claim15,V256,V257)
| | | Fail: claim.hosp_start_time(claim15,V256,V257)
| | | Redo: claim.claimant(claim15,V255)
| | | Fail: claim.claimant(claim15,V255)
| | Fail: policy_active(claim15,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person15)
| | | Fail: policy.insuree(policy1,person15)
| | | Redo: claim.claimant(claim15,V254)
| | | Fail: claim.claimant(claim15,V254)
| | Fail: valid_insuree(claim15,policy1)
| Fail: covered_under_policy(claim15,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Fail: policy.type(policy1,V2)
| Redo: claim.policy(X,V1)
| Exit: claim.policy(claim16,policy1)
| Call: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim16,policy1,cardinal)
| | Call: valid_insuree(claim16,policy1)
| | | Call: claim.claimant(claim16,V303)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: policy.insuree(policy1,person16)
| | | Exit: policy.insuree(policy1,person16)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim16,policy1)
| | | Call: claim.claimant(claim16,V304)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: claim.hosp_start_time(claim16,V305,V306)
| | | Exit: claim.hosp_start_time(claim16,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim16,V307,V308)
| | | Exit: claim.hosp_end_time(claim16,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person16,V309)
| | | Exit: policy.startdate(policy1,person16,01_08_2023)
| | | Call: policy.enddate(policy1,person16,V310)
| | | Exit: policy.enddate(policy1,person16,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V311)
| | | | Call: evaluate(parsedate(02_09_2023),[V312,V313,V314])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V311)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V315)
| | | | Call: evaluate(parsedate(02_09_2023),[V316,V317,V318])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V315)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V319)
| | | | Call: evaluate(parsedate(30_06_2024),[V320,V321,V322])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V319)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V323)
| | | | Call: evaluate(parsedate(01_08_2023),[V324,V325,V326])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V323)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim16,policy1)
| | | Call: claim.hospital(claim16,V327)
| | | Exit: claim.hospital(claim16,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim16,V328)
| | | Exit: claim.reason(claim16,female_contraceptives)
| | | Call: eligible_service(claim16,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim16,female_contraceptives)
| | | | | Call: claim.claimant(claim16,V329)
| | | | | Exit: claim.claimant(claim16,person16)
| | | | | Call: person.dob(person16,V330)
| | | | | Exit: person.dob(person16,01_01_2001)
| | | | | Call: claim.time(claim16,V331,V332)
| | | | | Exit: claim.time(claim16,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V333)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V334,V335,V336])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V337,V338,V339])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V340)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V341)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V342)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V343)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V333)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V344)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V345,V346,V344)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V345,V346,V344)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V344)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V333)
| | | | | Redo: claim.time(claim16,V331,V332)
| | | | | Fail: claim.time(claim16,V331,V332)
| | | | | Redo: person.dob(person16,V330)
| | | | | Fail: person.dob(person16,V330)
| | | | | Redo: claim.claimant(claim16,V329)
| | | | | Fail: claim.claimant(claim16,V329)
| | | | Fail: check_policy_year_limit(claim16,female_contraceptives)
| | | | Call: covered_list_with_location(V347)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V347)
| | | | Fail: covered_list_with_location(V347)
| | | | Call: covered_list_with_service_provider(V348)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V348)
| | | | Fail: covered_list_with_service_provider(V348)
| | | | Call: covered_list(V349)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V349)
| | | | Fail: covered_list(V349)
| | | | Call: claim.claimant(claim16,V350)
| | | | Exit: claim.claimant(claim16,person16)
| | | | Call: claim.contraceptive_service(claim16,V351)
| | | | Exit: claim.contraceptive_service(claim16,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim16,V352)
| | | | Exit: claim.location(claim16,hospital)
| | | | Call: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Redo: claim.location(claim16,V352)
| | | | Fail: claim.location(claim16,V352)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim16,V351)
| | | | Fail: claim.contraceptive_service(claim16,V351)
| | | | Redo: claim.claimant(claim16,V350)
| | | | Fail: claim.claimant(claim16,V350)
| | | Fail: eligible_service(claim16,policy1,female_contraceptives)
| | | Redo: claim.reason(claim16,V328)
| | | Fail: claim.reason(claim16,V328)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim16,V327)
| | | Fail: claim.hospital(claim16,V327)
| | | Call: claim.reason(claim16,emergency_room)
| | | Fail: claim.reason(claim16,emergency_room)
| | Fail: valid_hospitalization(claim16,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V323)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V319)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V315)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V311)
| | | Redo: policy.enddate(policy1,person16,V310)
| | | Fail: policy.enddate(policy1,person16,V310)
| | | Redo: policy.startdate(policy1,person16,V309)
| | | Fail: policy.startdate(policy1,person16,V309)
| | | Redo: claim.hosp_end_time(claim16,V307,V308)
| | | Fail: claim.hosp_end_time(claim16,V307,V308)
| | | Redo: claim.hosp_start_time(claim16,V305,V306)
| | | Fail: claim.hosp_start_time(claim16,V305,V306)
| | | Redo: claim.claimant(claim16,V304)
| | | Fail: claim.claimant(claim16,V304)
| | Fail: policy_active(claim16,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person16)
| | | Fail: policy.insuree(policy1,person16)
| | | Redo: claim.claimant(claim16,V303)
| | | Fail: claim.claimant(claim16,V303)
| | Fail: valid_insuree(claim16,policy1)
| Fail: covered_under_policy(claim16,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim16,policy1,cardinal)
| | Call: valid_insuree(claim16,policy1)
| | | Call: claim.claimant(claim16,V353)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: policy.insuree(policy1,person16)
| | | Exit: policy.insuree(policy1,person16)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim16,policy1)
| | | Call: claim.claimant(claim16,V354)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: claim.hosp_start_time(claim16,V355,V356)
| | | Exit: claim.hosp_start_time(claim16,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim16,V357,V358)
| | | Exit: claim.hosp_end_time(claim16,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person16,V359)
| | | Exit: policy.startdate(policy1,person16,01_08_2023)
| | | Call: policy.enddate(policy1,person16,V360)
| | | Exit: policy.enddate(policy1,person16,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V361)
| | | | Call: evaluate(parsedate(02_09_2023),[V362,V363,V364])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V361)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V365)
| | | | Call: evaluate(parsedate(02_09_2023),[V366,V367,V368])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V365)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V369)
| | | | Call: evaluate(parsedate(30_06_2024),[V370,V371,V372])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V369)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V373)
| | | | Call: evaluate(parsedate(01_08_2023),[V374,V375,V376])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V373)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim16,policy1)
| | | Call: claim.hospital(claim16,V377)
| | | Exit: claim.hospital(claim16,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim16,V378)
| | | Exit: claim.reason(claim16,female_contraceptives)
| | | Call: eligible_service(claim16,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim16,female_contraceptives)
| | | | | Call: claim.claimant(claim16,V379)
| | | | | Exit: claim.claimant(claim16,person16)
| | | | | Call: person.dob(person16,V380)
| | | | | Exit: person.dob(person16,01_01_2001)
| | | | | Call: claim.time(claim16,V381,V382)
| | | | | Exit: claim.time(claim16,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V383)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V384,V385,V386])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V387,V388,V389])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V390)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V391)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V392)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V393)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V383)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V394)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V395,V396,V394)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V395,V396,V394)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V394)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V383)
| | | | | Redo: claim.time(claim16,V381,V382)
| | | | | Fail: claim.time(claim16,V381,V382)
| | | | | Redo: person.dob(person16,V380)
| | | | | Fail: person.dob(person16,V380)
| | | | | Redo: claim.claimant(claim16,V379)
| | | | | Fail: claim.claimant(claim16,V379)
| | | | Fail: check_policy_year_limit(claim16,female_contraceptives)
| | | | Call: covered_list_with_location(V397)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V397)
| | | | Fail: covered_list_with_location(V397)
| | | | Call: covered_list_with_service_provider(V398)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V398)
| | | | Fail: covered_list_with_service_provider(V398)
| | | | Call: covered_list(V399)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V399)
| | | | Fail: covered_list(V399)
| | | | Call: claim.claimant(claim16,V400)
| | | | Exit: claim.claimant(claim16,person16)
| | | | Call: claim.contraceptive_service(claim16,V401)
| | | | Exit: claim.contraceptive_service(claim16,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim16,V402)
| | | | Exit: claim.location(claim16,hospital)
| | | | Call: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Redo: claim.location(claim16,V402)
| | | | Fail: claim.location(claim16,V402)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim16,V401)
| | | | Fail: claim.contraceptive_service(claim16,V401)
| | | | Redo: claim.claimant(claim16,V400)
| | | | Fail: claim.claimant(claim16,V400)
| | | Fail: eligible_service(claim16,policy1,female_contraceptives)
| | | Redo: claim.reason(claim16,V378)
| | | Fail: claim.reason(claim16,V378)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim16,V377)
| | | Fail: claim.hospital(claim16,V377)
| | | Call: claim.reason(claim16,emergency_room)
| | | Fail: claim.reason(claim16,emergency_room)
| | Fail: valid_hospitalization(claim16,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V373)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V369)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V365)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V361)
| | | Redo: policy.enddate(policy1,person16,V360)
| | | Fail: policy.enddate(policy1,person16,V360)
| | | Redo: policy.startdate(policy1,person16,V359)
| | | Fail: policy.startdate(policy1,person16,V359)
| | | Redo: claim.hosp_end_time(claim16,V357,V358)
| | | Fail: claim.hosp_end_time(claim16,V357,V358)
| | | Redo: claim.hosp_start_time(claim16,V355,V356)
| | | Fail: claim.hosp_start_time(claim16,V355,V356)
| | | Redo: claim.claimant(claim16,V354)
| | | Fail: claim.claimant(claim16,V354)
| | Fail: policy_active(claim16,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person16)
| | | Fail: policy.insuree(policy1,person16)
| | | Redo: claim.claimant(claim16,V353)
| | | Fail: claim.claimant(claim16,V353)
| | Fail: valid_insuree(claim16,policy1)
| Fail: covered_under_policy(claim16,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim16,policy1,cardinal)
| | Call: valid_insuree(claim16,policy1)
| | | Call: claim.claimant(claim16,V403)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: policy.insuree(policy1,person16)
| | | Exit: policy.insuree(policy1,person16)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim16,policy1)
| | | Call: claim.claimant(claim16,V404)
| | | Exit: claim.claimant(claim16,person16)
| | | Call: claim.hosp_start_time(claim16,V405,V406)
| | | Exit: claim.hosp_start_time(claim16,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim16,V407,V408)
| | | Exit: claim.hosp_end_time(claim16,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person16,V409)
| | | Exit: policy.startdate(policy1,person16,01_08_2023)
| | | Call: policy.enddate(policy1,person16,V410)
| | | Exit: policy.enddate(policy1,person16,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V411)
| | | | Call: evaluate(parsedate(02_09_2023),[V412,V413,V414])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V411)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V415)
| | | | Call: evaluate(parsedate(02_09_2023),[V416,V417,V418])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V415)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V419)
| | | | Call: evaluate(parsedate(30_06_2024),[V420,V421,V422])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V419)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V423)
| | | | Call: evaluate(parsedate(01_08_2023),[V424,V425,V426])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V423)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim16,policy1)
| | | Call: claim.hospital(claim16,V427)
| | | Exit: claim.hospital(claim16,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim16,V428)
| | | Exit: claim.reason(claim16,female_contraceptives)
| | | Call: eligible_service(claim16,policy1,female_contraceptives)
| | | | Call: check_policy_year_limit(claim16,female_contraceptives)
| | | | | Call: claim.claimant(claim16,V429)
| | | | | Exit: claim.claimant(claim16,person16)
| | | | | Call: person.dob(person16,V430)
| | | | | Exit: person.dob(person16,01_01_2001)
| | | | | Call: claim.time(claim16,V431,V432)
| | | | | Exit: claim.time(claim16,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V433)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V434,V435,V436])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V437,V438,V439])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V440)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V441)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V442)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V443)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V433)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(female_contraceptives,23,V444)
| | | | | | Call: yearly_visit_limit(female_contraceptives,V445,V446,V444)
| | | | | | Fail: yearly_visit_limit(female_contraceptives,V445,V446,V444)
| | | | | Fail: yearly_visit_limit(female_contraceptives,23,V444)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V433)
| | | | | Redo: claim.time(claim16,V431,V432)
| | | | | Fail: claim.time(claim16,V431,V432)
| | | | | Redo: person.dob(person16,V430)
| | | | | Fail: person.dob(person16,V430)
| | | | | Redo: claim.claimant(claim16,V429)
| | | | | Fail: claim.claimant(claim16,V429)
| | | | Fail: check_policy_year_limit(claim16,female_contraceptives)
| | | | Call: covered_list_with_location(V447)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(female_contraceptives,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V447)
| | | | Fail: covered_list_with_location(V447)
| | | | Call: covered_list_with_service_provider(V448)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(female_contraceptives,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V448)
| | | | Fail: covered_list_with_service_provider(V448)
| | | | Call: covered_list(V449)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(female_contraceptives,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V449)
| | | | Fail: covered_list(V449)
| | | | Call: claim.claimant(claim16,V450)
| | | | Exit: claim.claimant(claim16,person16)
| | | | Call: claim.contraceptive_service(claim16,V451)
| | | | Exit: claim.contraceptive_service(claim16,iud_with_preogestin)
| | | | Call: fda_approved(iud_with_preogestin)
| | | | Exit: fda_approved(iud_with_preogestin)
| | | | Call: claim.location(claim16,V452)
| | | | Exit: claim.location(claim16,hospital)
| | | | Call: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Fail: contraceptive_location_check(iud_with_preogestin,hospital)
| | | | Redo: claim.location(claim16,V452)
| | | | Fail: claim.location(claim16,V452)
| | | | Redo: fda_approved(iud_with_preogestin)
| | | | Fail: fda_approved(iud_with_preogestin)
| | | | Redo: claim.contraceptive_service(claim16,V451)
| | | | Fail: claim.contraceptive_service(claim16,V451)
| | | | Redo: claim.claimant(claim16,V450)
| | | | Fail: claim.claimant(claim16,V450)
| | | Fail: eligible_service(claim16,policy1,female_contraceptives)
| | | Redo: claim.reason(claim16,V428)
| | | Fail: claim.reason(claim16,V428)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim16,V427)
| | | Fail: claim.hospital(claim16,V427)
| | | Call: claim.reason(claim16,emergency_room)
| | | Fail: claim.reason(claim16,emergency_room)
| | Fail: valid_hospitalization(claim16,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V423)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V419)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V415)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V411)
| | | Redo: policy.enddate(policy1,person16,V410)
| | | Fail: policy.enddate(policy1,person16,V410)
| | | Redo: policy.startdate(policy1,person16,V409)
| | | Fail: policy.startdate(policy1,person16,V409)
| | | Redo: claim.hosp_end_time(claim16,V407,V408)
| | | Fail: claim.hosp_end_time(claim16,V407,V408)
| | | Redo: claim.hosp_start_time(claim16,V405,V406)
| | | Fail: claim.hosp_start_time(claim16,V405,V406)
| | | Redo: claim.claimant(claim16,V404)
| | | Fail: claim.claimant(claim16,V404)
| | Fail: policy_active(claim16,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person16)
| | | Fail: policy.insuree(policy1,person16)
| | | Redo: claim.claimant(claim16,V403)
| | | Fail: claim.claimant(claim16,V403)
| | Fail: valid_insuree(claim16,policy1)
| Fail: covered_under_policy(claim16,policy1,cardinal)
| Redo: policy.type(policy1,V2)
| Fail: policy.type(policy1,V2)
| Redo: claim.policy(X,V1)
| Fail: claim.policy(X,V1)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_contraceptives.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim14' ]
RESULTS: [ 'claim14' ]
===== TEST SUCCEEDED: Test test_cases_contraceptives.hdf===== 
Expected Result:  [ 'claim_a9', 'claim_a11' ]
Call: covered(X)
| Call: claim.policy(X,V453)
| Exit: claim.policy(claim_a9,policy1)
| Call: policy.type(policy1,V454)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a9,policy1,cardinal)
| | Call: valid_insuree(claim_a9,policy1)
| | | Call: claim.claimant(claim_a9,V455)
| | | Exit: claim.claimant(claim_a9,person_a9)
| | | Call: policy.insuree(policy1,person_a9)
| | | Exit: policy.insuree(policy1,person_a9)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a9,policy1)
| | | Call: claim.claimant(claim_a9,V456)
| | | Exit: claim.claimant(claim_a9,person_a9)
| | | Call: claim.hosp_start_time(claim_a9,V457,V458)
| | | Exit: claim.hosp_start_time(claim_a9,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a9,V459,V460)
| | | Exit: claim.hosp_end_time(claim_a9,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a9,V461)
| | | Exit: policy.startdate(policy1,person_a9,01_08_2023)
| | | Call: policy.enddate(policy1,person_a9,V462)
| | | Exit: policy.enddate(policy1,person_a9,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V463)
| | | | Call: evaluate(parsedate(03_09_2023),[V464,V465,V466])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V463)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V467)
| | | | Call: evaluate(parsedate(03_09_2023),[V468,V469,V470])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V467)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V471)
| | | | Call: evaluate(parsedate(30_06_2024),[V472,V473,V474])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V471)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V475)
| | | | Call: evaluate(parsedate(01_08_2023),[V476,V477,V478])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V475)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a9,policy1)
| | | Call: claim.hospital(claim_a9,V479)
| | | Exit: claim.hospital(claim_a9,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a9,V480)
| | | Exit: claim.reason(claim_a9,preventive_care)
| | | Call: eligible_service(claim_a9,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a9,preventive_care)
| | | | | Call: claim.claimant(claim_a9,V481)
| | | | | Exit: claim.claimant(claim_a9,person_a9)
| | | | | Call: person.dob(person_a9,V482)
| | | | | Exit: person.dob(person_a9,04_02_2023)
| | | | | Call: claim.time(claim_a9,V483,V484)
| | | | | Fail: claim.time(claim_a9,V483,V484)
| | | | | Redo: person.dob(person_a9,V482)
| | | | | Fail: person.dob(person_a9,V482)
| | | | | Redo: claim.claimant(claim_a9,V481)
| | | | | Fail: claim.claimant(claim_a9,V481)
| | | | Fail: check_policy_year_limit(claim_a9,preventive_care)
| | | | Call: covered_list_with_location(V485)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V485)
| | | | Fail: covered_list_with_location(V485)
| | | | Call: covered_list_with_service_provider(V486)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V486)
| | | | Fail: covered_list_with_service_provider(V486)
| | | | Call: covered_list(V487)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V487)
| | | | Fail: covered_list(V487)
| | | | Call: claim.location(claim_a9,V488)
| | | | Exit: claim.location(claim_a9,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a9,hep_b)
| | | | Fail: claim.vaccine(claim_a9,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a9,V488)
| | | | Fail: claim.location(claim_a9,V488)
| | | | Call: claim.location(claim_a9,V489)
| | | | Exit: claim.location(claim_a9,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a9,covid)
| | | | Exit: claim.vaccine(claim_a9,covid)
| | | | Call: claim.claimant(claim_a9,V490)
| | | | Exit: claim.claimant(claim_a9,person_a9)
| | | | Call: person.dob(person_a9,V491)
| | | | Exit: person.dob(person_a9,04_02_2023)
| | | | Call: claim.hosp_start_time(claim_a9,V492,V493)
| | | | Exit: claim.hosp_start_time(claim_a9,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_02_2023,V494)
| | | | | Call: evaluate(parsedate(03_09_2023),[V495,V496,V497])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V498,V499,V500])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V501)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V502)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V503)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,7),-1),V504)
| | | | | Exit: evaluate(plus(imul(31,7),-1),216)
| | | | | Call: evaluate(plus(0,if(leq(216,-1),-1,true,0)),V494)
| | | | | Exit: evaluate(plus(0,if(leq(216,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2023,V505)
| | | | | Call: evaluate(parsedate(03_09_2023),[V506,V507,V508])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V509,V510,V511])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V512)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V513)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V514)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),7),V515)
| | | | | Exit: evaluate(plus(imul(12,0),7),7)
| | | | | Call: evaluate(if(leq(-1,-1),minus(7,1),true,7),V505)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(7,1),true,7),6)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: person.immunocompromised(person_a9,V516)
| | | | Exit: person.immunocompromised(person_a9,no)
| | | | Call: claim.vaccine_brand(claim_a9,V517)
| | | | Exit: claim.vaccine_brand(claim_a9,moderna)
| | | | Call: claim.previous_vaccines_pfizer(claim_a9,V518)
| | | | Exit: claim.previous_vaccines_pfizer(claim_a9,0)
| | | | Call: claim.previous_vaccines_moderna(claim_a9,V519)
| | | | Exit: claim.previous_vaccines_moderna(claim_a9,0)
| | | | Call: claim.previous_vaccines_other(claim_a9,V520)
| | | | Exit: claim.previous_vaccines_other(claim_a9,0)
| | | | Call: age_range_limit_covid(claim_a9,V521,0,6,no,moderna,0,0,0)
| | | | | Call: leq(0,4)
| | | | | Exit: leq(0,4)
| | | | | Call: leq(6,6)
| | | | | Exit: leq(6,6)
| | | | Exit: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Call: claim.vaccine_dose_count(claim_a9,V522)
| | | | Exit: claim.vaccine_dose_count(claim_a9,2)
| | | | Call: leq(2,2)
| | | | Exit: leq(2,2)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a9,policy1)
Call: exception(claim_a9,policy1)
| Call: claim.claimant(claim_a9,V523)
| Exit: claim.claimant(claim_a9,person_a9)
| Call: person.occupation(person_a9,armed_forces)
| Fail: person.occupation(person_a9,armed_forces)
| Redo: claim.claimant(claim_a9,V523)
| Fail: claim.claimant(claim_a9,V523)
| Call: claim.reason(claim_a9,home_health_care)
| Fail: claim.reason(claim_a9,home_health_care)
| Call: claim.reason(claim_a9,home_health_care)
| Fail: claim.reason(claim_a9,home_health_care)
Fail: exception(claim_a9,policy1)
| | | Exit: ~exception(claim_a9,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a9)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count(claim_a9,V522)
| | | | Fail: claim.vaccine_dose_count(claim_a9,V522)
| | | | Redo: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | | Call: leq(0,4)
| | | | | Exit: leq(0,4)
| | | | | Call: leq(6,6)
| | | | | Exit: leq(6,6)
| | | | | Call: leq(1,0)
| | | | | Fail: leq(1,0)
| | | | | Call: leq(5,0)
| | | | | Fail: leq(5,0)
| | | | | Call: evaluate(plus(0,0,0),V524)
| | | | | Exit: evaluate(plus(0,0,0),0)
| | | | | Call: leq(5,0)
| | | | | Fail: leq(5,0)
| | | | Fail: age_range_limit_covid(claim_a9,V521,0,6,no,moderna,0,0,0)
| | | | Redo: claim.previous_vaccines_other(claim_a9,V520)
| | | | Fail: claim.previous_vaccines_other(claim_a9,V520)
| | | | Redo: claim.previous_vaccines_moderna(claim_a9,V519)
| | | | Fail: claim.previous_vaccines_moderna(claim_a9,V519)
| | | | Redo: claim.previous_vaccines_pfizer(claim_a9,V518)
| | | | Fail: claim.previous_vaccines_pfizer(claim_a9,V518)
| | | | Redo: claim.vaccine_brand(claim_a9,V517)
| | | | Fail: claim.vaccine_brand(claim_a9,V517)
| | | | Redo: person.immunocompromised(person_a9,V516)
| | | | Fail: person.immunocompromised(person_a9,V516)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2023,V505)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_02_2023,V494)
| | | | Redo: claim.hosp_start_time(claim_a9,V492,V493)
| | | | Fail: claim.hosp_start_time(claim_a9,V492,V493)
| | | | Redo: person.dob(person_a9,V491)
| | | | Fail: person.dob(person_a9,V491)
| | | | Redo: claim.claimant(claim_a9,V490)
| | | | Fail: claim.claimant(claim_a9,V490)
| | | | Redo: claim.vaccine(claim_a9,covid)
| | | | Fail: claim.vaccine(claim_a9,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a9,V489)
| | | | Fail: claim.location(claim_a9,V489)
| | | | Call: claim.location(claim_a9,V525)
| | | | Exit: claim.location(claim_a9,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a9,flu)
| | | | Fail: claim.vaccine(claim_a9,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a9,V525)
| | | | Fail: claim.location(claim_a9,V525)
| | | Fail: eligible_service(claim_a9,policy1,preventive_care)
| | | Redo: claim.reason(claim_a9,V480)
| | | Fail: claim.reason(claim_a9,V480)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a9,V479)
| | | Fail: claim.hospital(claim_a9,V479)
| | | Call: claim.reason(claim_a9,emergency_room)
| | | Fail: claim.reason(claim_a9,emergency_room)
| | Fail: valid_hospitalization(claim_a9,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V475)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V471)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V467)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V463)
| | | Redo: policy.enddate(policy1,person_a9,V462)
| | | Fail: policy.enddate(policy1,person_a9,V462)
| | | Redo: policy.startdate(policy1,person_a9,V461)
| | | Fail: policy.startdate(policy1,person_a9,V461)
| | | Redo: claim.hosp_end_time(claim_a9,V459,V460)
| | | Fail: claim.hosp_end_time(claim_a9,V459,V460)
| | | Redo: claim.hosp_start_time(claim_a9,V457,V458)
| | | Fail: claim.hosp_start_time(claim_a9,V457,V458)
| | | Redo: claim.claimant(claim_a9,V456)
| | | Fail: claim.claimant(claim_a9,V456)
| | Fail: policy_active(claim_a9,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a9)
| | | Fail: policy.insuree(policy1,person_a9)
| | | Redo: claim.claimant(claim_a9,V455)
| | | Fail: claim.claimant(claim_a9,V455)
| | Fail: valid_insuree(claim_a9,policy1)
| Fail: covered_under_policy(claim_a9,policy1,cardinal)
| Redo: policy.type(policy1,V454)
| Fail: policy.type(policy1,V454)
| Redo: claim.policy(X,V453)
| Exit: claim.policy(claim_a10,policy1)
| Call: policy.type(policy1,V454)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a10,policy1,cardinal)
| | Call: valid_insuree(claim_a10,policy1)
| | | Call: claim.claimant(claim_a10,V526)
| | | Exit: claim.claimant(claim_a10,person_a10)
| | | Call: policy.insuree(policy1,person_a10)
| | | Exit: policy.insuree(policy1,person_a10)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a10,policy1)
| | | Call: claim.claimant(claim_a10,V527)
| | | Exit: claim.claimant(claim_a10,person_a10)
| | | Call: claim.hosp_start_time(claim_a10,V528,V529)
| | | Exit: claim.hosp_start_time(claim_a10,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a10,V530,V531)
| | | Exit: claim.hosp_end_time(claim_a10,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a10,V532)
| | | Exit: policy.startdate(policy1,person_a10,01_08_2023)
| | | Call: policy.enddate(policy1,person_a10,V533)
| | | Exit: policy.enddate(policy1,person_a10,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V534)
| | | | Call: evaluate(parsedate(03_09_2023),[V535,V536,V537])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V534)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V538)
| | | | Call: evaluate(parsedate(03_09_2023),[V539,V540,V541])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V538)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V542)
| | | | Call: evaluate(parsedate(30_06_2024),[V543,V544,V545])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V542)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V546)
| | | | Call: evaluate(parsedate(01_08_2023),[V547,V548,V549])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V546)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a10,policy1)
| | | Call: claim.hospital(claim_a10,V550)
| | | Exit: claim.hospital(claim_a10,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a10,V551)
| | | Exit: claim.reason(claim_a10,preventive_care)
| | | Call: eligible_service(claim_a10,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a10,preventive_care)
| | | | | Call: claim.claimant(claim_a10,V552)
| | | | | Exit: claim.claimant(claim_a10,person_a10)
| | | | | Call: person.dob(person_a10,V553)
| | | | | Exit: person.dob(person_a10,04_02_2023)
| | | | | Call: claim.time(claim_a10,V554,V555)
| | | | | Fail: claim.time(claim_a10,V554,V555)
| | | | | Redo: person.dob(person_a10,V553)
| | | | | Fail: person.dob(person_a10,V553)
| | | | | Redo: claim.claimant(claim_a10,V552)
| | | | | Fail: claim.claimant(claim_a10,V552)
| | | | Fail: check_policy_year_limit(claim_a10,preventive_care)
| | | | Call: covered_list_with_location(V556)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V556)
| | | | Fail: covered_list_with_location(V556)
| | | | Call: covered_list_with_service_provider(V557)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V557)
| | | | Fail: covered_list_with_service_provider(V557)
| | | | Call: covered_list(V558)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V558)
| | | | Fail: covered_list(V558)
| | | | Call: claim.location(claim_a10,V559)
| | | | Exit: claim.location(claim_a10,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a10,hep_b)
| | | | Fail: claim.vaccine(claim_a10,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a10,V559)
| | | | Fail: claim.location(claim_a10,V559)
| | | | Call: claim.location(claim_a10,V560)
| | | | Exit: claim.location(claim_a10,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a10,covid)
| | | | Exit: claim.vaccine(claim_a10,covid)
| | | | Call: claim.claimant(claim_a10,V561)
| | | | Exit: claim.claimant(claim_a10,person_a10)
| | | | Call: person.dob(person_a10,V562)
| | | | Exit: person.dob(person_a10,04_02_2023)
| | | | Call: claim.hosp_start_time(claim_a10,V563,V564)
| | | | Exit: claim.hosp_start_time(claim_a10,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_02_2023,V565)
| | | | | Call: evaluate(parsedate(03_09_2023),[V566,V567,V568])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V569,V570,V571])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V572)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V573)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V574)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,7),-1),V575)
| | | | | Exit: evaluate(plus(imul(31,7),-1),216)
| | | | | Call: evaluate(plus(0,if(leq(216,-1),-1,true,0)),V565)
| | | | | Exit: evaluate(plus(0,if(leq(216,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2023,V576)
| | | | | Call: evaluate(parsedate(03_09_2023),[V577,V578,V579])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V580,V581,V582])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V583)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V584)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V585)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),7),V586)
| | | | | Exit: evaluate(plus(imul(12,0),7),7)
| | | | | Call: evaluate(if(leq(-1,-1),minus(7,1),true,7),V576)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(7,1),true,7),6)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: person.immunocompromised(person_a10,V587)
| | | | Exit: person.immunocompromised(person_a10,no)
| | | | Call: claim.vaccine_brand(claim_a10,V588)
| | | | Exit: claim.vaccine_brand(claim_a10,moderna)
| | | | Call: claim.previous_vaccines_pfizer(claim_a10,V589)
| | | | Exit: claim.previous_vaccines_pfizer(claim_a10,0)
| | | | Call: claim.previous_vaccines_moderna(claim_a10,V590)
| | | | Exit: claim.previous_vaccines_moderna(claim_a10,0)
| | | | Call: claim.previous_vaccines_other(claim_a10,V591)
| | | | Exit: claim.previous_vaccines_other(claim_a10,0)
| | | | Call: age_range_limit_covid(claim_a10,V592,0,6,no,moderna,0,0,0)
| | | | | Call: leq(0,4)
| | | | | Exit: leq(0,4)
| | | | | Call: leq(6,6)
| | | | | Exit: leq(6,6)
| | | | Exit: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Call: claim.vaccine_dose_count(claim_a10,V593)
| | | | Exit: claim.vaccine_dose_count(claim_a10,3)
| | | | Call: leq(3,2)
| | | | Fail: leq(3,2)
| | | | Redo: claim.vaccine_dose_count(claim_a10,V593)
| | | | Fail: claim.vaccine_dose_count(claim_a10,V593)
| | | | Redo: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | | Call: leq(0,4)
| | | | | Exit: leq(0,4)
| | | | | Call: leq(6,6)
| | | | | Exit: leq(6,6)
| | | | | Call: leq(1,0)
| | | | | Fail: leq(1,0)
| | | | | Call: leq(5,0)
| | | | | Fail: leq(5,0)
| | | | | Call: evaluate(plus(0,0,0),V594)
| | | | | Exit: evaluate(plus(0,0,0),0)
| | | | | Call: leq(5,0)
| | | | | Fail: leq(5,0)
| | | | Fail: age_range_limit_covid(claim_a10,V592,0,6,no,moderna,0,0,0)
| | | | Redo: claim.previous_vaccines_other(claim_a10,V591)
| | | | Fail: claim.previous_vaccines_other(claim_a10,V591)
| | | | Redo: claim.previous_vaccines_moderna(claim_a10,V590)
| | | | Fail: claim.previous_vaccines_moderna(claim_a10,V590)
| | | | Redo: claim.previous_vaccines_pfizer(claim_a10,V589)
| | | | Fail: claim.previous_vaccines_pfizer(claim_a10,V589)
| | | | Redo: claim.vaccine_brand(claim_a10,V588)
| | | | Fail: claim.vaccine_brand(claim_a10,V588)
| | | | Redo: person.immunocompromised(person_a10,V587)
| | | | Fail: person.immunocompromised(person_a10,V587)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2023,V576)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_02_2023,V565)
| | | | Redo: claim.hosp_start_time(claim_a10,V563,V564)
| | | | Fail: claim.hosp_start_time(claim_a10,V563,V564)
| | | | Redo: person.dob(person_a10,V562)
| | | | Fail: person.dob(person_a10,V562)
| | | | Redo: claim.claimant(claim_a10,V561)
| | | | Fail: claim.claimant(claim_a10,V561)
| | | | Redo: claim.vaccine(claim_a10,covid)
| | | | Fail: claim.vaccine(claim_a10,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a10,V560)
| | | | Fail: claim.location(claim_a10,V560)
| | | | Call: claim.location(claim_a10,V595)
| | | | Exit: claim.location(claim_a10,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a10,flu)
| | | | Fail: claim.vaccine(claim_a10,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a10,V595)
| | | | Fail: claim.location(claim_a10,V595)
| | | Fail: eligible_service(claim_a10,policy1,preventive_care)
| | | Redo: claim.reason(claim_a10,V551)
| | | Fail: claim.reason(claim_a10,V551)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a10,V550)
| | | Fail: claim.hospital(claim_a10,V550)
| | | Call: claim.reason(claim_a10,emergency_room)
| | | Fail: claim.reason(claim_a10,emergency_room)
| | Fail: valid_hospitalization(claim_a10,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V546)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V542)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V538)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V534)
| | | Redo: policy.enddate(policy1,person_a10,V533)
| | | Fail: policy.enddate(policy1,person_a10,V533)
| | | Redo: policy.startdate(policy1,person_a10,V532)
| | | Fail: policy.startdate(policy1,person_a10,V532)
| | | Redo: claim.hosp_end_time(claim_a10,V530,V531)
| | | Fail: claim.hosp_end_time(claim_a10,V530,V531)
| | | Redo: claim.hosp_start_time(claim_a10,V528,V529)
| | | Fail: claim.hosp_start_time(claim_a10,V528,V529)
| | | Redo: claim.claimant(claim_a10,V527)
| | | Fail: claim.claimant(claim_a10,V527)
| | Fail: policy_active(claim_a10,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a10)
| | | Fail: policy.insuree(policy1,person_a10)
| | | Redo: claim.claimant(claim_a10,V526)
| | | Fail: claim.claimant(claim_a10,V526)
| | Fail: valid_insuree(claim_a10,policy1)
| Fail: covered_under_policy(claim_a10,policy1,cardinal)
| Redo: policy.type(policy1,V454)
| Fail: policy.type(policy1,V454)
| Redo: claim.policy(X,V453)
| Exit: claim.policy(claim_a11,policy1)
| Call: policy.type(policy1,V454)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a11,policy1,cardinal)
| | Call: valid_insuree(claim_a11,policy1)
| | | Call: claim.claimant(claim_a11,V596)
| | | Exit: claim.claimant(claim_a11,person_a11)
| | | Call: policy.insuree(policy1,person_a11)
| | | Exit: policy.insuree(policy1,person_a11)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a11,policy1)
| | | Call: claim.claimant(claim_a11,V597)
| | | Exit: claim.claimant(claim_a11,person_a11)
| | | Call: claim.hosp_start_time(claim_a11,V598,V599)
| | | Exit: claim.hosp_start_time(claim_a11,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a11,V600,V601)
| | | Exit: claim.hosp_end_time(claim_a11,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a11,V602)
| | | Exit: policy.startdate(policy1,person_a11,01_08_2023)
| | | Call: policy.enddate(policy1,person_a11,V603)
| | | Exit: policy.enddate(policy1,person_a11,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V604)
| | | | Call: evaluate(parsedate(03_09_2023),[V605,V606,V607])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V604)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V608)
| | | | Call: evaluate(parsedate(03_09_2023),[V609,V610,V611])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V608)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V612)
| | | | Call: evaluate(parsedate(30_06_2024),[V613,V614,V615])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V612)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V616)
| | | | Call: evaluate(parsedate(01_08_2023),[V617,V618,V619])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V616)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a11,policy1)
| | | Call: claim.hospital(claim_a11,V620)
| | | Exit: claim.hospital(claim_a11,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a11,V621)
| | | Exit: claim.reason(claim_a11,preventive_care)
| | | Call: eligible_service(claim_a11,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a11,preventive_care)
| | | | | Call: claim.claimant(claim_a11,V622)
| | | | | Exit: claim.claimant(claim_a11,person_a11)
| | | | | Call: person.dob(person_a11,V623)
| | | | | Exit: person.dob(person_a11,04_02_2011)
| | | | | Call: claim.time(claim_a11,V624,V625)
| | | | | Fail: claim.time(claim_a11,V624,V625)
| | | | | Redo: person.dob(person_a11,V623)
| | | | | Fail: person.dob(person_a11,V623)
| | | | | Redo: claim.claimant(claim_a11,V622)
| | | | | Fail: claim.claimant(claim_a11,V622)
| | | | Fail: check_policy_year_limit(claim_a11,preventive_care)
| | | | Call: covered_list_with_location(V626)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V626)
| | | | Fail: covered_list_with_location(V626)
| | | | Call: covered_list_with_service_provider(V627)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V627)
| | | | Fail: covered_list_with_service_provider(V627)
| | | | Call: covered_list(V628)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V628)
| | | | Fail: covered_list(V628)
| | | | Call: claim.location(claim_a11,V629)
| | | | Exit: claim.location(claim_a11,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a11,hep_b)
| | | | Fail: claim.vaccine(claim_a11,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a11,V629)
| | | | Fail: claim.location(claim_a11,V629)
| | | | Call: claim.location(claim_a11,V630)
| | | | Exit: claim.location(claim_a11,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a11,covid)
| | | | Exit: claim.vaccine(claim_a11,covid)
| | | | Call: claim.claimant(claim_a11,V631)
| | | | Exit: claim.claimant(claim_a11,person_a11)
| | | | Call: person.dob(person_a11,V632)
| | | | Exit: person.dob(person_a11,04_02_2011)
| | | | Call: claim.hosp_start_time(claim_a11,V633,V634)
| | | | Exit: claim.hosp_start_time(claim_a11,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_02_2011,V635)
| | | | | Call: evaluate(parsedate(03_09_2023),[V636,V637,V638])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2011),[V639,V640,V641])
| | | | | Exit: evaluate(parsedate(04_02_2011),[04,02,2011])
| | | | | Call: evaluate(minus(2023,2011),V642)
| | | | | Exit: evaluate(minus(2023,2011),12)
| | | | | Call: evaluate(minus(09,02),V643)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V644)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,7),-1),V645)
| | | | | Exit: evaluate(plus(imul(31,7),-1),216)
| | | | | Call: evaluate(plus(12,if(leq(216,-1),-1,true,0)),V635)
| | | | | Exit: evaluate(plus(12,if(leq(216,-1),-1,true,0)),12)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2011,V646)
| | | | | Call: evaluate(parsedate(03_09_2023),[V647,V648,V649])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2011),[V650,V651,V652])
| | | | | Exit: evaluate(parsedate(04_02_2011),[04,02,2011])
| | | | | Call: evaluate(minus(2023,2011),V653)
| | | | | Exit: evaluate(minus(2023,2011),12)
| | | | | Call: evaluate(minus(09,02),V654)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V655)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,12),7),V656)
| | | | | Exit: evaluate(plus(imul(12,12),7),151)
| | | | | Call: evaluate(if(leq(-1,-1),minus(151,1),true,151),V646)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(151,1),true,151),150)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: person.immunocompromised(person_a11,V657)
| | | | Exit: person.immunocompromised(person_a11,yes)
| | | | Call: claim.vaccine_brand(claim_a11,V658)
| | | | Exit: claim.vaccine_brand(claim_a11,moderna)
| | | | Call: claim.previous_vaccines_pfizer(claim_a11,V659)
| | | | Exit: claim.previous_vaccines_pfizer(claim_a11,0)
| | | | Call: claim.previous_vaccines_moderna(claim_a11,V660)
| | | | Exit: claim.previous_vaccines_moderna(claim_a11,0)
| | | | Call: claim.previous_vaccines_other(claim_a11,V661)
| | | | Exit: claim.previous_vaccines_other(claim_a11,1)
| | | | Call: age_range_limit_covid(claim_a11,V662,12,150,yes,moderna,0,0,1)
| | | | | Call: leq(6,150)
| | | | | Exit: leq(6,150)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(12,12)
| | | | | Exit: leq(12,12)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Call: claim.vaccine_dose_count(claim_a11,V663)
| | | | Exit: claim.vaccine_dose_count(claim_a11,1)
| | | | Call: leq(1,1)
| | | | Exit: leq(1,1)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a11,policy1)
Call: exception(claim_a11,policy1)
| Call: claim.claimant(claim_a11,V664)
| Exit: claim.claimant(claim_a11,person_a11)
| Call: person.occupation(person_a11,armed_forces)
| Fail: person.occupation(person_a11,armed_forces)
| Redo: claim.claimant(claim_a11,V664)
| Fail: claim.claimant(claim_a11,V664)
| Call: claim.reason(claim_a11,home_health_care)
| Fail: claim.reason(claim_a11,home_health_care)
| Call: claim.reason(claim_a11,home_health_care)
| Fail: claim.reason(claim_a11,home_health_care)
Fail: exception(claim_a11,policy1)
| | | Exit: ~exception(claim_a11,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a11)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count(claim_a11,V663)
| | | | Fail: claim.vaccine_dose_count(claim_a11,V663)
| | | | Redo: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Fail: age_range_limit_covid(claim_a11,V662,12,150,yes,moderna,0,0,1)
| | | | Redo: claim.previous_vaccines_other(claim_a11,V661)
| | | | Fail: claim.previous_vaccines_other(claim_a11,V661)
| | | | Redo: claim.previous_vaccines_moderna(claim_a11,V660)
| | | | Fail: claim.previous_vaccines_moderna(claim_a11,V660)
| | | | Redo: claim.previous_vaccines_pfizer(claim_a11,V659)
| | | | Fail: claim.previous_vaccines_pfizer(claim_a11,V659)
| | | | Redo: claim.vaccine_brand(claim_a11,V658)
| | | | Fail: claim.vaccine_brand(claim_a11,V658)
| | | | Redo: person.immunocompromised(person_a11,V657)
| | | | Fail: person.immunocompromised(person_a11,V657)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2011,V646)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_02_2011,V635)
| | | | Redo: claim.hosp_start_time(claim_a11,V633,V634)
| | | | Fail: claim.hosp_start_time(claim_a11,V633,V634)
| | | | Redo: person.dob(person_a11,V632)
| | | | Fail: person.dob(person_a11,V632)
| | | | Redo: claim.claimant(claim_a11,V631)
| | | | Fail: claim.claimant(claim_a11,V631)
| | | | Redo: claim.vaccine(claim_a11,covid)
| | | | Fail: claim.vaccine(claim_a11,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a11,V630)
| | | | Fail: claim.location(claim_a11,V630)
| | | | Call: claim.location(claim_a11,V665)
| | | | Exit: claim.location(claim_a11,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a11,flu)
| | | | Fail: claim.vaccine(claim_a11,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a11,V665)
| | | | Fail: claim.location(claim_a11,V665)
| | | Fail: eligible_service(claim_a11,policy1,preventive_care)
| | | Redo: claim.reason(claim_a11,V621)
| | | Fail: claim.reason(claim_a11,V621)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a11,V620)
| | | Fail: claim.hospital(claim_a11,V620)
| | | Call: claim.reason(claim_a11,emergency_room)
| | | Fail: claim.reason(claim_a11,emergency_room)
| | Fail: valid_hospitalization(claim_a11,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V616)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V612)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V608)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V604)
| | | Redo: policy.enddate(policy1,person_a11,V603)
| | | Fail: policy.enddate(policy1,person_a11,V603)
| | | Redo: policy.startdate(policy1,person_a11,V602)
| | | Fail: policy.startdate(policy1,person_a11,V602)
| | | Redo: claim.hosp_end_time(claim_a11,V600,V601)
| | | Fail: claim.hosp_end_time(claim_a11,V600,V601)
| | | Redo: claim.hosp_start_time(claim_a11,V598,V599)
| | | Fail: claim.hosp_start_time(claim_a11,V598,V599)
| | | Redo: claim.claimant(claim_a11,V597)
| | | Fail: claim.claimant(claim_a11,V597)
| | Fail: policy_active(claim_a11,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a11)
| | | Fail: policy.insuree(policy1,person_a11)
| | | Redo: claim.claimant(claim_a11,V596)
| | | Fail: claim.claimant(claim_a11,V596)
| | Fail: valid_insuree(claim_a11,policy1)
| Fail: covered_under_policy(claim_a11,policy1,cardinal)
| Redo: policy.type(policy1,V454)
| Fail: policy.type(policy1,V454)
| Redo: claim.policy(X,V453)
| Exit: claim.policy(claim_a12,policy1)
| Call: policy.type(policy1,V454)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a12,policy1,cardinal)
| | Call: valid_insuree(claim_a12,policy1)
| | | Call: claim.claimant(claim_a12,V666)
| | | Exit: claim.claimant(claim_a12,person_a12)
| | | Call: policy.insuree(policy1,person_a12)
| | | Exit: policy.insuree(policy1,person_a12)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a12,policy1)
| | | Call: claim.claimant(claim_a12,V667)
| | | Exit: claim.claimant(claim_a12,person_a12)
| | | Call: claim.hosp_start_time(claim_a12,V668,V669)
| | | Exit: claim.hosp_start_time(claim_a12,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a12,V670,V671)
| | | Exit: claim.hosp_end_time(claim_a12,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a12,V672)
| | | Exit: policy.startdate(policy1,person_a12,01_08_2023)
| | | Call: policy.enddate(policy1,person_a12,V673)
| | | Exit: policy.enddate(policy1,person_a12,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V674)
| | | | Call: evaluate(parsedate(03_09_2023),[V675,V676,V677])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V674)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V678)
| | | | Call: evaluate(parsedate(03_09_2023),[V679,V680,V681])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V678)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V682)
| | | | Call: evaluate(parsedate(30_06_2024),[V683,V684,V685])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V682)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V686)
| | | | Call: evaluate(parsedate(01_08_2023),[V687,V688,V689])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V686)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a12,policy1)
| | | Call: claim.hospital(claim_a12,V690)
| | | Exit: claim.hospital(claim_a12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a12,V691)
| | | Exit: claim.reason(claim_a12,preventive_care)
| | | Call: eligible_service(claim_a12,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a12,preventive_care)
| | | | | Call: claim.claimant(claim_a12,V692)
| | | | | Exit: claim.claimant(claim_a12,person_a12)
| | | | | Call: person.dob(person_a12,V693)
| | | | | Exit: person.dob(person_a12,04_02_2011)
| | | | | Call: claim.time(claim_a12,V694,V695)
| | | | | Fail: claim.time(claim_a12,V694,V695)
| | | | | Redo: person.dob(person_a12,V693)
| | | | | Fail: person.dob(person_a12,V693)
| | | | | Redo: claim.claimant(claim_a12,V692)
| | | | | Fail: claim.claimant(claim_a12,V692)
| | | | Fail: check_policy_year_limit(claim_a12,preventive_care)
| | | | Call: covered_list_with_location(V696)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V696)
| | | | Fail: covered_list_with_location(V696)
| | | | Call: covered_list_with_service_provider(V697)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V697)
| | | | Fail: covered_list_with_service_provider(V697)
| | | | Call: covered_list(V698)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V698)
| | | | Fail: covered_list(V698)
| | | | Call: claim.location(claim_a12,V699)
| | | | Exit: claim.location(claim_a12,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a12,hep_b)
| | | | Fail: claim.vaccine(claim_a12,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a12,V699)
| | | | Fail: claim.location(claim_a12,V699)
| | | | Call: claim.location(claim_a12,V700)
| | | | Exit: claim.location(claim_a12,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a12,covid)
| | | | Exit: claim.vaccine(claim_a12,covid)
| | | | Call: claim.claimant(claim_a12,V701)
| | | | Exit: claim.claimant(claim_a12,person_a12)
| | | | Call: person.dob(person_a12,V702)
| | | | Exit: person.dob(person_a12,04_02_2011)
| | | | Call: claim.hosp_start_time(claim_a12,V703,V704)
| | | | Exit: claim.hosp_start_time(claim_a12,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_02_2011,V705)
| | | | | Call: evaluate(parsedate(03_09_2023),[V706,V707,V708])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2011),[V709,V710,V711])
| | | | | Exit: evaluate(parsedate(04_02_2011),[04,02,2011])
| | | | | Call: evaluate(minus(2023,2011),V712)
| | | | | Exit: evaluate(minus(2023,2011),12)
| | | | | Call: evaluate(minus(09,02),V713)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V714)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,7),-1),V715)
| | | | | Exit: evaluate(plus(imul(31,7),-1),216)
| | | | | Call: evaluate(plus(12,if(leq(216,-1),-1,true,0)),V705)
| | | | | Exit: evaluate(plus(12,if(leq(216,-1),-1,true,0)),12)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2011,V716)
| | | | | Call: evaluate(parsedate(03_09_2023),[V717,V718,V719])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2011),[V720,V721,V722])
| | | | | Exit: evaluate(parsedate(04_02_2011),[04,02,2011])
| | | | | Call: evaluate(minus(2023,2011),V723)
| | | | | Exit: evaluate(minus(2023,2011),12)
| | | | | Call: evaluate(minus(09,02),V724)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V725)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,12),7),V726)
| | | | | Exit: evaluate(plus(imul(12,12),7),151)
| | | | | Call: evaluate(if(leq(-1,-1),minus(151,1),true,151),V716)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(151,1),true,151),150)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: person.immunocompromised(person_a12,V727)
| | | | Exit: person.immunocompromised(person_a12,yes)
| | | | Call: claim.vaccine_brand(claim_a12,V728)
| | | | Exit: claim.vaccine_brand(claim_a12,moderna)
| | | | Call: claim.previous_vaccines_pfizer(claim_a12,V729)
| | | | Exit: claim.previous_vaccines_pfizer(claim_a12,0)
| | | | Call: claim.previous_vaccines_moderna(claim_a12,V730)
| | | | Exit: claim.previous_vaccines_moderna(claim_a12,0)
| | | | Call: claim.previous_vaccines_other(claim_a12,V731)
| | | | Exit: claim.previous_vaccines_other(claim_a12,1)
| | | | Call: age_range_limit_covid(claim_a12,V732,12,150,yes,moderna,0,0,1)
| | | | | Call: leq(6,150)
| | | | | Exit: leq(6,150)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(12,12)
| | | | | Exit: leq(12,12)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Call: claim.vaccine_dose_count(claim_a12,V733)
| | | | Exit: claim.vaccine_dose_count(claim_a12,2)
| | | | Call: leq(2,1)
| | | | Fail: leq(2,1)
| | | | Redo: claim.vaccine_dose_count(claim_a12,V733)
| | | | Fail: claim.vaccine_dose_count(claim_a12,V733)
| | | | Redo: age_range_limit_covid(C,N,Y,M,Immuno_Status,Type,Count_P,Count_M,Count_O)
| | | | Fail: age_range_limit_covid(claim_a12,V732,12,150,yes,moderna,0,0,1)
| | | | Redo: claim.previous_vaccines_other(claim_a12,V731)
| | | | Fail: claim.previous_vaccines_other(claim_a12,V731)
| | | | Redo: claim.previous_vaccines_moderna(claim_a12,V730)
| | | | Fail: claim.previous_vaccines_moderna(claim_a12,V730)
| | | | Redo: claim.previous_vaccines_pfizer(claim_a12,V729)
| | | | Fail: claim.previous_vaccines_pfizer(claim_a12,V729)
| | | | Redo: claim.vaccine_brand(claim_a12,V728)
| | | | Fail: claim.vaccine_brand(claim_a12,V728)
| | | | Redo: person.immunocompromised(person_a12,V727)
| | | | Fail: person.immunocompromised(person_a12,V727)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2011,V716)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_02_2011,V705)
| | | | Redo: claim.hosp_start_time(claim_a12,V703,V704)
| | | | Fail: claim.hosp_start_time(claim_a12,V703,V704)
| | | | Redo: person.dob(person_a12,V702)
| | | | Fail: person.dob(person_a12,V702)
| | | | Redo: claim.claimant(claim_a12,V701)
| | | | Fail: claim.claimant(claim_a12,V701)
| | | | Redo: claim.vaccine(claim_a12,covid)
| | | | Fail: claim.vaccine(claim_a12,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a12,V700)
| | | | Fail: claim.location(claim_a12,V700)
| | | | Call: claim.location(claim_a12,V734)
| | | | Exit: claim.location(claim_a12,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a12,flu)
| | | | Fail: claim.vaccine(claim_a12,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a12,V734)
| | | | Fail: claim.location(claim_a12,V734)
| | | Fail: eligible_service(claim_a12,policy1,preventive_care)
| | | Redo: claim.reason(claim_a12,V691)
| | | Fail: claim.reason(claim_a12,V691)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a12,V690)
| | | Fail: claim.hospital(claim_a12,V690)
| | | Call: claim.reason(claim_a12,emergency_room)
| | | Fail: claim.reason(claim_a12,emergency_room)
| | Fail: valid_hospitalization(claim_a12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V686)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V682)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V678)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V674)
| | | Redo: policy.enddate(policy1,person_a12,V673)
| | | Fail: policy.enddate(policy1,person_a12,V673)
| | | Redo: policy.startdate(policy1,person_a12,V672)
| | | Fail: policy.startdate(policy1,person_a12,V672)
| | | Redo: claim.hosp_end_time(claim_a12,V670,V671)
| | | Fail: claim.hosp_end_time(claim_a12,V670,V671)
| | | Redo: claim.hosp_start_time(claim_a12,V668,V669)
| | | Fail: claim.hosp_start_time(claim_a12,V668,V669)
| | | Redo: claim.claimant(claim_a12,V667)
| | | Fail: claim.claimant(claim_a12,V667)
| | Fail: policy_active(claim_a12,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a12)
| | | Fail: policy.insuree(policy1,person_a12)
| | | Redo: claim.claimant(claim_a12,V666)
| | | Fail: claim.claimant(claim_a12,V666)
| | Fail: valid_insuree(claim_a12,policy1)
| Fail: covered_under_policy(claim_a12,policy1,cardinal)
| Redo: policy.type(policy1,V454)
| Fail: policy.type(policy1,V454)
| Redo: claim.policy(X,V453)
| Exit: claim.policy(claim_a13,policy1)
| Call: policy.type(policy1,V454)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a13,policy1,cardinal)
| | Call: valid_insuree(claim_a13,policy1)
| | | Call: claim.claimant(claim_a13,V735)
| | | Exit: claim.claimant(claim_a13,person_a13)
| | | Call: policy.insuree(policy1,person_a13)
| | | Exit: policy.insuree(policy1,person_a13)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a13,policy1)
| | | Call: claim.claimant(claim_a13,V736)
| | | Exit: claim.claimant(claim_a13,person_a13)
| | | Call: claim.hosp_start_time(claim_a13,V737,V738)
| | | Exit: claim.hosp_start_time(claim_a13,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a13,V739,V740)
| | | Exit: claim.hosp_end_time(claim_a13,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a13,V741)
| | | Exit: policy.startdate(policy1,person_a13,01_08_2023)
| | | Call: policy.enddate(policy1,person_a13,V742)
| | | Exit: policy.enddate(policy1,person_a13,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V743)
| | | | Call: evaluate(parsedate(03_09_2023),[V744,V745,V746])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V743)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V747)
| | | | Call: evaluate(parsedate(03_09_2023),[V748,V749,V750])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V747)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V751)
| | | | Call: evaluate(parsedate(30_06_2024),[V752,V753,V754])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V751)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V755)
| | | | Call: evaluate(parsedate(01_08_2023),[V756,V757,V758])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V755)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a13,policy1)
| | | Call: claim.hospital(claim_a13,V759)
| | | Exit: claim.hospital(claim_a13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a13,V760)
| | | Exit: claim.reason(claim_a13,preventive_care)
| | | Call: eligible_service(claim_a13,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a13,preventive_care)
| | | | | Call: claim.claimant(claim_a13,V761)
| | | | | Exit: claim.claimant(claim_a13,person_a13)
| | | | | Call: person.dob(person_a13,V762)
| | | | | Exit: person.dob(person_a13,04_02_2012)
| | | | | Call: claim.time(claim_a13,V763,V764)
| | | | | Fail: claim.time(claim_a13,V763,V764)
| | | | | Redo: person.dob(person_a13,V762)
| | | | | Fail: person.dob(person_a13,V762)
| | | | | Redo: claim.claimant(claim_a13,V761)
| | | | | Fail: claim.claimant(claim_a13,V761)
| | | | Fail: check_policy_year_limit(claim_a13,preventive_care)
| | | | Call: covered_list_with_location(V765)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V765)
| | | | Fail: covered_list_with_location(V765)
| | | | Call: covered_list_with_service_provider(V766)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V766)
| | | | Fail: covered_list_with_service_provider(V766)
| | | | Call: covered_list(V767)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V767)
| | | | Fail: covered_list(V767)
| | | | Call: claim.location(claim_a13,V768)
| | | | Exit: claim.location(claim_a13,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a13,hep_b)
| | | | Fail: claim.vaccine(claim_a13,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a13,V768)
| | | | Fail: claim.location(claim_a13,V768)
| | | | Call: claim.location(claim_a13,V769)
| | | | Exit: claim.location(claim_a13,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a13,covid)
| | | | Exit: claim.vaccine(claim_a13,covid)
| | | | Call: claim.claimant(claim_a13,V770)
| | | | Exit: claim.claimant(claim_a13,person_a13)
| | | | Call: person.dob(person_a13,V771)
| | | | Exit: person.dob(person_a13,04_02_2012)
| | | | Call: claim.hosp_start_time(claim_a13,V772,V773)
| | | | Exit: claim.hosp_start_time(claim_a13,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_02_2012,V774)
| | | | | Call: evaluate(parsedate(03_09_2023),[V775,V776,V777])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2012),[V778,V779,V780])
| | | | | Exit: evaluate(parsedate(04_02_2012),[04,02,2012])
| | | | | Call: evaluate(minus(2023,2012),V781)
| | | | | Exit: evaluate(minus(2023,2012),11)
| | | | | Call: evaluate(minus(09,02),V782)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V783)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,7),-1),V784)
| | | | | Exit: evaluate(plus(imul(31,7),-1),216)
| | | | | Call: evaluate(plus(11,if(leq(216,-1),-1,true,0)),V774)
| | | | | Exit: evaluate(plus(11,if(leq(216,-1),-1,true,0)),11)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2012,V785)
| | | | | Call: evaluate(parsedate(03_09_2023),[V786,V787,V788])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2012),[V789,V790,V791])
| | | | | Exit: evaluate(parsedate(04_02_2012),[04,02,2012])
| | | | | Call: evaluate(minus(2023,2012),V792)
| | | | | Exit: evaluate(minus(2023,2012),11)
| | | | | Call: evaluate(minus(09,02),V793)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V794)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,11),7),V795)
| | | | | Exit: evaluate(plus(imul(12,11),7),139)
| | | | | Call: evaluate(if(leq(-1,-1),minus(139,1),true,139),V785)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(139,1),true,139),138)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: person.immunocompromised(person_a13,V796)
| | | | Exit: person.immunocompromised(person_a13,yes)
| | | | Call: claim.vaccine_brand(claim_a13,V797)
| | | | Exit: claim.vaccine_brand(claim_a13,moderna)
| | | | Call: claim.previous_vaccines_pfizer(claim_a13,V798)
| | | | Exit: claim.previous_vaccines_pfizer(claim_a13,0)
| | | | Call: claim.previous_vaccines_moderna(claim_a13,V799)
| | | | Exit: claim.previous_vaccines_moderna(claim_a13,0)
| | | | Call: claim.previous_vaccines_other(claim_a13,V800)
| | | | Exit: claim.previous_vaccines_other(claim_a13,1)
| | | | Call: age_range_limit_covid(claim_a13,V801,11,138,yes,moderna,0,0,1)
| | | | | Call: leq(6,138)
| | | | | Exit: leq(6,138)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(12,11)
| | | | | Fail: leq(12,11)
| | | | Fail: age_range_limit_covid(claim_a13,V801,11,138,yes,moderna,0,0,1)
| | | | Redo: claim.previous_vaccines_other(claim_a13,V800)
| | | | Fail: claim.previous_vaccines_other(claim_a13,V800)
| | | | Redo: claim.previous_vaccines_moderna(claim_a13,V799)
| | | | Fail: claim.previous_vaccines_moderna(claim_a13,V799)
| | | | Redo: claim.previous_vaccines_pfizer(claim_a13,V798)
| | | | Fail: claim.previous_vaccines_pfizer(claim_a13,V798)
| | | | Redo: claim.vaccine_brand(claim_a13,V797)
| | | | Fail: claim.vaccine_brand(claim_a13,V797)
| | | | Redo: person.immunocompromised(person_a13,V796)
| | | | Fail: person.immunocompromised(person_a13,V796)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2012,V785)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_02_2012,V774)
| | | | Redo: claim.hosp_start_time(claim_a13,V772,V773)
| | | | Fail: claim.hosp_start_time(claim_a13,V772,V773)
| | | | Redo: person.dob(person_a13,V771)
| | | | Fail: person.dob(person_a13,V771)
| | | | Redo: claim.claimant(claim_a13,V770)
| | | | Fail: claim.claimant(claim_a13,V770)
| | | | Redo: claim.vaccine(claim_a13,covid)
| | | | Fail: claim.vaccine(claim_a13,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a13,V769)
| | | | Fail: claim.location(claim_a13,V769)
| | | | Call: claim.location(claim_a13,V802)
| | | | Exit: claim.location(claim_a13,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a13,flu)
| | | | Fail: claim.vaccine(claim_a13,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a13,V802)
| | | | Fail: claim.location(claim_a13,V802)
| | | Fail: eligible_service(claim_a13,policy1,preventive_care)
| | | Redo: claim.reason(claim_a13,V760)
| | | Fail: claim.reason(claim_a13,V760)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a13,V759)
| | | Fail: claim.hospital(claim_a13,V759)
| | | Call: claim.reason(claim_a13,emergency_room)
| | | Fail: claim.reason(claim_a13,emergency_room)
| | Fail: valid_hospitalization(claim_a13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V755)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V751)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V747)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V743)
| | | Redo: policy.enddate(policy1,person_a13,V742)
| | | Fail: policy.enddate(policy1,person_a13,V742)
| | | Redo: policy.startdate(policy1,person_a13,V741)
| | | Fail: policy.startdate(policy1,person_a13,V741)
| | | Redo: claim.hosp_end_time(claim_a13,V739,V740)
| | | Fail: claim.hosp_end_time(claim_a13,V739,V740)
| | | Redo: claim.hosp_start_time(claim_a13,V737,V738)
| | | Fail: claim.hosp_start_time(claim_a13,V737,V738)
| | | Redo: claim.claimant(claim_a13,V736)
| | | Fail: claim.claimant(claim_a13,V736)
| | Fail: policy_active(claim_a13,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a13)
| | | Fail: policy.insuree(policy1,person_a13)
| | | Redo: claim.claimant(claim_a13,V735)
| | | Fail: claim.claimant(claim_a13,V735)
| | Fail: valid_insuree(claim_a13,policy1)
| Fail: covered_under_policy(claim_a13,policy1,cardinal)
| Redo: policy.type(policy1,V454)
| Fail: policy.type(policy1,V454)
| Redo: claim.policy(X,V453)
| Fail: claim.policy(X,V453)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_covid.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim_a9', 'claim_a11' ]
RESULTS: [ 'claim_a9', 'claim_a11' ]
===== TEST SUCCEEDED: Test test_cases_covid.hdf===== 
Expected Result:  [ 'claim_a14', 'claim_a17' ]
Call: covered(X)
| Call: claim.policy(X,V803)
| Exit: claim.policy(claim_a14,policy1)
| Call: policy.type(policy1,V804)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a14,policy1,cardinal)
| | Call: valid_insuree(claim_a14,policy1)
| | | Call: claim.claimant(claim_a14,V805)
| | | Exit: claim.claimant(claim_a14,person_a14)
| | | Call: policy.insuree(policy1,person_a14)
| | | Exit: policy.insuree(policy1,person_a14)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a14,policy1)
| | | Call: claim.claimant(claim_a14,V806)
| | | Exit: claim.claimant(claim_a14,person_a14)
| | | Call: claim.hosp_start_time(claim_a14,V807,V808)
| | | Exit: claim.hosp_start_time(claim_a14,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a14,V809,V810)
| | | Exit: claim.hosp_end_time(claim_a14,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a14,V811)
| | | Exit: policy.startdate(policy1,person_a14,01_08_2023)
| | | Call: policy.enddate(policy1,person_a14,V812)
| | | Exit: policy.enddate(policy1,person_a14,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V813)
| | | | Call: evaluate(parsedate(03_09_2023),[V814,V815,V816])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V813)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V817)
| | | | Call: evaluate(parsedate(03_09_2023),[V818,V819,V820])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V817)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V821)
| | | | Call: evaluate(parsedate(30_06_2024),[V822,V823,V824])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V821)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V825)
| | | | Call: evaluate(parsedate(01_08_2023),[V826,V827,V828])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V825)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a14,policy1)
| | | Call: claim.hospital(claim_a14,V829)
| | | Exit: claim.hospital(claim_a14,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a14,V830)
| | | Exit: claim.reason(claim_a14,preventive_care)
| | | Call: eligible_service(claim_a14,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a14,preventive_care)
| | | | | Call: claim.claimant(claim_a14,V831)
| | | | | Exit: claim.claimant(claim_a14,person_a14)
| | | | | Call: person.dob(person_a14,V832)
| | | | | Exit: person.dob(person_a14,04_02_2023)
| | | | | Call: claim.time(claim_a14,V833,V834)
| | | | | Fail: claim.time(claim_a14,V833,V834)
| | | | | Redo: person.dob(person_a14,V832)
| | | | | Fail: person.dob(person_a14,V832)
| | | | | Redo: claim.claimant(claim_a14,V831)
| | | | | Fail: claim.claimant(claim_a14,V831)
| | | | Fail: check_policy_year_limit(claim_a14,preventive_care)
| | | | Call: covered_list_with_location(V835)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V835)
| | | | Fail: covered_list_with_location(V835)
| | | | Call: covered_list_with_service_provider(V836)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V836)
| | | | Fail: covered_list_with_service_provider(V836)
| | | | Call: covered_list(V837)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V837)
| | | | Fail: covered_list(V837)
| | | | Call: claim.location(claim_a14,V838)
| | | | Exit: claim.location(claim_a14,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a14,hep_b)
| | | | Fail: claim.vaccine(claim_a14,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a14,V838)
| | | | Fail: claim.location(claim_a14,V838)
| | | | Call: claim.location(claim_a14,V839)
| | | | Exit: claim.location(claim_a14,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a14,covid)
| | | | Fail: claim.vaccine(claim_a14,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a14,V839)
| | | | Fail: claim.location(claim_a14,V839)
| | | | Call: claim.location(claim_a14,V840)
| | | | Exit: claim.location(claim_a14,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a14,flu)
| | | | Exit: claim.vaccine(claim_a14,flu)
| | | | Call: claim.claimant(claim_a14,V841)
| | | | Exit: claim.claimant(claim_a14,person_a14)
| | | | Call: person.dob(person_a14,V842)
| | | | Exit: person.dob(person_a14,04_02_2023)
| | | | Call: claim.hosp_start_time(claim_a14,V843,V844)
| | | | Exit: claim.hosp_start_time(claim_a14,03_09_2023,00_00)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2023,V845)
| | | | | Call: evaluate(parsedate(03_09_2023),[V846,V847,V848])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V849,V850,V851])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V852)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V853)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V854)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),7),V855)
| | | | | Exit: evaluate(plus(imul(12,0),7),7)
| | | | | Call: evaluate(if(leq(-1,-1),minus(7,1),true,7),V845)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(7,1),true,7),6)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: claim.previous_vaccines_flu_more_than_equal_2(claim_a14,V856)
| | | | Exit: claim.previous_vaccines_flu_more_than_equal_2(claim_a14,no)
| | | | Call: age_range_limit_flu(claim_a14,V857,V858,V859,no)
| | | | Exit: age_range_limit_flu(C,1,0,20000,PC)
| | | | Call: leq(0,6)
| | | | Exit: leq(0,6)
| | | | Call: leq(6,20000)
| | | | Exit: leq(6,20000)
| | | | Call: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Exit: claim.vaccine_dose_count_annual(claim_a14,2)
| | | | Call: leq(2,1)
| | | | Fail: leq(2,1)
| | | | Redo: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Fail: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Redo: age_range_limit_flu(claim_a14,V857,V858,V859,no)
| | | | Exit: age_range_limit_flu(C,2,6,96,no)
| | | | Call: leq(6,6)
| | | | Exit: leq(6,6)
| | | | Call: leq(6,96)
| | | | Exit: leq(6,96)
| | | | Call: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Exit: claim.vaccine_dose_count_annual(claim_a14,2)
| | | | Call: leq(2,2)
| | | | Exit: leq(2,2)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a14,policy1)
Call: exception(claim_a14,policy1)
| Call: claim.claimant(claim_a14,V861)
| Exit: claim.claimant(claim_a14,person_a14)
| Call: person.occupation(person_a14,armed_forces)
| Fail: person.occupation(person_a14,armed_forces)
| Redo: claim.claimant(claim_a14,V861)
| Fail: claim.claimant(claim_a14,V861)
| Call: claim.reason(claim_a14,home_health_care)
| Fail: claim.reason(claim_a14,home_health_care)
| Call: claim.reason(claim_a14,home_health_care)
| Fail: claim.reason(claim_a14,home_health_care)
Fail: exception(claim_a14,policy1)
| | | Exit: ~exception(claim_a14,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a14)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Fail: claim.vaccine_dose_count_annual(claim_a14,V860)
| | | | Redo: age_range_limit_flu(claim_a14,V857,V858,V859,no)
| | | | Fail: age_range_limit_flu(claim_a14,V857,V858,V859,no)
| | | | Redo: claim.previous_vaccines_flu_more_than_equal_2(claim_a14,V856)
| | | | Fail: claim.previous_vaccines_flu_more_than_equal_2(claim_a14,V856)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2023,V845)
| | | | Redo: claim.hosp_start_time(claim_a14,V843,V844)
| | | | Fail: claim.hosp_start_time(claim_a14,V843,V844)
| | | | Redo: person.dob(person_a14,V842)
| | | | Fail: person.dob(person_a14,V842)
| | | | Redo: claim.claimant(claim_a14,V841)
| | | | Fail: claim.claimant(claim_a14,V841)
| | | | Redo: claim.vaccine(claim_a14,flu)
| | | | Fail: claim.vaccine(claim_a14,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a14,V840)
| | | | Fail: claim.location(claim_a14,V840)
| | | Fail: eligible_service(claim_a14,policy1,preventive_care)
| | | Redo: claim.reason(claim_a14,V830)
| | | Fail: claim.reason(claim_a14,V830)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a14,V829)
| | | Fail: claim.hospital(claim_a14,V829)
| | | Call: claim.reason(claim_a14,emergency_room)
| | | Fail: claim.reason(claim_a14,emergency_room)
| | Fail: valid_hospitalization(claim_a14,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V825)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V821)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V817)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V813)
| | | Redo: policy.enddate(policy1,person_a14,V812)
| | | Fail: policy.enddate(policy1,person_a14,V812)
| | | Redo: policy.startdate(policy1,person_a14,V811)
| | | Fail: policy.startdate(policy1,person_a14,V811)
| | | Redo: claim.hosp_end_time(claim_a14,V809,V810)
| | | Fail: claim.hosp_end_time(claim_a14,V809,V810)
| | | Redo: claim.hosp_start_time(claim_a14,V807,V808)
| | | Fail: claim.hosp_start_time(claim_a14,V807,V808)
| | | Redo: claim.claimant(claim_a14,V806)
| | | Fail: claim.claimant(claim_a14,V806)
| | Fail: policy_active(claim_a14,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a14)
| | | Fail: policy.insuree(policy1,person_a14)
| | | Redo: claim.claimant(claim_a14,V805)
| | | Fail: claim.claimant(claim_a14,V805)
| | Fail: valid_insuree(claim_a14,policy1)
| Fail: covered_under_policy(claim_a14,policy1,cardinal)
| Redo: policy.type(policy1,V804)
| Fail: policy.type(policy1,V804)
| Redo: claim.policy(X,V803)
| Exit: claim.policy(claim_a15,policy1)
| Call: policy.type(policy1,V804)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a15,policy1,cardinal)
| | Call: valid_insuree(claim_a15,policy1)
| | | Call: claim.claimant(claim_a15,V862)
| | | Exit: claim.claimant(claim_a15,person_a15)
| | | Call: policy.insuree(policy1,person_a15)
| | | Exit: policy.insuree(policy1,person_a15)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a15,policy1)
| | | Call: claim.claimant(claim_a15,V863)
| | | Exit: claim.claimant(claim_a15,person_a15)
| | | Call: claim.hosp_start_time(claim_a15,V864,V865)
| | | Exit: claim.hosp_start_time(claim_a15,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a15,V866,V867)
| | | Exit: claim.hosp_end_time(claim_a15,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a15,V868)
| | | Exit: policy.startdate(policy1,person_a15,01_08_2023)
| | | Call: policy.enddate(policy1,person_a15,V869)
| | | Exit: policy.enddate(policy1,person_a15,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V870)
| | | | Call: evaluate(parsedate(03_09_2023),[V871,V872,V873])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V870)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V874)
| | | | Call: evaluate(parsedate(03_09_2023),[V875,V876,V877])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V874)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V878)
| | | | Call: evaluate(parsedate(30_06_2024),[V879,V880,V881])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V878)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V882)
| | | | Call: evaluate(parsedate(01_08_2023),[V883,V884,V885])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V882)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a15,policy1)
| | | Call: claim.hospital(claim_a15,V886)
| | | Exit: claim.hospital(claim_a15,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a15,V887)
| | | Exit: claim.reason(claim_a15,preventive_care)
| | | Call: eligible_service(claim_a15,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a15,preventive_care)
| | | | | Call: claim.claimant(claim_a15,V888)
| | | | | Exit: claim.claimant(claim_a15,person_a15)
| | | | | Call: person.dob(person_a15,V889)
| | | | | Exit: person.dob(person_a15,04_02_2023)
| | | | | Call: claim.time(claim_a15,V890,V891)
| | | | | Fail: claim.time(claim_a15,V890,V891)
| | | | | Redo: person.dob(person_a15,V889)
| | | | | Fail: person.dob(person_a15,V889)
| | | | | Redo: claim.claimant(claim_a15,V888)
| | | | | Fail: claim.claimant(claim_a15,V888)
| | | | Fail: check_policy_year_limit(claim_a15,preventive_care)
| | | | Call: covered_list_with_location(V892)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V892)
| | | | Fail: covered_list_with_location(V892)
| | | | Call: covered_list_with_service_provider(V893)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V893)
| | | | Fail: covered_list_with_service_provider(V893)
| | | | Call: covered_list(V894)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V894)
| | | | Fail: covered_list(V894)
| | | | Call: claim.location(claim_a15,V895)
| | | | Exit: claim.location(claim_a15,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a15,hep_b)
| | | | Fail: claim.vaccine(claim_a15,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a15,V895)
| | | | Fail: claim.location(claim_a15,V895)
| | | | Call: claim.location(claim_a15,V896)
| | | | Exit: claim.location(claim_a15,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a15,covid)
| | | | Fail: claim.vaccine(claim_a15,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a15,V896)
| | | | Fail: claim.location(claim_a15,V896)
| | | | Call: claim.location(claim_a15,V897)
| | | | Exit: claim.location(claim_a15,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a15,flu)
| | | | Exit: claim.vaccine(claim_a15,flu)
| | | | Call: claim.claimant(claim_a15,V898)
| | | | Exit: claim.claimant(claim_a15,person_a15)
| | | | Call: person.dob(person_a15,V899)
| | | | Exit: person.dob(person_a15,04_02_2023)
| | | | Call: claim.hosp_start_time(claim_a15,V900,V901)
| | | | Exit: claim.hosp_start_time(claim_a15,03_09_2023,00_00)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2023,V902)
| | | | | Call: evaluate(parsedate(03_09_2023),[V903,V904,V905])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V906,V907,V908])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V909)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V910)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V911)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),7),V912)
| | | | | Exit: evaluate(plus(imul(12,0),7),7)
| | | | | Call: evaluate(if(leq(-1,-1),minus(7,1),true,7),V902)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(7,1),true,7),6)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: claim.previous_vaccines_flu_more_than_equal_2(claim_a15,V913)
| | | | Exit: claim.previous_vaccines_flu_more_than_equal_2(claim_a15,yes)
| | | | Call: age_range_limit_flu(claim_a15,V914,V915,V916,yes)
| | | | Exit: age_range_limit_flu(C,1,0,20000,PC)
| | | | Call: leq(0,6)
| | | | Exit: leq(0,6)
| | | | Call: leq(6,20000)
| | | | Exit: leq(6,20000)
| | | | Call: claim.vaccine_dose_count_annual(claim_a15,V917)
| | | | Exit: claim.vaccine_dose_count_annual(claim_a15,2)
| | | | Call: leq(2,1)
| | | | Fail: leq(2,1)
| | | | Redo: claim.vaccine_dose_count_annual(claim_a15,V917)
| | | | Fail: claim.vaccine_dose_count_annual(claim_a15,V917)
| | | | Redo: age_range_limit_flu(claim_a15,V914,V915,V916,yes)
| | | | Fail: age_range_limit_flu(claim_a15,V914,V915,V916,yes)
| | | | Redo: claim.previous_vaccines_flu_more_than_equal_2(claim_a15,V913)
| | | | Fail: claim.previous_vaccines_flu_more_than_equal_2(claim_a15,V913)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2023,V902)
| | | | Redo: claim.hosp_start_time(claim_a15,V900,V901)
| | | | Fail: claim.hosp_start_time(claim_a15,V900,V901)
| | | | Redo: person.dob(person_a15,V899)
| | | | Fail: person.dob(person_a15,V899)
| | | | Redo: claim.claimant(claim_a15,V898)
| | | | Fail: claim.claimant(claim_a15,V898)
| | | | Redo: claim.vaccine(claim_a15,flu)
| | | | Fail: claim.vaccine(claim_a15,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a15,V897)
| | | | Fail: claim.location(claim_a15,V897)
| | | Fail: eligible_service(claim_a15,policy1,preventive_care)
| | | Redo: claim.reason(claim_a15,V887)
| | | Fail: claim.reason(claim_a15,V887)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a15,V886)
| | | Fail: claim.hospital(claim_a15,V886)
| | | Call: claim.reason(claim_a15,emergency_room)
| | | Fail: claim.reason(claim_a15,emergency_room)
| | Fail: valid_hospitalization(claim_a15,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V882)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V878)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V874)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V870)
| | | Redo: policy.enddate(policy1,person_a15,V869)
| | | Fail: policy.enddate(policy1,person_a15,V869)
| | | Redo: policy.startdate(policy1,person_a15,V868)
| | | Fail: policy.startdate(policy1,person_a15,V868)
| | | Redo: claim.hosp_end_time(claim_a15,V866,V867)
| | | Fail: claim.hosp_end_time(claim_a15,V866,V867)
| | | Redo: claim.hosp_start_time(claim_a15,V864,V865)
| | | Fail: claim.hosp_start_time(claim_a15,V864,V865)
| | | Redo: claim.claimant(claim_a15,V863)
| | | Fail: claim.claimant(claim_a15,V863)
| | Fail: policy_active(claim_a15,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a15)
| | | Fail: policy.insuree(policy1,person_a15)
| | | Redo: claim.claimant(claim_a15,V862)
| | | Fail: claim.claimant(claim_a15,V862)
| | Fail: valid_insuree(claim_a15,policy1)
| Fail: covered_under_policy(claim_a15,policy1,cardinal)
| Redo: policy.type(policy1,V804)
| Fail: policy.type(policy1,V804)
| Redo: claim.policy(X,V803)
| Exit: claim.policy(claim_a16,policy1)
| Call: policy.type(policy1,V804)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a16,policy1,cardinal)
| | Call: valid_insuree(claim_a16,policy1)
| | | Call: claim.claimant(claim_a16,V918)
| | | Exit: claim.claimant(claim_a16,person_a16)
| | | Call: policy.insuree(policy1,person_a16)
| | | Exit: policy.insuree(policy1,person_a16)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a16,policy1)
| | | Call: claim.claimant(claim_a16,V919)
| | | Exit: claim.claimant(claim_a16,person_a16)
| | | Call: claim.hosp_start_time(claim_a16,V920,V921)
| | | Exit: claim.hosp_start_time(claim_a16,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a16,V922,V923)
| | | Exit: claim.hosp_end_time(claim_a16,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a16,V924)
| | | Exit: policy.startdate(policy1,person_a16,01_08_2023)
| | | Call: policy.enddate(policy1,person_a16,V925)
| | | Exit: policy.enddate(policy1,person_a16,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V926)
| | | | Call: evaluate(parsedate(03_09_2023),[V927,V928,V929])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V926)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V930)
| | | | Call: evaluate(parsedate(03_09_2023),[V931,V932,V933])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V930)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V934)
| | | | Call: evaluate(parsedate(30_06_2024),[V935,V936,V937])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V934)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V938)
| | | | Call: evaluate(parsedate(01_08_2023),[V939,V940,V941])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V938)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a16,policy1)
| | | Call: claim.hospital(claim_a16,V942)
| | | Exit: claim.hospital(claim_a16,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a16,V943)
| | | Exit: claim.reason(claim_a16,preventive_care)
| | | Call: eligible_service(claim_a16,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a16,preventive_care)
| | | | | Call: claim.claimant(claim_a16,V944)
| | | | | Exit: claim.claimant(claim_a16,person_a16)
| | | | | Call: person.dob(person_a16,V945)
| | | | | Exit: person.dob(person_a16,04_02_2001)
| | | | | Call: claim.time(claim_a16,V946,V947)
| | | | | Fail: claim.time(claim_a16,V946,V947)
| | | | | Redo: person.dob(person_a16,V945)
| | | | | Fail: person.dob(person_a16,V945)
| | | | | Redo: claim.claimant(claim_a16,V944)
| | | | | Fail: claim.claimant(claim_a16,V944)
| | | | Fail: check_policy_year_limit(claim_a16,preventive_care)
| | | | Call: covered_list_with_location(V948)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V948)
| | | | Fail: covered_list_with_location(V948)
| | | | Call: covered_list_with_service_provider(V949)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V949)
| | | | Fail: covered_list_with_service_provider(V949)
| | | | Call: covered_list(V950)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V950)
| | | | Fail: covered_list(V950)
| | | | Call: claim.location(claim_a16,V951)
| | | | Exit: claim.location(claim_a16,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a16,hep_b)
| | | | Fail: claim.vaccine(claim_a16,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a16,V951)
| | | | Fail: claim.location(claim_a16,V951)
| | | | Call: claim.location(claim_a16,V952)
| | | | Exit: claim.location(claim_a16,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a16,covid)
| | | | Fail: claim.vaccine(claim_a16,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a16,V952)
| | | | Fail: claim.location(claim_a16,V952)
| | | | Call: claim.location(claim_a16,V953)
| | | | Exit: claim.location(claim_a16,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a16,flu)
| | | | Exit: claim.vaccine(claim_a16,flu)
| | | | Call: claim.claimant(claim_a16,V954)
| | | | Exit: claim.claimant(claim_a16,person_a16)
| | | | Call: person.dob(person_a16,V955)
| | | | Exit: person.dob(person_a16,04_02_2001)
| | | | Call: claim.hosp_start_time(claim_a16,V956,V957)
| | | | Exit: claim.hosp_start_time(claim_a16,03_09_2023,00_00)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2001,V958)
| | | | | Call: evaluate(parsedate(03_09_2023),[V959,V960,V961])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2001),[V962,V963,V964])
| | | | | Exit: evaluate(parsedate(04_02_2001),[04,02,2001])
| | | | | Call: evaluate(minus(2023,2001),V965)
| | | | | Exit: evaluate(minus(2023,2001),22)
| | | | | Call: evaluate(minus(09,02),V966)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V967)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,22),7),V968)
| | | | | Exit: evaluate(plus(imul(12,22),7),271)
| | | | | Call: evaluate(if(leq(-1,-1),minus(271,1),true,271),V958)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(271,1),true,271),270)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: claim.previous_vaccines_flu_more_than_equal_2(claim_a16,V969)
| | | | Exit: claim.previous_vaccines_flu_more_than_equal_2(claim_a16,yes)
| | | | Call: age_range_limit_flu(claim_a16,V970,V971,V972,yes)
| | | | Exit: age_range_limit_flu(C,1,0,20000,PC)
| | | | Call: leq(0,270)
| | | | Exit: leq(0,270)
| | | | Call: leq(270,20000)
| | | | Exit: leq(270,20000)
| | | | Call: claim.vaccine_dose_count_annual(claim_a16,V973)
| | | | Exit: claim.vaccine_dose_count_annual(claim_a16,2)
| | | | Call: leq(2,1)
| | | | Fail: leq(2,1)
| | | | Redo: claim.vaccine_dose_count_annual(claim_a16,V973)
| | | | Fail: claim.vaccine_dose_count_annual(claim_a16,V973)
| | | | Redo: age_range_limit_flu(claim_a16,V970,V971,V972,yes)
| | | | Fail: age_range_limit_flu(claim_a16,V970,V971,V972,yes)
| | | | Redo: claim.previous_vaccines_flu_more_than_equal_2(claim_a16,V969)
| | | | Fail: claim.previous_vaccines_flu_more_than_equal_2(claim_a16,V969)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2001,V958)
| | | | Redo: claim.hosp_start_time(claim_a16,V956,V957)
| | | | Fail: claim.hosp_start_time(claim_a16,V956,V957)
| | | | Redo: person.dob(person_a16,V955)
| | | | Fail: person.dob(person_a16,V955)
| | | | Redo: claim.claimant(claim_a16,V954)
| | | | Fail: claim.claimant(claim_a16,V954)
| | | | Redo: claim.vaccine(claim_a16,flu)
| | | | Fail: claim.vaccine(claim_a16,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a16,V953)
| | | | Fail: claim.location(claim_a16,V953)
| | | Fail: eligible_service(claim_a16,policy1,preventive_care)
| | | Redo: claim.reason(claim_a16,V943)
| | | Fail: claim.reason(claim_a16,V943)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a16,V942)
| | | Fail: claim.hospital(claim_a16,V942)
| | | Call: claim.reason(claim_a16,emergency_room)
| | | Fail: claim.reason(claim_a16,emergency_room)
| | Fail: valid_hospitalization(claim_a16,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V938)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V934)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V930)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V926)
| | | Redo: policy.enddate(policy1,person_a16,V925)
| | | Fail: policy.enddate(policy1,person_a16,V925)
| | | Redo: policy.startdate(policy1,person_a16,V924)
| | | Fail: policy.startdate(policy1,person_a16,V924)
| | | Redo: claim.hosp_end_time(claim_a16,V922,V923)
| | | Fail: claim.hosp_end_time(claim_a16,V922,V923)
| | | Redo: claim.hosp_start_time(claim_a16,V920,V921)
| | | Fail: claim.hosp_start_time(claim_a16,V920,V921)
| | | Redo: claim.claimant(claim_a16,V919)
| | | Fail: claim.claimant(claim_a16,V919)
| | Fail: policy_active(claim_a16,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a16)
| | | Fail: policy.insuree(policy1,person_a16)
| | | Redo: claim.claimant(claim_a16,V918)
| | | Fail: claim.claimant(claim_a16,V918)
| | Fail: valid_insuree(claim_a16,policy1)
| Fail: covered_under_policy(claim_a16,policy1,cardinal)
| Redo: policy.type(policy1,V804)
| Fail: policy.type(policy1,V804)
| Redo: claim.policy(X,V803)
| Exit: claim.policy(claim_a17,policy1)
| Call: policy.type(policy1,V804)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a17,policy1,cardinal)
| | Call: valid_insuree(claim_a17,policy1)
| | | Call: claim.claimant(claim_a17,V974)
| | | Exit: claim.claimant(claim_a17,person_a17)
| | | Call: policy.insuree(policy1,person_a17)
| | | Exit: policy.insuree(policy1,person_a17)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a17,policy1)
| | | Call: claim.claimant(claim_a17,V975)
| | | Exit: claim.claimant(claim_a17,person_a17)
| | | Call: claim.hosp_start_time(claim_a17,V976,V977)
| | | Exit: claim.hosp_start_time(claim_a17,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a17,V978,V979)
| | | Exit: claim.hosp_end_time(claim_a17,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a17,V980)
| | | Exit: policy.startdate(policy1,person_a17,01_08_2023)
| | | Call: policy.enddate(policy1,person_a17,V981)
| | | Exit: policy.enddate(policy1,person_a17,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V982)
| | | | Call: evaluate(parsedate(03_09_2023),[V983,V984,V985])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V982)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V986)
| | | | Call: evaluate(parsedate(03_09_2023),[V987,V988,V989])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V986)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V990)
| | | | Call: evaluate(parsedate(30_06_2024),[V991,V992,V993])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V990)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V994)
| | | | Call: evaluate(parsedate(01_08_2023),[V995,V996,V997])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V994)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a17,policy1)
| | | Call: claim.hospital(claim_a17,V998)
| | | Exit: claim.hospital(claim_a17,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a17,V999)
| | | Exit: claim.reason(claim_a17,preventive_care)
| | | Call: eligible_service(claim_a17,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a17,preventive_care)
| | | | | Call: claim.claimant(claim_a17,V1000)
| | | | | Exit: claim.claimant(claim_a17,person_a17)
| | | | | Call: person.dob(person_a17,V1001)
| | | | | Exit: person.dob(person_a17,04_02_2023)
| | | | | Call: claim.time(claim_a17,V1002,V1003)
| | | | | Fail: claim.time(claim_a17,V1002,V1003)
| | | | | Redo: person.dob(person_a17,V1001)
| | | | | Fail: person.dob(person_a17,V1001)
| | | | | Redo: claim.claimant(claim_a17,V1000)
| | | | | Fail: claim.claimant(claim_a17,V1000)
| | | | Fail: check_policy_year_limit(claim_a17,preventive_care)
| | | | Call: covered_list_with_location(V1004)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1004)
| | | | Fail: covered_list_with_location(V1004)
| | | | Call: covered_list_with_service_provider(V1005)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1005)
| | | | Fail: covered_list_with_service_provider(V1005)
| | | | Call: covered_list(V1006)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1006)
| | | | Fail: covered_list(V1006)
| | | | Call: claim.location(claim_a17,V1007)
| | | | Exit: claim.location(claim_a17,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a17,hep_b)
| | | | Fail: claim.vaccine(claim_a17,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a17,V1007)
| | | | Fail: claim.location(claim_a17,V1007)
| | | | Call: claim.location(claim_a17,V1008)
| | | | Exit: claim.location(claim_a17,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a17,covid)
| | | | Fail: claim.vaccine(claim_a17,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a17,V1008)
| | | | Fail: claim.location(claim_a17,V1008)
| | | | Call: claim.location(claim_a17,V1009)
| | | | Exit: claim.location(claim_a17,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a17,flu)
| | | | Exit: claim.vaccine(claim_a17,flu)
| | | | Call: claim.claimant(claim_a17,V1010)
| | | | Exit: claim.claimant(claim_a17,person_a17)
| | | | Call: person.dob(person_a17,V1011)
| | | | Exit: person.dob(person_a17,04_02_2023)
| | | | Call: claim.hosp_start_time(claim_a17,V1012,V1013)
| | | | Exit: claim.hosp_start_time(claim_a17,03_09_2023,00_00)
| | | | Call: get_date_diff_in_months(03_09_2023,04_02_2023,V1014)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1015,V1016,V1017])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_02_2023),[V1018,V1019,V1020])
| | | | | Exit: evaluate(parsedate(04_02_2023),[04,02,2023])
| | | | | Call: evaluate(minus(2023,2023),V1021)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,02),V1022)
| | | | | Exit: evaluate(minus(09,02),7)
| | | | | Call: evaluate(minus(03,04),V1023)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),7),V1024)
| | | | | Exit: evaluate(plus(imul(12,0),7),7)
| | | | | Call: evaluate(if(leq(-1,-1),minus(7,1),true,7),V1014)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(7,1),true,7),6)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: claim.previous_vaccines_flu_more_than_equal_2(claim_a17,V1025)
| | | | Exit: claim.previous_vaccines_flu_more_than_equal_2(claim_a17,yes)
| | | | Call: age_range_limit_flu(claim_a17,V1026,V1027,V1028,yes)
| | | | Exit: age_range_limit_flu(C,1,0,20000,PC)
| | | | Call: leq(0,6)
| | | | Exit: leq(0,6)
| | | | Call: leq(6,20000)
| | | | Exit: leq(6,20000)
| | | | Call: claim.vaccine_dose_count_annual(claim_a17,V1029)
| | | | Exit: claim.vaccine_dose_count_annual(claim_a17,1)
| | | | Call: leq(1,1)
| | | | Exit: leq(1,1)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a17,policy1)
Call: exception(claim_a17,policy1)
| Call: claim.claimant(claim_a17,V1030)
| Exit: claim.claimant(claim_a17,person_a17)
| Call: person.occupation(person_a17,armed_forces)
| Fail: person.occupation(person_a17,armed_forces)
| Redo: claim.claimant(claim_a17,V1030)
| Fail: claim.claimant(claim_a17,V1030)
| Call: claim.reason(claim_a17,home_health_care)
| Fail: claim.reason(claim_a17,home_health_care)
| Call: claim.reason(claim_a17,home_health_care)
| Fail: claim.reason(claim_a17,home_health_care)
Fail: exception(claim_a17,policy1)
| | | Exit: ~exception(claim_a17,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a17)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count_annual(claim_a17,V1029)
| | | | Fail: claim.vaccine_dose_count_annual(claim_a17,V1029)
| | | | Redo: age_range_limit_flu(claim_a17,V1026,V1027,V1028,yes)
| | | | Fail: age_range_limit_flu(claim_a17,V1026,V1027,V1028,yes)
| | | | Redo: claim.previous_vaccines_flu_more_than_equal_2(claim_a17,V1025)
| | | | Fail: claim.previous_vaccines_flu_more_than_equal_2(claim_a17,V1025)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_02_2023,V1014)
| | | | Redo: claim.hosp_start_time(claim_a17,V1012,V1013)
| | | | Fail: claim.hosp_start_time(claim_a17,V1012,V1013)
| | | | Redo: person.dob(person_a17,V1011)
| | | | Fail: person.dob(person_a17,V1011)
| | | | Redo: claim.claimant(claim_a17,V1010)
| | | | Fail: claim.claimant(claim_a17,V1010)
| | | | Redo: claim.vaccine(claim_a17,flu)
| | | | Fail: claim.vaccine(claim_a17,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a17,V1009)
| | | | Fail: claim.location(claim_a17,V1009)
| | | Fail: eligible_service(claim_a17,policy1,preventive_care)
| | | Redo: claim.reason(claim_a17,V999)
| | | Fail: claim.reason(claim_a17,V999)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a17,V998)
| | | Fail: claim.hospital(claim_a17,V998)
| | | Call: claim.reason(claim_a17,emergency_room)
| | | Fail: claim.reason(claim_a17,emergency_room)
| | Fail: valid_hospitalization(claim_a17,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V994)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V990)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V986)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V982)
| | | Redo: policy.enddate(policy1,person_a17,V981)
| | | Fail: policy.enddate(policy1,person_a17,V981)
| | | Redo: policy.startdate(policy1,person_a17,V980)
| | | Fail: policy.startdate(policy1,person_a17,V980)
| | | Redo: claim.hosp_end_time(claim_a17,V978,V979)
| | | Fail: claim.hosp_end_time(claim_a17,V978,V979)
| | | Redo: claim.hosp_start_time(claim_a17,V976,V977)
| | | Fail: claim.hosp_start_time(claim_a17,V976,V977)
| | | Redo: claim.claimant(claim_a17,V975)
| | | Fail: claim.claimant(claim_a17,V975)
| | Fail: policy_active(claim_a17,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a17)
| | | Fail: policy.insuree(policy1,person_a17)
| | | Redo: claim.claimant(claim_a17,V974)
| | | Fail: claim.claimant(claim_a17,V974)
| | Fail: valid_insuree(claim_a17,policy1)
| Fail: covered_under_policy(claim_a17,policy1,cardinal)
| Redo: policy.type(policy1,V804)
| Fail: policy.type(policy1,V804)
| Redo: claim.policy(X,V803)
| Fail: claim.policy(X,V803)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_flu.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim_a14', 'claim_a17' ]
RESULTS: [ 'claim_a14', 'claim_a17' ]
===== TEST SUCCEEDED: Test test_cases_flu.hdf===== 
Expected Result:  [ 'claim_a4', 'claim_a6' ]
Call: covered(X)
| Call: claim.policy(X,V1031)
| Exit: claim.policy(claim_a4,policy1)
| Call: policy.type(policy1,V1032)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a4,policy1,cardinal)
| | Call: valid_insuree(claim_a4,policy1)
| | | Call: claim.claimant(claim_a4,V1033)
| | | Exit: claim.claimant(claim_a4,person_a4)
| | | Call: policy.insuree(policy1,person_a4)
| | | Exit: policy.insuree(policy1,person_a4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a4,policy1)
| | | Call: claim.claimant(claim_a4,V1034)
| | | Exit: claim.claimant(claim_a4,person_a4)
| | | Call: claim.hosp_start_time(claim_a4,V1035,V1036)
| | | Exit: claim.hosp_start_time(claim_a4,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a4,V1037,V1038)
| | | Exit: claim.hosp_end_time(claim_a4,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a4,V1039)
| | | Exit: policy.startdate(policy1,person_a4,01_08_2023)
| | | Call: policy.enddate(policy1,person_a4,V1040)
| | | Exit: policy.enddate(policy1,person_a4,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1041)
| | | | Call: evaluate(parsedate(03_09_2023),[V1042,V1043,V1044])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1041)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1045)
| | | | Call: evaluate(parsedate(03_09_2023),[V1046,V1047,V1048])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1045)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1049)
| | | | Call: evaluate(parsedate(30_06_2024),[V1050,V1051,V1052])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1049)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1053)
| | | | Call: evaluate(parsedate(01_08_2023),[V1054,V1055,V1056])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1053)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a4,policy1)
| | | Call: claim.hospital(claim_a4,V1057)
| | | Exit: claim.hospital(claim_a4,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a4,V1058)
| | | Exit: claim.reason(claim_a4,preventive_care)
| | | Call: eligible_service(claim_a4,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a4,preventive_care)
| | | | | Call: claim.claimant(claim_a4,V1059)
| | | | | Exit: claim.claimant(claim_a4,person_a4)
| | | | | Call: person.dob(person_a4,V1060)
| | | | | Exit: person.dob(person_a4,04_08_2023)
| | | | | Call: claim.time(claim_a4,V1061,V1062)
| | | | | Fail: claim.time(claim_a4,V1061,V1062)
| | | | | Redo: person.dob(person_a4,V1060)
| | | | | Fail: person.dob(person_a4,V1060)
| | | | | Redo: claim.claimant(claim_a4,V1059)
| | | | | Fail: claim.claimant(claim_a4,V1059)
| | | | Fail: check_policy_year_limit(claim_a4,preventive_care)
| | | | Call: covered_list_with_location(V1063)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1063)
| | | | Fail: covered_list_with_location(V1063)
| | | | Call: covered_list_with_service_provider(V1064)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1064)
| | | | Fail: covered_list_with_service_provider(V1064)
| | | | Call: covered_list(V1065)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1065)
| | | | Fail: covered_list(V1065)
| | | | Call: claim.location(claim_a4,V1066)
| | | | Exit: claim.location(claim_a4,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a4,hep_b)
| | | | Exit: claim.vaccine(claim_a4,hep_b)
| | | | Call: claim.claimant(claim_a4,V1067)
| | | | Exit: claim.claimant(claim_a4,person_a4)
| | | | Call: person.dob(person_a4,V1068)
| | | | Exit: person.dob(person_a4,04_08_2023)
| | | | Call: claim.hosp_start_time(claim_a4,V1069,V1070)
| | | | Exit: claim.hosp_start_time(claim_a4,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_08_2023,V1071)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1072,V1073,V1074])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1075,V1076,V1077])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1078)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1079)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1080)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,1),-1),V1081)
| | | | | Exit: evaluate(plus(imul(31,1),-1),30)
| | | | | Call: evaluate(plus(0,if(leq(30,-1),-1,true,0)),V1071)
| | | | | Exit: evaluate(plus(0,if(leq(30,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_08_2023,V1082)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1083,V1084,V1085])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1086,V1087,V1088])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1089)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1090)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1091)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),1),V1092)
| | | | | Exit: evaluate(plus(imul(12,0),1),1)
| | | | | Call: evaluate(if(leq(-1,-1),minus(1,1),true,1),V1082)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(1,1),true,1),0)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: age_range_limit_hepb(claim_a4,V1093,0,0)
| | | | Exit: age_range_limit_hepb(C,1,Y,0)
| | | | Call: claim.vaccine_dose_count(claim_a4,V1094)
| | | | Exit: claim.vaccine_dose_count(claim_a4,1)
| | | | Call: leq(1,1)
| | | | Exit: leq(1,1)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a4,policy1)
Call: exception(claim_a4,policy1)
| Call: claim.claimant(claim_a4,V1095)
| Exit: claim.claimant(claim_a4,person_a4)
| Call: person.occupation(person_a4,armed_forces)
| Fail: person.occupation(person_a4,armed_forces)
| Redo: claim.claimant(claim_a4,V1095)
| Fail: claim.claimant(claim_a4,V1095)
| Call: claim.reason(claim_a4,home_health_care)
| Fail: claim.reason(claim_a4,home_health_care)
| Call: claim.reason(claim_a4,home_health_care)
| Fail: claim.reason(claim_a4,home_health_care)
Fail: exception(claim_a4,policy1)
| | | Exit: ~exception(claim_a4,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a4)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count(claim_a4,V1094)
| | | | Fail: claim.vaccine_dose_count(claim_a4,V1094)
| | | | Redo: age_range_limit_hepb(claim_a4,V1093,0,0)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(6,0)
| | | | | Fail: leq(6,0)
| | | | | Call: leq(19,0)
| | | | | Fail: leq(19,0)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: mother_hbsag_positive_unknown(claim_a4)
| | | | | | Call: claim.mother_hbsag(claim_a4,positive)
| | | | | | Fail: claim.mother_hbsag(claim_a4,positive)
| | | | | | Call: claim.mother_hbsag(V1096,unknown)
| | | | | | Fail: claim.mother_hbsag(V1096,unknown)
| | | | | Fail: mother_hbsag_positive_unknown(claim_a4)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: claim.birth_weight(claim_a4,V1097)
| | | | | Fail: claim.birth_weight(claim_a4,V1097)
| | | | | Call: claim.claimant(claim_a4,V1098)
| | | | | Exit: claim.claimant(claim_a4,person_a4)
| | | | | Call: eligible_for_revaccination(person_a4)
| | | | | | Call: person.occupation(person_a4,healthcare_worker)
| | | | | | Fail: person.occupation(person_a4,healthcare_worker)
| | | | | | Call: person.condition(person_a4,immunocompromised)
| | | | | | Fail: person.condition(person_a4,immunocompromised)
| | | | | | Call: person.condition(person_a4,hemodialysis_patient)
| | | | | | Fail: person.condition(person_a4,hemodialysis_patient)
| | | | | Fail: eligible_for_revaccination(person_a4)
| | | | | Redo: claim.claimant(claim_a4,V1098)
| | | | | Fail: claim.claimant(claim_a4,V1098)
| | | | Fail: age_range_limit_hepb(claim_a4,V1093,0,0)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_08_2023,V1082)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_08_2023,V1071)
| | | | Redo: claim.hosp_start_time(claim_a4,V1069,V1070)
| | | | Fail: claim.hosp_start_time(claim_a4,V1069,V1070)
| | | | Redo: person.dob(person_a4,V1068)
| | | | Fail: person.dob(person_a4,V1068)
| | | | Redo: claim.claimant(claim_a4,V1067)
| | | | Fail: claim.claimant(claim_a4,V1067)
| | | | Redo: claim.vaccine(claim_a4,hep_b)
| | | | Fail: claim.vaccine(claim_a4,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a4,V1066)
| | | | Fail: claim.location(claim_a4,V1066)
| | | | Call: claim.location(claim_a4,V1099)
| | | | Exit: claim.location(claim_a4,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a4,covid)
| | | | Fail: claim.vaccine(claim_a4,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a4,V1099)
| | | | Fail: claim.location(claim_a4,V1099)
| | | | Call: claim.location(claim_a4,V1100)
| | | | Exit: claim.location(claim_a4,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a4,flu)
| | | | Fail: claim.vaccine(claim_a4,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a4,V1100)
| | | | Fail: claim.location(claim_a4,V1100)
| | | Fail: eligible_service(claim_a4,policy1,preventive_care)
| | | Redo: claim.reason(claim_a4,V1058)
| | | Fail: claim.reason(claim_a4,V1058)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a4,V1057)
| | | Fail: claim.hospital(claim_a4,V1057)
| | | Call: claim.reason(claim_a4,emergency_room)
| | | Fail: claim.reason(claim_a4,emergency_room)
| | Fail: valid_hospitalization(claim_a4,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1053)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1049)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1045)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1041)
| | | Redo: policy.enddate(policy1,person_a4,V1040)
| | | Fail: policy.enddate(policy1,person_a4,V1040)
| | | Redo: policy.startdate(policy1,person_a4,V1039)
| | | Fail: policy.startdate(policy1,person_a4,V1039)
| | | Redo: claim.hosp_end_time(claim_a4,V1037,V1038)
| | | Fail: claim.hosp_end_time(claim_a4,V1037,V1038)
| | | Redo: claim.hosp_start_time(claim_a4,V1035,V1036)
| | | Fail: claim.hosp_start_time(claim_a4,V1035,V1036)
| | | Redo: claim.claimant(claim_a4,V1034)
| | | Fail: claim.claimant(claim_a4,V1034)
| | Fail: policy_active(claim_a4,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a4)
| | | Fail: policy.insuree(policy1,person_a4)
| | | Redo: claim.claimant(claim_a4,V1033)
| | | Fail: claim.claimant(claim_a4,V1033)
| | Fail: valid_insuree(claim_a4,policy1)
| Fail: covered_under_policy(claim_a4,policy1,cardinal)
| Redo: policy.type(policy1,V1032)
| Fail: policy.type(policy1,V1032)
| Redo: claim.policy(X,V1031)
| Exit: claim.policy(claim_a5,policy1)
| Call: policy.type(policy1,V1032)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a5,policy1,cardinal)
| | Call: valid_insuree(claim_a5,policy1)
| | | Call: claim.claimant(claim_a5,V1101)
| | | Exit: claim.claimant(claim_a5,person_a5)
| | | Call: policy.insuree(policy1,person_a5)
| | | Exit: policy.insuree(policy1,person_a5)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a5,policy1)
| | | Call: claim.claimant(claim_a5,V1102)
| | | Exit: claim.claimant(claim_a5,person_a5)
| | | Call: claim.hosp_start_time(claim_a5,V1103,V1104)
| | | Exit: claim.hosp_start_time(claim_a5,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a5,V1105,V1106)
| | | Exit: claim.hosp_end_time(claim_a5,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a5,V1107)
| | | Exit: policy.startdate(policy1,person_a5,01_08_2023)
| | | Call: policy.enddate(policy1,person_a5,V1108)
| | | Exit: policy.enddate(policy1,person_a5,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1109)
| | | | Call: evaluate(parsedate(03_09_2023),[V1110,V1111,V1112])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1109)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1113)
| | | | Call: evaluate(parsedate(03_09_2023),[V1114,V1115,V1116])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1113)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1117)
| | | | Call: evaluate(parsedate(30_06_2024),[V1118,V1119,V1120])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1117)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1121)
| | | | Call: evaluate(parsedate(01_08_2023),[V1122,V1123,V1124])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1121)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a5,policy1)
| | | Call: claim.hospital(claim_a5,V1125)
| | | Exit: claim.hospital(claim_a5,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a5,V1126)
| | | Exit: claim.reason(claim_a5,preventive_care)
| | | Call: eligible_service(claim_a5,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a5,preventive_care)
| | | | | Call: claim.claimant(claim_a5,V1127)
| | | | | Exit: claim.claimant(claim_a5,person_a5)
| | | | | Call: person.dob(person_a5,V1128)
| | | | | Exit: person.dob(person_a5,04_08_2023)
| | | | | Call: claim.time(claim_a5,V1129,V1130)
| | | | | Fail: claim.time(claim_a5,V1129,V1130)
| | | | | Redo: person.dob(person_a5,V1128)
| | | | | Fail: person.dob(person_a5,V1128)
| | | | | Redo: claim.claimant(claim_a5,V1127)
| | | | | Fail: claim.claimant(claim_a5,V1127)
| | | | Fail: check_policy_year_limit(claim_a5,preventive_care)
| | | | Call: covered_list_with_location(V1131)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1131)
| | | | Fail: covered_list_with_location(V1131)
| | | | Call: covered_list_with_service_provider(V1132)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1132)
| | | | Fail: covered_list_with_service_provider(V1132)
| | | | Call: covered_list(V1133)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1133)
| | | | Fail: covered_list(V1133)
| | | | Call: claim.location(claim_a5,V1134)
| | | | Exit: claim.location(claim_a5,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a5,hep_b)
| | | | Exit: claim.vaccine(claim_a5,hep_b)
| | | | Call: claim.claimant(claim_a5,V1135)
| | | | Exit: claim.claimant(claim_a5,person_a5)
| | | | Call: person.dob(person_a5,V1136)
| | | | Exit: person.dob(person_a5,04_08_2023)
| | | | Call: claim.hosp_start_time(claim_a5,V1137,V1138)
| | | | Exit: claim.hosp_start_time(claim_a5,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_08_2023,V1139)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1140,V1141,V1142])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1143,V1144,V1145])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1146)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1147)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1148)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,1),-1),V1149)
| | | | | Exit: evaluate(plus(imul(31,1),-1),30)
| | | | | Call: evaluate(plus(0,if(leq(30,-1),-1,true,0)),V1139)
| | | | | Exit: evaluate(plus(0,if(leq(30,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_08_2023,V1150)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1151,V1152,V1153])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1154,V1155,V1156])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1157)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1158)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1159)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),1),V1160)
| | | | | Exit: evaluate(plus(imul(12,0),1),1)
| | | | | Call: evaluate(if(leq(-1,-1),minus(1,1),true,1),V1150)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(1,1),true,1),0)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: age_range_limit_hepb(claim_a5,V1161,0,0)
| | | | Exit: age_range_limit_hepb(C,1,Y,0)
| | | | Call: claim.vaccine_dose_count(claim_a5,V1162)
| | | | Exit: claim.vaccine_dose_count(claim_a5,2)
| | | | Call: leq(2,1)
| | | | Fail: leq(2,1)
| | | | Redo: claim.vaccine_dose_count(claim_a5,V1162)
| | | | Fail: claim.vaccine_dose_count(claim_a5,V1162)
| | | | Redo: age_range_limit_hepb(claim_a5,V1161,0,0)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(6,0)
| | | | | Fail: leq(6,0)
| | | | | Call: leq(19,0)
| | | | | Fail: leq(19,0)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: mother_hbsag_positive_unknown(claim_a5)
| | | | | | Call: claim.mother_hbsag(claim_a5,positive)
| | | | | | Fail: claim.mother_hbsag(claim_a5,positive)
| | | | | | Call: claim.mother_hbsag(V1163,unknown)
| | | | | | Fail: claim.mother_hbsag(V1163,unknown)
| | | | | Fail: mother_hbsag_positive_unknown(claim_a5)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: claim.birth_weight(claim_a5,V1164)
| | | | | Fail: claim.birth_weight(claim_a5,V1164)
| | | | | Call: claim.claimant(claim_a5,V1165)
| | | | | Exit: claim.claimant(claim_a5,person_a5)
| | | | | Call: eligible_for_revaccination(person_a5)
| | | | | | Call: person.occupation(person_a5,healthcare_worker)
| | | | | | Fail: person.occupation(person_a5,healthcare_worker)
| | | | | | Call: person.condition(person_a5,immunocompromised)
| | | | | | Fail: person.condition(person_a5,immunocompromised)
| | | | | | Call: person.condition(person_a5,hemodialysis_patient)
| | | | | | Fail: person.condition(person_a5,hemodialysis_patient)
| | | | | Fail: eligible_for_revaccination(person_a5)
| | | | | Redo: claim.claimant(claim_a5,V1165)
| | | | | Fail: claim.claimant(claim_a5,V1165)
| | | | Fail: age_range_limit_hepb(claim_a5,V1161,0,0)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_08_2023,V1150)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_08_2023,V1139)
| | | | Redo: claim.hosp_start_time(claim_a5,V1137,V1138)
| | | | Fail: claim.hosp_start_time(claim_a5,V1137,V1138)
| | | | Redo: person.dob(person_a5,V1136)
| | | | Fail: person.dob(person_a5,V1136)
| | | | Redo: claim.claimant(claim_a5,V1135)
| | | | Fail: claim.claimant(claim_a5,V1135)
| | | | Redo: claim.vaccine(claim_a5,hep_b)
| | | | Fail: claim.vaccine(claim_a5,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a5,V1134)
| | | | Fail: claim.location(claim_a5,V1134)
| | | | Call: claim.location(claim_a5,V1166)
| | | | Exit: claim.location(claim_a5,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a5,covid)
| | | | Fail: claim.vaccine(claim_a5,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a5,V1166)
| | | | Fail: claim.location(claim_a5,V1166)
| | | | Call: claim.location(claim_a5,V1167)
| | | | Exit: claim.location(claim_a5,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a5,flu)
| | | | Fail: claim.vaccine(claim_a5,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a5,V1167)
| | | | Fail: claim.location(claim_a5,V1167)
| | | Fail: eligible_service(claim_a5,policy1,preventive_care)
| | | Redo: claim.reason(claim_a5,V1126)
| | | Fail: claim.reason(claim_a5,V1126)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a5,V1125)
| | | Fail: claim.hospital(claim_a5,V1125)
| | | Call: claim.reason(claim_a5,emergency_room)
| | | Fail: claim.reason(claim_a5,emergency_room)
| | Fail: valid_hospitalization(claim_a5,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1121)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1117)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1113)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1109)
| | | Redo: policy.enddate(policy1,person_a5,V1108)
| | | Fail: policy.enddate(policy1,person_a5,V1108)
| | | Redo: policy.startdate(policy1,person_a5,V1107)
| | | Fail: policy.startdate(policy1,person_a5,V1107)
| | | Redo: claim.hosp_end_time(claim_a5,V1105,V1106)
| | | Fail: claim.hosp_end_time(claim_a5,V1105,V1106)
| | | Redo: claim.hosp_start_time(claim_a5,V1103,V1104)
| | | Fail: claim.hosp_start_time(claim_a5,V1103,V1104)
| | | Redo: claim.claimant(claim_a5,V1102)
| | | Fail: claim.claimant(claim_a5,V1102)
| | Fail: policy_active(claim_a5,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a5)
| | | Fail: policy.insuree(policy1,person_a5)
| | | Redo: claim.claimant(claim_a5,V1101)
| | | Fail: claim.claimant(claim_a5,V1101)
| | Fail: valid_insuree(claim_a5,policy1)
| Fail: covered_under_policy(claim_a5,policy1,cardinal)
| Redo: policy.type(policy1,V1032)
| Fail: policy.type(policy1,V1032)
| Redo: claim.policy(X,V1031)
| Exit: claim.policy(claim_a6,policy1)
| Call: policy.type(policy1,V1032)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a6,policy1,cardinal)
| | Call: valid_insuree(claim_a6,policy1)
| | | Call: claim.claimant(claim_a6,V1168)
| | | Exit: claim.claimant(claim_a6,person_a6)
| | | Call: policy.insuree(policy1,person_a6)
| | | Exit: policy.insuree(policy1,person_a6)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a6,policy1)
| | | Call: claim.claimant(claim_a6,V1169)
| | | Exit: claim.claimant(claim_a6,person_a6)
| | | Call: claim.hosp_start_time(claim_a6,V1170,V1171)
| | | Exit: claim.hosp_start_time(claim_a6,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a6,V1172,V1173)
| | | Exit: claim.hosp_end_time(claim_a6,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a6,V1174)
| | | Exit: policy.startdate(policy1,person_a6,01_08_2023)
| | | Call: policy.enddate(policy1,person_a6,V1175)
| | | Exit: policy.enddate(policy1,person_a6,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1176)
| | | | Call: evaluate(parsedate(03_09_2023),[V1177,V1178,V1179])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1176)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1180)
| | | | Call: evaluate(parsedate(03_09_2023),[V1181,V1182,V1183])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1180)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1184)
| | | | Call: evaluate(parsedate(30_06_2024),[V1185,V1186,V1187])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1184)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1188)
| | | | Call: evaluate(parsedate(01_08_2023),[V1189,V1190,V1191])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1188)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a6,policy1)
| | | Call: claim.hospital(claim_a6,V1192)
| | | Exit: claim.hospital(claim_a6,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a6,V1193)
| | | Exit: claim.reason(claim_a6,preventive_care)
| | | Call: eligible_service(claim_a6,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a6,preventive_care)
| | | | | Call: claim.claimant(claim_a6,V1194)
| | | | | Exit: claim.claimant(claim_a6,person_a6)
| | | | | Call: person.dob(person_a6,V1195)
| | | | | Exit: person.dob(person_a6,04_08_2023)
| | | | | Call: claim.time(claim_a6,V1196,V1197)
| | | | | Fail: claim.time(claim_a6,V1196,V1197)
| | | | | Redo: person.dob(person_a6,V1195)
| | | | | Fail: person.dob(person_a6,V1195)
| | | | | Redo: claim.claimant(claim_a6,V1194)
| | | | | Fail: claim.claimant(claim_a6,V1194)
| | | | Fail: check_policy_year_limit(claim_a6,preventive_care)
| | | | Call: covered_list_with_location(V1198)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1198)
| | | | Fail: covered_list_with_location(V1198)
| | | | Call: covered_list_with_service_provider(V1199)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1199)
| | | | Fail: covered_list_with_service_provider(V1199)
| | | | Call: covered_list(V1200)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1200)
| | | | Fail: covered_list(V1200)
| | | | Call: claim.location(claim_a6,V1201)
| | | | Exit: claim.location(claim_a6,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a6,hep_b)
| | | | Exit: claim.vaccine(claim_a6,hep_b)
| | | | Call: claim.claimant(claim_a6,V1202)
| | | | Exit: claim.claimant(claim_a6,person_a6)
| | | | Call: person.dob(person_a6,V1203)
| | | | Exit: person.dob(person_a6,04_08_2023)
| | | | Call: claim.hosp_start_time(claim_a6,V1204,V1205)
| | | | Exit: claim.hosp_start_time(claim_a6,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_08_2023,V1206)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1207,V1208,V1209])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1210,V1211,V1212])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1213)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1214)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1215)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,1),-1),V1216)
| | | | | Exit: evaluate(plus(imul(31,1),-1),30)
| | | | | Call: evaluate(plus(0,if(leq(30,-1),-1,true,0)),V1206)
| | | | | Exit: evaluate(plus(0,if(leq(30,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_08_2023,V1217)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1218,V1219,V1220])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1221,V1222,V1223])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1224)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1225)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1226)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),1),V1227)
| | | | | Exit: evaluate(plus(imul(12,0),1),1)
| | | | | Call: evaluate(if(leq(-1,-1),minus(1,1),true,1),V1217)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(1,1),true,1),0)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: age_range_limit_hepb(claim_a6,V1228,0,0)
| | | | Exit: age_range_limit_hepb(C,1,Y,0)
| | | | Call: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Exit: claim.vaccine_dose_count(claim_a6,7)
| | | | Call: leq(7,1)
| | | | Fail: leq(7,1)
| | | | Redo: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Fail: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Redo: age_range_limit_hepb(claim_a6,V1228,0,0)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(6,0)
| | | | | Fail: leq(6,0)
| | | | | Call: leq(19,0)
| | | | | Fail: leq(19,0)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: mother_hbsag_positive_unknown(claim_a6)
| | | | | | Call: claim.mother_hbsag(claim_a6,positive)
| | | | | | Fail: claim.mother_hbsag(claim_a6,positive)
| | | | | | Call: claim.mother_hbsag(V1230,unknown)
| | | | | | Fail: claim.mother_hbsag(V1230,unknown)
| | | | | Fail: mother_hbsag_positive_unknown(claim_a6)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: claim.birth_weight(claim_a6,V1231)
| | | | | Exit: claim.birth_weight(claim_a6,1999)
| | | | | Call: leq(1999,2000)
| | | | | Exit: leq(1999,2000)
| | | | | Call: claim.anti_hbs_count(claim_a6,V1232)
| | | | | Exit: claim.anti_hbs_count(claim_a6,9)
| | | | | Call: leq(9,10)
| | | | | Exit: leq(9,10)
| | | | Exit: age_range_limit_hepb(C,N,Y,M)
| | | | Call: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Exit: claim.vaccine_dose_count(claim_a6,7)
| | | | Call: leq(7,7)
| | | | Exit: leq(7,7)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a6,policy1)
Call: exception(claim_a6,policy1)
| Call: claim.claimant(claim_a6,V1233)
| Exit: claim.claimant(claim_a6,person_a6)
| Call: person.occupation(person_a6,armed_forces)
| Fail: person.occupation(person_a6,armed_forces)
| Redo: claim.claimant(claim_a6,V1233)
| Fail: claim.claimant(claim_a6,V1233)
| Call: claim.reason(claim_a6,home_health_care)
| Fail: claim.reason(claim_a6,home_health_care)
| Call: claim.reason(claim_a6,home_health_care)
| Fail: claim.reason(claim_a6,home_health_care)
Fail: exception(claim_a6,policy1)
| | | Exit: ~exception(claim_a6,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a6)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Fail: claim.vaccine_dose_count(claim_a6,V1229)
| | | | Redo: age_range_limit_hepb(C,N,Y,M)
| | | | | Redo: claim.anti_hbs_count(claim_a6,V1232)
| | | | | Fail: claim.anti_hbs_count(claim_a6,V1232)
| | | | | Redo: claim.birth_weight(claim_a6,V1231)
| | | | | Fail: claim.birth_weight(claim_a6,V1231)
| | | | | Call: claim.claimant(claim_a6,V1234)
| | | | | Exit: claim.claimant(claim_a6,person_a6)
| | | | | Call: eligible_for_revaccination(person_a6)
| | | | | | Call: person.occupation(person_a6,healthcare_worker)
| | | | | | Fail: person.occupation(person_a6,healthcare_worker)
| | | | | | Call: person.condition(person_a6,immunocompromised)
| | | | | | Fail: person.condition(person_a6,immunocompromised)
| | | | | | Call: person.condition(person_a6,hemodialysis_patient)
| | | | | | Fail: person.condition(person_a6,hemodialysis_patient)
| | | | | Fail: eligible_for_revaccination(person_a6)
| | | | | Redo: claim.claimant(claim_a6,V1234)
| | | | | Fail: claim.claimant(claim_a6,V1234)
| | | | Fail: age_range_limit_hepb(claim_a6,V1228,0,0)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_08_2023,V1217)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_08_2023,V1206)
| | | | Redo: claim.hosp_start_time(claim_a6,V1204,V1205)
| | | | Fail: claim.hosp_start_time(claim_a6,V1204,V1205)
| | | | Redo: person.dob(person_a6,V1203)
| | | | Fail: person.dob(person_a6,V1203)
| | | | Redo: claim.claimant(claim_a6,V1202)
| | | | Fail: claim.claimant(claim_a6,V1202)
| | | | Redo: claim.vaccine(claim_a6,hep_b)
| | | | Fail: claim.vaccine(claim_a6,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a6,V1201)
| | | | Fail: claim.location(claim_a6,V1201)
| | | | Call: claim.location(claim_a6,V1235)
| | | | Exit: claim.location(claim_a6,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a6,covid)
| | | | Fail: claim.vaccine(claim_a6,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a6,V1235)
| | | | Fail: claim.location(claim_a6,V1235)
| | | | Call: claim.location(claim_a6,V1236)
| | | | Exit: claim.location(claim_a6,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a6,flu)
| | | | Fail: claim.vaccine(claim_a6,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a6,V1236)
| | | | Fail: claim.location(claim_a6,V1236)
| | | Fail: eligible_service(claim_a6,policy1,preventive_care)
| | | Redo: claim.reason(claim_a6,V1193)
| | | Fail: claim.reason(claim_a6,V1193)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a6,V1192)
| | | Fail: claim.hospital(claim_a6,V1192)
| | | Call: claim.reason(claim_a6,emergency_room)
| | | Fail: claim.reason(claim_a6,emergency_room)
| | Fail: valid_hospitalization(claim_a6,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1188)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1184)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1180)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1176)
| | | Redo: policy.enddate(policy1,person_a6,V1175)
| | | Fail: policy.enddate(policy1,person_a6,V1175)
| | | Redo: policy.startdate(policy1,person_a6,V1174)
| | | Fail: policy.startdate(policy1,person_a6,V1174)
| | | Redo: claim.hosp_end_time(claim_a6,V1172,V1173)
| | | Fail: claim.hosp_end_time(claim_a6,V1172,V1173)
| | | Redo: claim.hosp_start_time(claim_a6,V1170,V1171)
| | | Fail: claim.hosp_start_time(claim_a6,V1170,V1171)
| | | Redo: claim.claimant(claim_a6,V1169)
| | | Fail: claim.claimant(claim_a6,V1169)
| | Fail: policy_active(claim_a6,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a6)
| | | Fail: policy.insuree(policy1,person_a6)
| | | Redo: claim.claimant(claim_a6,V1168)
| | | Fail: claim.claimant(claim_a6,V1168)
| | Fail: valid_insuree(claim_a6,policy1)
| Fail: covered_under_policy(claim_a6,policy1,cardinal)
| Redo: policy.type(policy1,V1032)
| Fail: policy.type(policy1,V1032)
| Redo: claim.policy(X,V1031)
| Exit: claim.policy(claim_a7,policy1)
| Call: policy.type(policy1,V1032)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a7,policy1,cardinal)
| | Call: valid_insuree(claim_a7,policy1)
| | | Call: claim.claimant(claim_a7,V1237)
| | | Exit: claim.claimant(claim_a7,person_a7)
| | | Call: policy.insuree(policy1,person_a7)
| | | Exit: policy.insuree(policy1,person_a7)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a7,policy1)
| | | Call: claim.claimant(claim_a7,V1238)
| | | Exit: claim.claimant(claim_a7,person_a7)
| | | Call: claim.hosp_start_time(claim_a7,V1239,V1240)
| | | Exit: claim.hosp_start_time(claim_a7,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a7,V1241,V1242)
| | | Exit: claim.hosp_end_time(claim_a7,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a7,V1243)
| | | Exit: policy.startdate(policy1,person_a7,01_08_2023)
| | | Call: policy.enddate(policy1,person_a7,V1244)
| | | Exit: policy.enddate(policy1,person_a7,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1245)
| | | | Call: evaluate(parsedate(03_09_2023),[V1246,V1247,V1248])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1245)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1249)
| | | | Call: evaluate(parsedate(03_09_2023),[V1250,V1251,V1252])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1249)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1253)
| | | | Call: evaluate(parsedate(30_06_2024),[V1254,V1255,V1256])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1253)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1257)
| | | | Call: evaluate(parsedate(01_08_2023),[V1258,V1259,V1260])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1257)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a7,policy1)
| | | Call: claim.hospital(claim_a7,V1261)
| | | Exit: claim.hospital(claim_a7,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a7,V1262)
| | | Exit: claim.reason(claim_a7,preventive_care)
| | | Call: eligible_service(claim_a7,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a7,preventive_care)
| | | | | Call: claim.claimant(claim_a7,V1263)
| | | | | Exit: claim.claimant(claim_a7,person_a7)
| | | | | Call: person.dob(person_a7,V1264)
| | | | | Exit: person.dob(person_a7,04_08_2023)
| | | | | Call: claim.time(claim_a7,V1265,V1266)
| | | | | Fail: claim.time(claim_a7,V1265,V1266)
| | | | | Redo: person.dob(person_a7,V1264)
| | | | | Fail: person.dob(person_a7,V1264)
| | | | | Redo: claim.claimant(claim_a7,V1263)
| | | | | Fail: claim.claimant(claim_a7,V1263)
| | | | Fail: check_policy_year_limit(claim_a7,preventive_care)
| | | | Call: covered_list_with_location(V1267)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1267)
| | | | Fail: covered_list_with_location(V1267)
| | | | Call: covered_list_with_service_provider(V1268)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1268)
| | | | Fail: covered_list_with_service_provider(V1268)
| | | | Call: covered_list(V1269)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1269)
| | | | Fail: covered_list(V1269)
| | | | Call: claim.location(claim_a7,V1270)
| | | | Exit: claim.location(claim_a7,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a7,hep_b)
| | | | Exit: claim.vaccine(claim_a7,hep_b)
| | | | Call: claim.claimant(claim_a7,V1271)
| | | | Exit: claim.claimant(claim_a7,person_a7)
| | | | Call: person.dob(person_a7,V1272)
| | | | Exit: person.dob(person_a7,04_08_2023)
| | | | Call: claim.hosp_start_time(claim_a7,V1273,V1274)
| | | | Exit: claim.hosp_start_time(claim_a7,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_08_2023,V1275)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1276,V1277,V1278])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1279,V1280,V1281])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1282)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1283)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1284)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,1),-1),V1285)
| | | | | Exit: evaluate(plus(imul(31,1),-1),30)
| | | | | Call: evaluate(plus(0,if(leq(30,-1),-1,true,0)),V1275)
| | | | | Exit: evaluate(plus(0,if(leq(30,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_08_2023,V1286)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1287,V1288,V1289])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1290,V1291,V1292])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1293)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1294)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1295)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),1),V1296)
| | | | | Exit: evaluate(plus(imul(12,0),1),1)
| | | | | Call: evaluate(if(leq(-1,-1),minus(1,1),true,1),V1286)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(1,1),true,1),0)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: age_range_limit_hepb(claim_a7,V1297,0,0)
| | | | Exit: age_range_limit_hepb(C,1,Y,0)
| | | | Call: claim.vaccine_dose_count(claim_a7,V1298)
| | | | Exit: claim.vaccine_dose_count(claim_a7,7)
| | | | Call: leq(7,1)
| | | | Fail: leq(7,1)
| | | | Redo: claim.vaccine_dose_count(claim_a7,V1298)
| | | | Fail: claim.vaccine_dose_count(claim_a7,V1298)
| | | | Redo: age_range_limit_hepb(claim_a7,V1297,0,0)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(6,0)
| | | | | Fail: leq(6,0)
| | | | | Call: leq(19,0)
| | | | | Fail: leq(19,0)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: mother_hbsag_positive_unknown(claim_a7)
| | | | | | Call: claim.mother_hbsag(claim_a7,positive)
| | | | | | Fail: claim.mother_hbsag(claim_a7,positive)
| | | | | | Call: claim.mother_hbsag(V1299,unknown)
| | | | | | Fail: claim.mother_hbsag(V1299,unknown)
| | | | | Fail: mother_hbsag_positive_unknown(claim_a7)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: claim.birth_weight(claim_a7,V1300)
| | | | | Exit: claim.birth_weight(claim_a7,2001)
| | | | | Call: leq(2001,2000)
| | | | | Fail: leq(2001,2000)
| | | | | Redo: claim.birth_weight(claim_a7,V1300)
| | | | | Fail: claim.birth_weight(claim_a7,V1300)
| | | | | Call: claim.claimant(claim_a7,V1301)
| | | | | Exit: claim.claimant(claim_a7,person_a7)
| | | | | Call: eligible_for_revaccination(person_a7)
| | | | | | Call: person.occupation(person_a7,healthcare_worker)
| | | | | | Fail: person.occupation(person_a7,healthcare_worker)
| | | | | | Call: person.condition(person_a7,immunocompromised)
| | | | | | Fail: person.condition(person_a7,immunocompromised)
| | | | | | Call: person.condition(person_a7,hemodialysis_patient)
| | | | | | Fail: person.condition(person_a7,hemodialysis_patient)
| | | | | Fail: eligible_for_revaccination(person_a7)
| | | | | Redo: claim.claimant(claim_a7,V1301)
| | | | | Fail: claim.claimant(claim_a7,V1301)
| | | | Fail: age_range_limit_hepb(claim_a7,V1297,0,0)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_08_2023,V1286)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_08_2023,V1275)
| | | | Redo: claim.hosp_start_time(claim_a7,V1273,V1274)
| | | | Fail: claim.hosp_start_time(claim_a7,V1273,V1274)
| | | | Redo: person.dob(person_a7,V1272)
| | | | Fail: person.dob(person_a7,V1272)
| | | | Redo: claim.claimant(claim_a7,V1271)
| | | | Fail: claim.claimant(claim_a7,V1271)
| | | | Redo: claim.vaccine(claim_a7,hep_b)
| | | | Fail: claim.vaccine(claim_a7,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a7,V1270)
| | | | Fail: claim.location(claim_a7,V1270)
| | | | Call: claim.location(claim_a7,V1302)
| | | | Exit: claim.location(claim_a7,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a7,covid)
| | | | Fail: claim.vaccine(claim_a7,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a7,V1302)
| | | | Fail: claim.location(claim_a7,V1302)
| | | | Call: claim.location(claim_a7,V1303)
| | | | Exit: claim.location(claim_a7,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a7,flu)
| | | | Fail: claim.vaccine(claim_a7,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a7,V1303)
| | | | Fail: claim.location(claim_a7,V1303)
| | | Fail: eligible_service(claim_a7,policy1,preventive_care)
| | | Redo: claim.reason(claim_a7,V1262)
| | | Fail: claim.reason(claim_a7,V1262)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a7,V1261)
| | | Fail: claim.hospital(claim_a7,V1261)
| | | Call: claim.reason(claim_a7,emergency_room)
| | | Fail: claim.reason(claim_a7,emergency_room)
| | Fail: valid_hospitalization(claim_a7,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1257)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1253)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1249)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1245)
| | | Redo: policy.enddate(policy1,person_a7,V1244)
| | | Fail: policy.enddate(policy1,person_a7,V1244)
| | | Redo: policy.startdate(policy1,person_a7,V1243)
| | | Fail: policy.startdate(policy1,person_a7,V1243)
| | | Redo: claim.hosp_end_time(claim_a7,V1241,V1242)
| | | Fail: claim.hosp_end_time(claim_a7,V1241,V1242)
| | | Redo: claim.hosp_start_time(claim_a7,V1239,V1240)
| | | Fail: claim.hosp_start_time(claim_a7,V1239,V1240)
| | | Redo: claim.claimant(claim_a7,V1238)
| | | Fail: claim.claimant(claim_a7,V1238)
| | Fail: policy_active(claim_a7,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a7)
| | | Fail: policy.insuree(policy1,person_a7)
| | | Redo: claim.claimant(claim_a7,V1237)
| | | Fail: claim.claimant(claim_a7,V1237)
| | Fail: valid_insuree(claim_a7,policy1)
| Fail: covered_under_policy(claim_a7,policy1,cardinal)
| Redo: policy.type(policy1,V1032)
| Fail: policy.type(policy1,V1032)
| Redo: claim.policy(X,V1031)
| Exit: claim.policy(claim_a8,policy1)
| Call: policy.type(policy1,V1032)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a8,policy1,cardinal)
| | Call: valid_insuree(claim_a8,policy1)
| | | Call: claim.claimant(claim_a8,V1304)
| | | Exit: claim.claimant(claim_a8,person_a8)
| | | Call: policy.insuree(policy1,person_a8)
| | | Exit: policy.insuree(policy1,person_a8)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a8,policy1)
| | | Call: claim.claimant(claim_a8,V1305)
| | | Exit: claim.claimant(claim_a8,person_a8)
| | | Call: claim.hosp_start_time(claim_a8,V1306,V1307)
| | | Exit: claim.hosp_start_time(claim_a8,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a8,V1308,V1309)
| | | Exit: claim.hosp_end_time(claim_a8,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a8,V1310)
| | | Exit: policy.startdate(policy1,person_a8,01_08_2023)
| | | Call: policy.enddate(policy1,person_a8,V1311)
| | | Exit: policy.enddate(policy1,person_a8,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1312)
| | | | Call: evaluate(parsedate(03_09_2023),[V1313,V1314,V1315])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1312)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1316)
| | | | Call: evaluate(parsedate(03_09_2023),[V1317,V1318,V1319])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1316)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1320)
| | | | Call: evaluate(parsedate(30_06_2024),[V1321,V1322,V1323])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1320)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1324)
| | | | Call: evaluate(parsedate(01_08_2023),[V1325,V1326,V1327])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1324)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a8,policy1)
| | | Call: claim.hospital(claim_a8,V1328)
| | | Exit: claim.hospital(claim_a8,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a8,V1329)
| | | Exit: claim.reason(claim_a8,preventive_care)
| | | Call: eligible_service(claim_a8,policy1,preventive_care)
| | | | Call: check_policy_year_limit(claim_a8,preventive_care)
| | | | | Call: claim.claimant(claim_a8,V1330)
| | | | | Exit: claim.claimant(claim_a8,person_a8)
| | | | | Call: person.dob(person_a8,V1331)
| | | | | Exit: person.dob(person_a8,04_08_2023)
| | | | | Call: claim.time(claim_a8,V1332,V1333)
| | | | | Fail: claim.time(claim_a8,V1332,V1333)
| | | | | Redo: person.dob(person_a8,V1331)
| | | | | Fail: person.dob(person_a8,V1331)
| | | | | Redo: claim.claimant(claim_a8,V1330)
| | | | | Fail: claim.claimant(claim_a8,V1330)
| | | | Fail: check_policy_year_limit(claim_a8,preventive_care)
| | | | Call: covered_list_with_location(V1334)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(preventive_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1334)
| | | | Fail: covered_list_with_location(V1334)
| | | | Call: covered_list_with_service_provider(V1335)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(preventive_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1335)
| | | | Fail: covered_list_with_service_provider(V1335)
| | | | Call: covered_list(V1336)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(preventive_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1336)
| | | | Fail: covered_list(V1336)
| | | | Call: claim.location(claim_a8,V1337)
| | | | Exit: claim.location(claim_a8,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a8,hep_b)
| | | | Exit: claim.vaccine(claim_a8,hep_b)
| | | | Call: claim.claimant(claim_a8,V1338)
| | | | Exit: claim.claimant(claim_a8,person_a8)
| | | | Call: person.dob(person_a8,V1339)
| | | | Exit: person.dob(person_a8,04_08_2023)
| | | | Call: claim.hosp_start_time(claim_a8,V1340,V1341)
| | | | Exit: claim.hosp_start_time(claim_a8,03_09_2023,00_00)
| | | | Call: get_date_diff(03_09_2023,04_08_2023,V1342)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1343,V1344,V1345])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1346,V1347,V1348])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1349)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1350)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1351)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(31,1),-1),V1352)
| | | | | Exit: evaluate(plus(imul(31,1),-1),30)
| | | | | Call: evaluate(plus(0,if(leq(30,-1),-1,true,0)),V1342)
| | | | | Exit: evaluate(plus(0,if(leq(30,-1),-1,true,0)),0)
| | | | Exit: get_date_diff(C_D,DOB,Y)
| | | | Call: get_date_diff_in_months(03_09_2023,04_08_2023,V1353)
| | | | | Call: evaluate(parsedate(03_09_2023),[V1354,V1355,V1356])
| | | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | | Call: evaluate(parsedate(04_08_2023),[V1357,V1358,V1359])
| | | | | Exit: evaluate(parsedate(04_08_2023),[04,08,2023])
| | | | | Call: evaluate(minus(2023,2023),V1360)
| | | | | Exit: evaluate(minus(2023,2023),0)
| | | | | Call: evaluate(minus(09,08),V1361)
| | | | | Exit: evaluate(minus(09,08),1)
| | | | | Call: evaluate(minus(03,04),V1362)
| | | | | Exit: evaluate(minus(03,04),-1)
| | | | | Call: evaluate(plus(imul(12,0),1),V1363)
| | | | | Exit: evaluate(plus(imul(12,0),1),1)
| | | | | Call: evaluate(if(leq(-1,-1),minus(1,1),true,1),V1353)
| | | | | Exit: evaluate(if(leq(-1,-1),minus(1,1),true,1),0)
| | | | Exit: get_date_diff_in_months(C_D,DOB,M)
| | | | Call: age_range_limit_hepb(claim_a8,V1364,0,0)
| | | | Exit: age_range_limit_hepb(C,1,Y,0)
| | | | Call: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Exit: claim.vaccine_dose_count(claim_a8,8)
| | | | Call: leq(8,1)
| | | | Fail: leq(8,1)
| | | | Redo: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Fail: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Redo: age_range_limit_hepb(claim_a8,V1364,0,0)
| | | | | Call: leq(2,0)
| | | | | Fail: leq(2,0)
| | | | | Call: leq(6,0)
| | | | | Fail: leq(6,0)
| | | | | Call: leq(19,0)
| | | | | Fail: leq(19,0)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: mother_hbsag_positive_unknown(claim_a8)
| | | | | | Call: claim.mother_hbsag(claim_a8,positive)
| | | | | | Fail: claim.mother_hbsag(claim_a8,positive)
| | | | | | Call: claim.mother_hbsag(V1366,unknown)
| | | | | | Fail: claim.mother_hbsag(V1366,unknown)
| | | | | Fail: mother_hbsag_positive_unknown(claim_a8)
| | | | | Call: leq(0,2)
| | | | | Exit: leq(0,2)
| | | | | Call: claim.birth_weight(claim_a8,V1367)
| | | | | Exit: claim.birth_weight(claim_a8,1999)
| | | | | Call: leq(1999,2000)
| | | | | Exit: leq(1999,2000)
| | | | | Call: claim.anti_hbs_count(claim_a8,V1368)
| | | | | Exit: claim.anti_hbs_count(claim_a8,9)
| | | | | Call: leq(9,10)
| | | | | Exit: leq(9,10)
| | | | Exit: age_range_limit_hepb(C,N,Y,M)
| | | | Call: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Exit: claim.vaccine_dose_count(claim_a8,8)
| | | | Call: leq(8,7)
| | | | Fail: leq(8,7)
| | | | Redo: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Fail: claim.vaccine_dose_count(claim_a8,V1365)
| | | | Redo: age_range_limit_hepb(C,N,Y,M)
| | | | | Redo: claim.anti_hbs_count(claim_a8,V1368)
| | | | | Fail: claim.anti_hbs_count(claim_a8,V1368)
| | | | | Redo: claim.birth_weight(claim_a8,V1367)
| | | | | Fail: claim.birth_weight(claim_a8,V1367)
| | | | | Call: claim.claimant(claim_a8,V1369)
| | | | | Exit: claim.claimant(claim_a8,person_a8)
| | | | | Call: eligible_for_revaccination(person_a8)
| | | | | | Call: person.occupation(person_a8,healthcare_worker)
| | | | | | Fail: person.occupation(person_a8,healthcare_worker)
| | | | | | Call: person.condition(person_a8,immunocompromised)
| | | | | | Fail: person.condition(person_a8,immunocompromised)
| | | | | | Call: person.condition(person_a8,hemodialysis_patient)
| | | | | | Fail: person.condition(person_a8,hemodialysis_patient)
| | | | | Fail: eligible_for_revaccination(person_a8)
| | | | | Redo: claim.claimant(claim_a8,V1369)
| | | | | Fail: claim.claimant(claim_a8,V1369)
| | | | Fail: age_range_limit_hepb(claim_a8,V1364,0,0)
| | | | Redo: get_date_diff_in_months(C_D,DOB,M)
| | | | Fail: get_date_diff_in_months(03_09_2023,04_08_2023,V1353)
| | | | Redo: get_date_diff(C_D,DOB,Y)
| | | | Fail: get_date_diff(03_09_2023,04_08_2023,V1342)
| | | | Redo: claim.hosp_start_time(claim_a8,V1340,V1341)
| | | | Fail: claim.hosp_start_time(claim_a8,V1340,V1341)
| | | | Redo: person.dob(person_a8,V1339)
| | | | Fail: person.dob(person_a8,V1339)
| | | | Redo: claim.claimant(claim_a8,V1338)
| | | | Fail: claim.claimant(claim_a8,V1338)
| | | | Redo: claim.vaccine(claim_a8,hep_b)
| | | | Fail: claim.vaccine(claim_a8,hep_b)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a8,V1337)
| | | | Fail: claim.location(claim_a8,V1337)
| | | | Call: claim.location(claim_a8,V1370)
| | | | Exit: claim.location(claim_a8,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a8,covid)
| | | | Fail: claim.vaccine(claim_a8,covid)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a8,V1370)
| | | | Fail: claim.location(claim_a8,V1370)
| | | | Call: claim.location(claim_a8,V1371)
| | | | Exit: claim.location(claim_a8,phys_office)
| | | | Call: valid_location(preventive_care,phys_office)
| | | | Exit: valid_location(preventive_care,phys_office)
| | | | Call: claim.vaccine(claim_a8,flu)
| | | | Fail: claim.vaccine(claim_a8,flu)
| | | | Redo: valid_location(preventive_care,phys_office)
| | | | Fail: valid_location(preventive_care,phys_office)
| | | | Redo: claim.location(claim_a8,V1371)
| | | | Fail: claim.location(claim_a8,V1371)
| | | Fail: eligible_service(claim_a8,policy1,preventive_care)
| | | Redo: claim.reason(claim_a8,V1329)
| | | Fail: claim.reason(claim_a8,V1329)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a8,V1328)
| | | Fail: claim.hospital(claim_a8,V1328)
| | | Call: claim.reason(claim_a8,emergency_room)
| | | Fail: claim.reason(claim_a8,emergency_room)
| | Fail: valid_hospitalization(claim_a8,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1324)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1320)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1316)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1312)
| | | Redo: policy.enddate(policy1,person_a8,V1311)
| | | Fail: policy.enddate(policy1,person_a8,V1311)
| | | Redo: policy.startdate(policy1,person_a8,V1310)
| | | Fail: policy.startdate(policy1,person_a8,V1310)
| | | Redo: claim.hosp_end_time(claim_a8,V1308,V1309)
| | | Fail: claim.hosp_end_time(claim_a8,V1308,V1309)
| | | Redo: claim.hosp_start_time(claim_a8,V1306,V1307)
| | | Fail: claim.hosp_start_time(claim_a8,V1306,V1307)
| | | Redo: claim.claimant(claim_a8,V1305)
| | | Fail: claim.claimant(claim_a8,V1305)
| | Fail: policy_active(claim_a8,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a8)
| | | Fail: policy.insuree(policy1,person_a8)
| | | Redo: claim.claimant(claim_a8,V1304)
| | | Fail: claim.claimant(claim_a8,V1304)
| | Fail: valid_insuree(claim_a8,policy1)
| Fail: covered_under_policy(claim_a8,policy1,cardinal)
| Redo: policy.type(policy1,V1032)
| Fail: policy.type(policy1,V1032)
| Redo: claim.policy(X,V1031)
| Fail: claim.policy(X,V1031)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_hepb.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim_a4', 'claim_a6' ]
RESULTS: [ 'claim_a4', 'claim_a6' ]
===== TEST SUCCEEDED: Test test_cases_hepb.hdf===== 
Expected Result:  [ 'claim8' ]
Call: covered(X)
| Call: claim.policy(X,V1372)
| Exit: claim.policy(claim8,policy1)
| Call: policy.type(policy1,V1373)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim8,policy1,cardinal)
| | Call: valid_insuree(claim8,policy1)
| | | Call: claim.claimant(claim8,V1374)
| | | Exit: claim.claimant(claim8,person5)
| | | Call: policy.insuree(policy1,person5)
| | | Exit: policy.insuree(policy1,person5)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim8,policy1)
| | | Call: claim.claimant(claim8,V1375)
| | | Exit: claim.claimant(claim8,person5)
| | | Call: claim.hosp_start_time(claim8,V1376,V1377)
| | | Exit: claim.hosp_start_time(claim8,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim8,V1378,V1379)
| | | Exit: claim.hosp_end_time(claim8,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person5,V1380)
| | | Exit: policy.startdate(policy1,person5,01_08_2023)
| | | Call: policy.enddate(policy1,person5,V1381)
| | | Exit: policy.enddate(policy1,person5,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1382)
| | | | Call: evaluate(parsedate(02_09_2023),[V1383,V1384,V1385])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1382)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1386)
| | | | Call: evaluate(parsedate(02_09_2023),[V1387,V1388,V1389])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1386)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1390)
| | | | Call: evaluate(parsedate(30_06_2024),[V1391,V1392,V1393])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1390)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1394)
| | | | Call: evaluate(parsedate(01_08_2023),[V1395,V1396,V1397])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1394)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim8,policy1)
| | | Call: claim.hospital(claim8,V1398)
| | | Exit: claim.hospital(claim8,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim8,V1399)
| | | Exit: claim.reason(claim8,home_health_care)
| | | Call: eligible_service(claim8,policy1,home_health_care)
| | | | Call: check_policy_year_limit(claim8,home_health_care)
| | | | | Call: claim.claimant(claim8,V1400)
| | | | | Exit: claim.claimant(claim8,person5)
| | | | | Call: person.dob(person5,V1401)
| | | | | Exit: person.dob(person5,01_01_2007)
| | | | | Call: claim.time(claim8,V1402,V1403)
| | | | | Exit: claim.time(claim8,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2007,V1404)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V1405,V1406,V1407])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2007),[V1408,V1409,V1410])
| | | | | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | | | | Call: evaluate(minus(2024,2007),V1411)
| | | | | | Exit: evaluate(minus(2024,2007),17)
| | | | | | Call: evaluate(minus(02,01),V1412)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V1413)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V1414)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1404)
| | | | | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(home_health_care,17,V1415)
| | | | | | Call: yearly_visit_limit(home_health_care,V1416,V1417,V1415)
| | | | | | Exit: yearly_visit_limit(home_health_care,0,200,100)
| | | | | | Call: evaluate(minus(200,1),V1418)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(17,199)
| | | | | | Exit: leq(17,199)
| | | | | | Call: leq(0,17)
| | | | | | Exit: leq(0,17)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V1419,visit_current_year(home_health_care,claim8,V1419)),1),V1420)
| | | | | Exit: evaluate(plus(countofall(V1422,visit_current_year(home_health_care,claim8,V1422)),1),1)
| | | | | Call: leq(1,100)
| | | | | Exit: leq(1,100)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim8,V1423)
| | | | Exit: claim.location(claim8,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim8,policy1)
Call: exception(claim8,policy1)
| Call: claim.claimant(claim8,V1424)
| Exit: claim.claimant(claim8,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim8,V1424)
| Fail: claim.claimant(claim8,V1424)
| Call: claim.reason(claim8,home_health_care)
| Exit: claim.reason(claim8,home_health_care)
| Call: home_not_covered_list(V1425)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim8,V1426)
| Exit: claim.home_service(claim8,other)
| Call: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Fail: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Redo: claim.home_service(claim8,V1426)
| Fail: claim.home_service(claim8,V1426)
| Redo: home_not_covered_list(V1425)
| Fail: home_not_covered_list(V1425)
| Redo: claim.reason(claim8,home_health_care)
| Fail: claim.reason(claim8,home_health_care)
| Call: claim.reason(claim8,home_health_care)
| Exit: claim.reason(claim8,home_health_care)
| Call: claim.claimant(claim8,V1427)
| Exit: claim.claimant(claim8,person5)
| Call: minor_or_dependent(claim8,person5)
| | Call: person.dependent(person5,yes)
| | Fail: person.dependent(person5,yes)
| | Call: person.dob(person5,V1428)
| | Exit: person.dob(person5,01_01_2007)
| | Call: claim.time(claim8,V1429,V1430)
| | Exit: claim.time(claim8,01_02_2024,00_00)
| | Call: get_date_diff(01_02_2024,01_01_2007,V1431)
| | | Call: evaluate(parsedate(01_02_2024),[V1432,V1433,V1434])
| | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | Call: evaluate(parsedate(01_01_2007),[V1435,V1436,V1437])
| | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | Call: evaluate(minus(2024,2007),V1438)
| | | Exit: evaluate(minus(2024,2007),17)
| | | Call: evaluate(minus(02,01),V1439)
| | | Exit: evaluate(minus(02,01),1)
| | | Call: evaluate(minus(01,01),V1440)
| | | Exit: evaluate(minus(01,01),0)
| | | Call: evaluate(plus(imul(31,1),0),V1441)
| | | Exit: evaluate(plus(imul(31,1),0),31)
| | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1431)
| | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | Exit: get_date_diff(C_D,DOB,Age)
| | Call: leq(17,17)
| | Exit: leq(17,17)
| Exit: minor_or_dependent(C,Cl)
| Call: claim.family_member_present(claim8,no)
| Fail: claim.family_member_present(claim8,no)
| Redo: minor_or_dependent(C,Cl)
| | Redo: get_date_diff(C_D,DOB,Age)
| | Fail: get_date_diff(01_02_2024,01_01_2007,V1431)
| | Redo: claim.time(claim8,V1429,V1430)
| | Fail: claim.time(claim8,V1429,V1430)
| | Redo: person.dob(person5,V1428)
| | Fail: person.dob(person5,V1428)
| Fail: minor_or_dependent(claim8,person5)
| Redo: claim.claimant(claim8,V1427)
| Fail: claim.claimant(claim8,V1427)
| Redo: claim.reason(claim8,home_health_care)
| Fail: claim.reason(claim8,home_health_care)
Fail: exception(claim8,policy1)
| | | Exit: ~exception(claim8,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim8)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim8,V1423)
| | | | Fail: claim.location(claim8,V1423)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(home_health_care,V1416,V1417,V1415)
| | | | | | Fail: yearly_visit_limit(home_health_care,V1416,V1417,V1415)
| | | | | Fail: yearly_visit_limit(home_health_care,17,V1415)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2007,V1404)
| | | | | Redo: claim.time(claim8,V1402,V1403)
| | | | | Fail: claim.time(claim8,V1402,V1403)
| | | | | Redo: person.dob(person5,V1401)
| | | | | Fail: person.dob(person5,V1401)
| | | | | Redo: claim.claimant(claim8,V1400)
| | | | | Fail: claim.claimant(claim8,V1400)
| | | | Fail: check_policy_year_limit(claim8,home_health_care)
| | | | Call: covered_list_with_location(V1442)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim8,V1443)
| | | | Exit: claim.location(claim8,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim8,policy1)
Call: exception(claim8,policy1)
| Call: claim.claimant(claim8,V1444)
| Exit: claim.claimant(claim8,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim8,V1444)
| Fail: claim.claimant(claim8,V1444)
| Call: claim.reason(claim8,home_health_care)
| Exit: claim.reason(claim8,home_health_care)
| Call: home_not_covered_list(V1445)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim8,V1446)
| Exit: claim.home_service(claim8,other)
| Call: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Fail: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Redo: claim.home_service(claim8,V1446)
| Fail: claim.home_service(claim8,V1446)
| Redo: home_not_covered_list(V1445)
| Fail: home_not_covered_list(V1445)
| Redo: claim.reason(claim8,home_health_care)
| Fail: claim.reason(claim8,home_health_care)
| Call: claim.reason(claim8,home_health_care)
| Exit: claim.reason(claim8,home_health_care)
| Call: claim.claimant(claim8,V1447)
| Exit: claim.claimant(claim8,person5)
| Call: minor_or_dependent(claim8,person5)
| | Call: person.dependent(person5,yes)
| | Fail: person.dependent(person5,yes)
| | Call: person.dob(person5,V1448)
| | Exit: person.dob(person5,01_01_2007)
| | Call: claim.time(claim8,V1449,V1450)
| | Exit: claim.time(claim8,01_02_2024,00_00)
| | Call: get_date_diff(01_02_2024,01_01_2007,V1451)
| | | Call: evaluate(parsedate(01_02_2024),[V1452,V1453,V1454])
| | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | Call: evaluate(parsedate(01_01_2007),[V1455,V1456,V1457])
| | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | Call: evaluate(minus(2024,2007),V1458)
| | | Exit: evaluate(minus(2024,2007),17)
| | | Call: evaluate(minus(02,01),V1459)
| | | Exit: evaluate(minus(02,01),1)
| | | Call: evaluate(minus(01,01),V1460)
| | | Exit: evaluate(minus(01,01),0)
| | | Call: evaluate(plus(imul(31,1),0),V1461)
| | | Exit: evaluate(plus(imul(31,1),0),31)
| | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1451)
| | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | Exit: get_date_diff(C_D,DOB,Age)
| | Call: leq(17,17)
| | Exit: leq(17,17)
| Exit: minor_or_dependent(C,Cl)
| Call: claim.family_member_present(claim8,no)
| Fail: claim.family_member_present(claim8,no)
| Redo: minor_or_dependent(C,Cl)
| | Redo: get_date_diff(C_D,DOB,Age)
| | Fail: get_date_diff(01_02_2024,01_01_2007,V1451)
| | Redo: claim.time(claim8,V1449,V1450)
| | Fail: claim.time(claim8,V1449,V1450)
| | Redo: person.dob(person5,V1448)
| | Fail: person.dob(person5,V1448)
| Fail: minor_or_dependent(claim8,person5)
| Redo: claim.claimant(claim8,V1447)
| Fail: claim.claimant(claim8,V1447)
| Redo: claim.reason(claim8,home_health_care)
| Fail: claim.reason(claim8,home_health_care)
Fail: exception(claim8,policy1)
| | | Exit: ~exception(claim8,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim8)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim8,V1443)
| | | | Fail: claim.location(claim8,V1443)
| | | | Redo: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1442)
| | | | Fail: covered_list_with_location(V1442)
| | | | Call: covered_list_with_service_provider(V1462)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1462)
| | | | Fail: covered_list_with_service_provider(V1462)
| | | | Call: covered_list(V1463)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1463)
| | | | Fail: covered_list(V1463)
| | | Fail: eligible_service(claim8,policy1,home_health_care)
| | | Redo: claim.reason(claim8,V1399)
| | | Fail: claim.reason(claim8,V1399)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim8,V1398)
| | | Fail: claim.hospital(claim8,V1398)
| | | Call: claim.reason(claim8,emergency_room)
| | | Fail: claim.reason(claim8,emergency_room)
| | Fail: valid_hospitalization(claim8,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1394)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1390)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1386)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1382)
| | | Redo: policy.enddate(policy1,person5,V1381)
| | | Fail: policy.enddate(policy1,person5,V1381)
| | | Redo: policy.startdate(policy1,person5,V1380)
| | | Fail: policy.startdate(policy1,person5,V1380)
| | | Redo: claim.hosp_end_time(claim8,V1378,V1379)
| | | Fail: claim.hosp_end_time(claim8,V1378,V1379)
| | | Redo: claim.hosp_start_time(claim8,V1376,V1377)
| | | Fail: claim.hosp_start_time(claim8,V1376,V1377)
| | | Redo: claim.claimant(claim8,V1375)
| | | Fail: claim.claimant(claim8,V1375)
| | Fail: policy_active(claim8,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person5)
| | | Fail: policy.insuree(policy1,person5)
| | | Redo: claim.claimant(claim8,V1374)
| | | Fail: claim.claimant(claim8,V1374)
| | Fail: valid_insuree(claim8,policy1)
| Fail: covered_under_policy(claim8,policy1,cardinal)
| Redo: policy.type(policy1,V1373)
| Fail: policy.type(policy1,V1373)
| Redo: claim.policy(X,V1372)
| Exit: claim.policy(claim9,policy1)
| Call: policy.type(policy1,V1373)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim9,policy1,cardinal)
| | Call: valid_insuree(claim9,policy1)
| | | Call: claim.claimant(claim9,V1464)
| | | Exit: claim.claimant(claim9,person5)
| | | Call: policy.insuree(policy1,person5)
| | | Exit: policy.insuree(policy1,person5)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim9,policy1)
| | | Call: claim.claimant(claim9,V1465)
| | | Exit: claim.claimant(claim9,person5)
| | | Call: claim.hosp_start_time(claim9,V1466,V1467)
| | | Exit: claim.hosp_start_time(claim9,02_08_2023,00_00)
| | | Call: claim.hosp_end_time(claim9,V1468,V1469)
| | | Exit: claim.hosp_end_time(claim9,02_08_2023,01_13)
| | | Call: policy.startdate(policy1,person5,V1470)
| | | Exit: policy.startdate(policy1,person5,01_08_2023)
| | | Call: policy.enddate(policy1,person5,V1471)
| | | Exit: policy.enddate(policy1,person5,30_06_2024)
| | | Call: get_timestamp_from_date(02_08_2023,V1472)
| | | | Call: evaluate(parsedate(02_08_2023),[V1473,V1474,V1475])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V1472)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_08_2023,V1476)
| | | | Call: evaluate(parsedate(02_08_2023),[V1477,V1478,V1479])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V1476)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1480)
| | | | Call: evaluate(parsedate(30_06_2024),[V1481,V1482,V1483])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1480)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1484)
| | | | Call: evaluate(parsedate(01_08_2023),[V1485,V1486,V1487])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1484)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1690959600000)
| | | Exit: leq(1690873200000,1690959600000)
| | | Call: leq(1690959600000,1719730800000)
| | | Exit: leq(1690959600000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim9,policy1)
| | | Call: claim.hospital(claim9,V1488)
| | | Exit: claim.hospital(claim9,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim9,V1489)
| | | Exit: claim.reason(claim9,home_health_care)
| | | Call: eligible_service(claim9,policy1,home_health_care)
| | | | Call: check_policy_year_limit(claim9,home_health_care)
| | | | | Call: claim.claimant(claim9,V1490)
| | | | | Exit: claim.claimant(claim9,person5)
| | | | | Call: person.dob(person5,V1491)
| | | | | Exit: person.dob(person5,01_01_2007)
| | | | | Call: claim.time(claim9,V1492,V1493)
| | | | | Exit: claim.time(claim9,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2007,V1494)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V1495,V1496,V1497])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2007),[V1498,V1499,V1500])
| | | | | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | | | | Call: evaluate(minus(2024,2007),V1501)
| | | | | | Exit: evaluate(minus(2024,2007),17)
| | | | | | Call: evaluate(minus(02,01),V1502)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V1503)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V1504)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1494)
| | | | | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(home_health_care,17,V1505)
| | | | | | Call: yearly_visit_limit(home_health_care,V1506,V1507,V1505)
| | | | | | Exit: yearly_visit_limit(home_health_care,0,200,100)
| | | | | | Call: evaluate(minus(200,1),V1508)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(17,199)
| | | | | | Exit: leq(17,199)
| | | | | | Call: leq(0,17)
| | | | | | Exit: leq(0,17)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V1509,visit_current_year(home_health_care,claim9,V1509)),1),V1510)
| | | | | Exit: evaluate(plus(countofall(V1512,visit_current_year(home_health_care,claim9,V1512)),1),1)
| | | | | Call: leq(1,100)
| | | | | Exit: leq(1,100)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim9,V1513)
| | | | Exit: claim.location(claim9,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim9,policy1)
Call: exception(claim9,policy1)
| Call: claim.claimant(claim9,V1514)
| Exit: claim.claimant(claim9,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim9,V1514)
| Fail: claim.claimant(claim9,V1514)
| Call: claim.reason(claim9,home_health_care)
| Exit: claim.reason(claim9,home_health_care)
| Call: home_not_covered_list(V1515)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim9,V1516)
| Exit: claim.home_service(claim9,transportation)
| Call: member(transportation,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Exit: member(transportation,[transportation,homemaker_service,home_delivery,maintenance_therapy])
Exit: exception(C,P)
| | | Fail: ~exception(claim9,policy1)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim9,V1513)
| | | | Fail: claim.location(claim9,V1513)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(home_health_care,V1506,V1507,V1505)
| | | | | | Fail: yearly_visit_limit(home_health_care,V1506,V1507,V1505)
| | | | | Fail: yearly_visit_limit(home_health_care,17,V1505)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2007,V1494)
| | | | | Redo: claim.time(claim9,V1492,V1493)
| | | | | Fail: claim.time(claim9,V1492,V1493)
| | | | | Redo: person.dob(person5,V1491)
| | | | | Fail: person.dob(person5,V1491)
| | | | | Redo: claim.claimant(claim9,V1490)
| | | | | Fail: claim.claimant(claim9,V1490)
| | | | Fail: check_policy_year_limit(claim9,home_health_care)
| | | | Call: covered_list_with_location(V1517)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim9,V1518)
| | | | Exit: claim.location(claim9,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim9,policy1)
Call: exception(claim9,policy1)
| Call: claim.claimant(claim9,V1519)
| Exit: claim.claimant(claim9,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim9,V1519)
| Fail: claim.claimant(claim9,V1519)
| Call: claim.reason(claim9,home_health_care)
| Exit: claim.reason(claim9,home_health_care)
| Call: home_not_covered_list(V1520)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim9,V1521)
| Exit: claim.home_service(claim9,transportation)
| Call: member(transportation,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Exit: member(transportation,[transportation,homemaker_service,home_delivery,maintenance_therapy])
Exit: exception(C,P)
| | | Fail: ~exception(claim9,policy1)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim9,V1518)
| | | | Fail: claim.location(claim9,V1518)
| | | | Redo: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1517)
| | | | Fail: covered_list_with_location(V1517)
| | | | Call: covered_list_with_service_provider(V1522)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1522)
| | | | Fail: covered_list_with_service_provider(V1522)
| | | | Call: covered_list(V1523)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1523)
| | | | Fail: covered_list(V1523)
| | | Fail: eligible_service(claim9,policy1,home_health_care)
| | | Redo: claim.reason(claim9,V1489)
| | | Fail: claim.reason(claim9,V1489)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim9,V1488)
| | | Fail: claim.hospital(claim9,V1488)
| | | Call: claim.reason(claim9,emergency_room)
| | | Fail: claim.reason(claim9,emergency_room)
| | Fail: valid_hospitalization(claim9,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1484)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1480)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V1476)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V1472)
| | | Redo: policy.enddate(policy1,person5,V1471)
| | | Fail: policy.enddate(policy1,person5,V1471)
| | | Redo: policy.startdate(policy1,person5,V1470)
| | | Fail: policy.startdate(policy1,person5,V1470)
| | | Redo: claim.hosp_end_time(claim9,V1468,V1469)
| | | Fail: claim.hosp_end_time(claim9,V1468,V1469)
| | | Redo: claim.hosp_start_time(claim9,V1466,V1467)
| | | Fail: claim.hosp_start_time(claim9,V1466,V1467)
| | | Redo: claim.claimant(claim9,V1465)
| | | Fail: claim.claimant(claim9,V1465)
| | Fail: policy_active(claim9,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person5)
| | | Fail: policy.insuree(policy1,person5)
| | | Redo: claim.claimant(claim9,V1464)
| | | Fail: claim.claimant(claim9,V1464)
| | Fail: valid_insuree(claim9,policy1)
| Fail: covered_under_policy(claim9,policy1,cardinal)
| Redo: policy.type(policy1,V1373)
| Fail: policy.type(policy1,V1373)
| Redo: claim.policy(X,V1372)
| Exit: claim.policy(claim10,policy1)
| Call: policy.type(policy1,V1373)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim10,policy1,cardinal)
| | Call: valid_insuree(claim10,policy1)
| | | Call: claim.claimant(claim10,V1524)
| | | Exit: claim.claimant(claim10,person5)
| | | Call: policy.insuree(policy1,person5)
| | | Exit: policy.insuree(policy1,person5)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim10,policy1)
| | | Call: claim.claimant(claim10,V1525)
| | | Exit: claim.claimant(claim10,person5)
| | | Call: claim.hosp_start_time(claim10,V1526,V1527)
| | | Exit: claim.hosp_start_time(claim10,02_08_2023,00_00)
| | | Call: claim.hosp_end_time(claim10,V1528,V1529)
| | | Exit: claim.hosp_end_time(claim10,02_08_2023,01_13)
| | | Call: policy.startdate(policy1,person5,V1530)
| | | Exit: policy.startdate(policy1,person5,01_08_2023)
| | | Call: policy.enddate(policy1,person5,V1531)
| | | Exit: policy.enddate(policy1,person5,30_06_2024)
| | | Call: get_timestamp_from_date(02_08_2023,V1532)
| | | | Call: evaluate(parsedate(02_08_2023),[V1533,V1534,V1535])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V1532)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_08_2023,V1536)
| | | | Call: evaluate(parsedate(02_08_2023),[V1537,V1538,V1539])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V1536)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1540)
| | | | Call: evaluate(parsedate(30_06_2024),[V1541,V1542,V1543])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1540)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1544)
| | | | Call: evaluate(parsedate(01_08_2023),[V1545,V1546,V1547])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1544)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1690959600000)
| | | Exit: leq(1690873200000,1690959600000)
| | | Call: leq(1690959600000,1719730800000)
| | | Exit: leq(1690959600000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim10,policy1)
| | | Call: claim.hospital(claim10,V1548)
| | | Exit: claim.hospital(claim10,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim10,V1549)
| | | Exit: claim.reason(claim10,home_health_care)
| | | Call: eligible_service(claim10,policy1,home_health_care)
| | | | Call: check_policy_year_limit(claim10,home_health_care)
| | | | | Call: claim.claimant(claim10,V1550)
| | | | | Exit: claim.claimant(claim10,person5)
| | | | | Call: person.dob(person5,V1551)
| | | | | Exit: person.dob(person5,01_01_2007)
| | | | | Call: claim.time(claim10,V1552,V1553)
| | | | | Exit: claim.time(claim10,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2007,V1554)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V1555,V1556,V1557])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2007),[V1558,V1559,V1560])
| | | | | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | | | | Call: evaluate(minus(2024,2007),V1561)
| | | | | | Exit: evaluate(minus(2024,2007),17)
| | | | | | Call: evaluate(minus(02,01),V1562)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V1563)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V1564)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1554)
| | | | | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(home_health_care,17,V1565)
| | | | | | Call: yearly_visit_limit(home_health_care,V1566,V1567,V1565)
| | | | | | Exit: yearly_visit_limit(home_health_care,0,200,100)
| | | | | | Call: evaluate(minus(200,1),V1568)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(17,199)
| | | | | | Exit: leq(17,199)
| | | | | | Call: leq(0,17)
| | | | | | Exit: leq(0,17)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V1569,visit_current_year(home_health_care,claim10,V1569)),1),V1570)
| | | | | Exit: evaluate(plus(countofall(V1572,visit_current_year(home_health_care,claim10,V1572)),1),1)
| | | | | Call: leq(1,100)
| | | | | Exit: leq(1,100)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim10,V1573)
| | | | Exit: claim.location(claim10,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim10,policy1)
Call: exception(claim10,policy1)
| Call: claim.claimant(claim10,V1574)
| Exit: claim.claimant(claim10,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim10,V1574)
| Fail: claim.claimant(claim10,V1574)
| Call: claim.reason(claim10,home_health_care)
| Exit: claim.reason(claim10,home_health_care)
| Call: home_not_covered_list(V1575)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim10,V1576)
| Exit: claim.home_service(claim10,other)
| Call: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Fail: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Redo: claim.home_service(claim10,V1576)
| Fail: claim.home_service(claim10,V1576)
| Redo: home_not_covered_list(V1575)
| Fail: home_not_covered_list(V1575)
| Redo: claim.reason(claim10,home_health_care)
| Fail: claim.reason(claim10,home_health_care)
| Call: claim.reason(claim10,home_health_care)
| Exit: claim.reason(claim10,home_health_care)
| Call: claim.claimant(claim10,V1577)
| Exit: claim.claimant(claim10,person5)
| Call: minor_or_dependent(claim10,person5)
| | Call: person.dependent(person5,yes)
| | Fail: person.dependent(person5,yes)
| | Call: person.dob(person5,V1578)
| | Exit: person.dob(person5,01_01_2007)
| | Call: claim.time(claim10,V1579,V1580)
| | Exit: claim.time(claim10,01_02_2024,00_00)
| | Call: get_date_diff(01_02_2024,01_01_2007,V1581)
| | | Call: evaluate(parsedate(01_02_2024),[V1582,V1583,V1584])
| | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | Call: evaluate(parsedate(01_01_2007),[V1585,V1586,V1587])
| | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | Call: evaluate(minus(2024,2007),V1588)
| | | Exit: evaluate(minus(2024,2007),17)
| | | Call: evaluate(minus(02,01),V1589)
| | | Exit: evaluate(minus(02,01),1)
| | | Call: evaluate(minus(01,01),V1590)
| | | Exit: evaluate(minus(01,01),0)
| | | Call: evaluate(plus(imul(31,1),0),V1591)
| | | Exit: evaluate(plus(imul(31,1),0),31)
| | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1581)
| | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | Exit: get_date_diff(C_D,DOB,Age)
| | Call: leq(17,17)
| | Exit: leq(17,17)
| Exit: minor_or_dependent(C,Cl)
| Call: claim.family_member_present(claim10,no)
| Exit: claim.family_member_present(claim10,no)
Exit: exception(C,P)
| | | Fail: ~exception(claim10,policy1)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim10,V1573)
| | | | Fail: claim.location(claim10,V1573)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(home_health_care,V1566,V1567,V1565)
| | | | | | Fail: yearly_visit_limit(home_health_care,V1566,V1567,V1565)
| | | | | Fail: yearly_visit_limit(home_health_care,17,V1565)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2007,V1554)
| | | | | Redo: claim.time(claim10,V1552,V1553)
| | | | | Fail: claim.time(claim10,V1552,V1553)
| | | | | Redo: person.dob(person5,V1551)
| | | | | Fail: person.dob(person5,V1551)
| | | | | Redo: claim.claimant(claim10,V1550)
| | | | | Fail: claim.claimant(claim10,V1550)
| | | | Fail: check_policy_year_limit(claim10,home_health_care)
| | | | Call: covered_list_with_location(V1592)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim10,V1593)
| | | | Exit: claim.location(claim10,home)
| | | | Call: valid_location(home_health_care,home)
| | | | Exit: valid_location(home_health_care,home)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim10,policy1)
Call: exception(claim10,policy1)
| Call: claim.claimant(claim10,V1594)
| Exit: claim.claimant(claim10,person5)
| Call: person.occupation(person5,armed_forces)
| Fail: person.occupation(person5,armed_forces)
| Redo: claim.claimant(claim10,V1594)
| Fail: claim.claimant(claim10,V1594)
| Call: claim.reason(claim10,home_health_care)
| Exit: claim.reason(claim10,home_health_care)
| Call: home_not_covered_list(V1595)
| Exit: home_not_covered_list([transportation,homemaker_service,home_delivery,maintenance_therapy])
| Call: claim.home_service(claim10,V1596)
| Exit: claim.home_service(claim10,other)
| Call: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Fail: member(other,[transportation,homemaker_service,home_delivery,maintenance_therapy])
| Redo: claim.home_service(claim10,V1596)
| Fail: claim.home_service(claim10,V1596)
| Redo: home_not_covered_list(V1595)
| Fail: home_not_covered_list(V1595)
| Redo: claim.reason(claim10,home_health_care)
| Fail: claim.reason(claim10,home_health_care)
| Call: claim.reason(claim10,home_health_care)
| Exit: claim.reason(claim10,home_health_care)
| Call: claim.claimant(claim10,V1597)
| Exit: claim.claimant(claim10,person5)
| Call: minor_or_dependent(claim10,person5)
| | Call: person.dependent(person5,yes)
| | Fail: person.dependent(person5,yes)
| | Call: person.dob(person5,V1598)
| | Exit: person.dob(person5,01_01_2007)
| | Call: claim.time(claim10,V1599,V1600)
| | Exit: claim.time(claim10,01_02_2024,00_00)
| | Call: get_date_diff(01_02_2024,01_01_2007,V1601)
| | | Call: evaluate(parsedate(01_02_2024),[V1602,V1603,V1604])
| | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | Call: evaluate(parsedate(01_01_2007),[V1605,V1606,V1607])
| | | Exit: evaluate(parsedate(01_01_2007),[01,01,2007])
| | | Call: evaluate(minus(2024,2007),V1608)
| | | Exit: evaluate(minus(2024,2007),17)
| | | Call: evaluate(minus(02,01),V1609)
| | | Exit: evaluate(minus(02,01),1)
| | | Call: evaluate(minus(01,01),V1610)
| | | Exit: evaluate(minus(01,01),0)
| | | Call: evaluate(plus(imul(31,1),0),V1611)
| | | Exit: evaluate(plus(imul(31,1),0),31)
| | | Call: evaluate(plus(17,if(leq(31,-1),-1,true,0)),V1601)
| | | Exit: evaluate(plus(17,if(leq(31,-1),-1,true,0)),17)
| | Exit: get_date_diff(C_D,DOB,Age)
| | Call: leq(17,17)
| | Exit: leq(17,17)
| Exit: minor_or_dependent(C,Cl)
| Call: claim.family_member_present(claim10,no)
| Exit: claim.family_member_present(claim10,no)
Exit: exception(C,P)
| | | Fail: ~exception(claim10,policy1)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(home_health_care,home)
| | | | Fail: valid_location(home_health_care,home)
| | | | Redo: claim.location(claim10,V1593)
| | | | Fail: claim.location(claim10,V1593)
| | | | Redo: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(home_health_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1592)
| | | | Fail: covered_list_with_location(V1592)
| | | | Call: covered_list_with_service_provider(V1612)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(home_health_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1612)
| | | | Fail: covered_list_with_service_provider(V1612)
| | | | Call: covered_list(V1613)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(home_health_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1613)
| | | | Fail: covered_list(V1613)
| | | Fail: eligible_service(claim10,policy1,home_health_care)
| | | Redo: claim.reason(claim10,V1549)
| | | Fail: claim.reason(claim10,V1549)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim10,V1548)
| | | Fail: claim.hospital(claim10,V1548)
| | | Call: claim.reason(claim10,emergency_room)
| | | Fail: claim.reason(claim10,emergency_room)
| | Fail: valid_hospitalization(claim10,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1544)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1540)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V1536)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V1532)
| | | Redo: policy.enddate(policy1,person5,V1531)
| | | Fail: policy.enddate(policy1,person5,V1531)
| | | Redo: policy.startdate(policy1,person5,V1530)
| | | Fail: policy.startdate(policy1,person5,V1530)
| | | Redo: claim.hosp_end_time(claim10,V1528,V1529)
| | | Fail: claim.hosp_end_time(claim10,V1528,V1529)
| | | Redo: claim.hosp_start_time(claim10,V1526,V1527)
| | | Fail: claim.hosp_start_time(claim10,V1526,V1527)
| | | Redo: claim.claimant(claim10,V1525)
| | | Fail: claim.claimant(claim10,V1525)
| | Fail: policy_active(claim10,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person5)
| | | Fail: policy.insuree(policy1,person5)
| | | Redo: claim.claimant(claim10,V1524)
| | | Fail: claim.claimant(claim10,V1524)
| | Fail: valid_insuree(claim10,policy1)
| Fail: covered_under_policy(claim10,policy1,cardinal)
| Redo: policy.type(policy1,V1373)
| Fail: policy.type(policy1,V1373)
| Redo: claim.policy(X,V1372)
| Fail: claim.policy(X,V1372)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_home_health_care.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim8' ]
RESULTS: [ 'claim8' ]
===== TEST SUCCEEDED: Test test_cases_home_health_care.hdf===== 
Expected Result:  [ 'claim_a1', 'claim_a2', 'claim_a3' ]
Call: covered(X)
| Call: claim.policy(X,V1614)
| Exit: claim.policy(claim_a1,policy1)
| Call: policy.type(policy1,V1615)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a1,policy1,cardinal)
| | Call: valid_insuree(claim_a1,policy1)
| | | Call: claim.claimant(claim_a1,V1616)
| | | Exit: claim.claimant(claim_a1,person_a1)
| | | Call: policy.insuree(policy1,person_a1)
| | | Exit: policy.insuree(policy1,person_a1)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a1,policy1)
| | | Call: claim.claimant(claim_a1,V1617)
| | | Exit: claim.claimant(claim_a1,person_a1)
| | | Call: claim.hosp_start_time(claim_a1,V1618,V1619)
| | | Exit: claim.hosp_start_time(claim_a1,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a1,V1620,V1621)
| | | Exit: claim.hosp_end_time(claim_a1,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a1,V1622)
| | | Exit: policy.startdate(policy1,person_a1,01_08_2023)
| | | Call: policy.enddate(policy1,person_a1,V1623)
| | | Exit: policy.enddate(policy1,person_a1,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1624)
| | | | Call: evaluate(parsedate(02_09_2023),[V1625,V1626,V1627])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1624)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1628)
| | | | Call: evaluate(parsedate(02_09_2023),[V1629,V1630,V1631])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1628)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1632)
| | | | Call: evaluate(parsedate(30_06_2024),[V1633,V1634,V1635])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1632)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1636)
| | | | Call: evaluate(parsedate(01_08_2023),[V1637,V1638,V1639])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1636)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a1,policy1)
| | | Call: claim.hospital(claim_a1,V1640)
| | | Exit: claim.hospital(claim_a1,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a1,V1641)
| | | Exit: claim.reason(claim_a1,hospice)
| | | Call: eligible_service(claim_a1,policy1,hospice)
| | | | Call: check_policy_year_limit(claim_a1,hospice)
| | | | | Call: claim.claimant(claim_a1,V1642)
| | | | | Exit: claim.claimant(claim_a1,person_a1)
| | | | | Call: person.dob(person_a1,V1643)
| | | | | Exit: person.dob(person_a1,01_01_2007)
| | | | | Call: claim.time(claim_a1,V1644,V1645)
| | | | | Fail: claim.time(claim_a1,V1644,V1645)
| | | | | Redo: person.dob(person_a1,V1643)
| | | | | Fail: person.dob(person_a1,V1643)
| | | | | Redo: claim.claimant(claim_a1,V1642)
| | | | | Fail: claim.claimant(claim_a1,V1642)
| | | | Fail: check_policy_year_limit(claim_a1,hospice)
| | | | Call: covered_list_with_location(V1646)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(hospice,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(hospice,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1646)
| | | | Fail: covered_list_with_location(V1646)
| | | | Call: covered_list_with_service_provider(V1647)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(hospice,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(hospice,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1647)
| | | | Fail: covered_list_with_service_provider(V1647)
| | | | Call: covered_list(V1648)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(hospice,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Exit: member(hospice,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a1,policy1)
Call: exception(claim_a1,policy1)
| Call: claim.claimant(claim_a1,V1649)
| Exit: claim.claimant(claim_a1,person_a1)
| Call: person.occupation(person_a1,armed_forces)
| Fail: person.occupation(person_a1,armed_forces)
| Redo: claim.claimant(claim_a1,V1649)
| Fail: claim.claimant(claim_a1,V1649)
| Call: claim.reason(claim_a1,home_health_care)
| Fail: claim.reason(claim_a1,home_health_care)
| Call: claim.reason(claim_a1,home_health_care)
| Fail: claim.reason(claim_a1,home_health_care)
Fail: exception(claim_a1,policy1)
| | | Exit: ~exception(claim_a1,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a1)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: member(hospice,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(hospice,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1648)
| | | | Fail: covered_list(V1648)
| | | Fail: eligible_service(claim_a1,policy1,hospice)
| | | Redo: claim.reason(claim_a1,V1641)
| | | Fail: claim.reason(claim_a1,V1641)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a1,V1640)
| | | Fail: claim.hospital(claim_a1,V1640)
| | | Call: claim.reason(claim_a1,emergency_room)
| | | Fail: claim.reason(claim_a1,emergency_room)
| | Fail: valid_hospitalization(claim_a1,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1636)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1632)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1628)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1624)
| | | Redo: policy.enddate(policy1,person_a1,V1623)
| | | Fail: policy.enddate(policy1,person_a1,V1623)
| | | Redo: policy.startdate(policy1,person_a1,V1622)
| | | Fail: policy.startdate(policy1,person_a1,V1622)
| | | Redo: claim.hosp_end_time(claim_a1,V1620,V1621)
| | | Fail: claim.hosp_end_time(claim_a1,V1620,V1621)
| | | Redo: claim.hosp_start_time(claim_a1,V1618,V1619)
| | | Fail: claim.hosp_start_time(claim_a1,V1618,V1619)
| | | Redo: claim.claimant(claim_a1,V1617)
| | | Fail: claim.claimant(claim_a1,V1617)
| | Fail: policy_active(claim_a1,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a1)
| | | Fail: policy.insuree(policy1,person_a1)
| | | Redo: claim.claimant(claim_a1,V1616)
| | | Fail: claim.claimant(claim_a1,V1616)
| | Fail: valid_insuree(claim_a1,policy1)
| Fail: covered_under_policy(claim_a1,policy1,cardinal)
| Redo: policy.type(policy1,V1615)
| Fail: policy.type(policy1,V1615)
| Redo: claim.policy(X,V1614)
| Exit: claim.policy(claim_a2,policy1)
| Call: policy.type(policy1,V1615)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a2,policy1,cardinal)
| | Call: valid_insuree(claim_a2,policy1)
| | | Call: claim.claimant(claim_a2,V1650)
| | | Exit: claim.claimant(claim_a2,person_a2)
| | | Call: policy.insuree(policy1,person_a2)
| | | Exit: policy.insuree(policy1,person_a2)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a2,policy1)
| | | Call: claim.claimant(claim_a2,V1651)
| | | Exit: claim.claimant(claim_a2,person_a2)
| | | Call: claim.hosp_start_time(claim_a2,V1652,V1653)
| | | Exit: claim.hosp_start_time(claim_a2,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a2,V1654,V1655)
| | | Exit: claim.hosp_end_time(claim_a2,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a2,V1656)
| | | Exit: policy.startdate(policy1,person_a2,01_08_2023)
| | | Call: policy.enddate(policy1,person_a2,V1657)
| | | Exit: policy.enddate(policy1,person_a2,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1658)
| | | | Call: evaluate(parsedate(02_09_2023),[V1659,V1660,V1661])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1658)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1662)
| | | | Call: evaluate(parsedate(02_09_2023),[V1663,V1664,V1665])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1662)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1666)
| | | | Call: evaluate(parsedate(30_06_2024),[V1667,V1668,V1669])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1666)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1670)
| | | | Call: evaluate(parsedate(01_08_2023),[V1671,V1672,V1673])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1670)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a2,policy1)
| | | Call: claim.hospital(claim_a2,V1674)
| | | Exit: claim.hospital(claim_a2,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim_a2,V1675)
| | | Exit: claim.reason(claim_a2,skilled_nursing)
| | | Call: eligible_service(claim_a2,policy1,skilled_nursing)
| | | | Call: check_policy_year_limit(claim_a2,skilled_nursing)
| | | | | Call: claim.claimant(claim_a2,V1676)
| | | | | Exit: claim.claimant(claim_a2,person_a2)
| | | | | Call: person.dob(person_a2,V1677)
| | | | | Exit: person.dob(person_a2,01_01_2007)
| | | | | Call: claim.time(claim_a2,V1678,V1679)
| | | | | Fail: claim.time(claim_a2,V1678,V1679)
| | | | | Redo: person.dob(person_a2,V1677)
| | | | | Fail: person.dob(person_a2,V1677)
| | | | | Redo: claim.claimant(claim_a2,V1676)
| | | | | Fail: claim.claimant(claim_a2,V1676)
| | | | Fail: check_policy_year_limit(claim_a2,skilled_nursing)
| | | | Call: covered_list_with_location(V1680)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(skilled_nursing,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(skilled_nursing,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1680)
| | | | Fail: covered_list_with_location(V1680)
| | | | Call: covered_list_with_service_provider(V1681)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(skilled_nursing,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(skilled_nursing,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1681)
| | | | Fail: covered_list_with_service_provider(V1681)
| | | | Call: covered_list(V1682)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Exit: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a2,policy1)
Call: exception(claim_a2,policy1)
| Call: claim.claimant(claim_a2,V1683)
| Exit: claim.claimant(claim_a2,person_a2)
| Call: person.occupation(person_a2,armed_forces)
| Fail: person.occupation(person_a2,armed_forces)
| Redo: claim.claimant(claim_a2,V1683)
| Fail: claim.claimant(claim_a2,V1683)
| Call: claim.reason(claim_a2,home_health_care)
| Fail: claim.reason(claim_a2,home_health_care)
| Call: claim.reason(claim_a2,home_health_care)
| Fail: claim.reason(claim_a2,home_health_care)
Fail: exception(claim_a2,policy1)
| | | Exit: ~exception(claim_a2,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a2)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Exit: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim_a2,policy1)
Call: exception(claim_a2,policy1)
| Call: claim.claimant(claim_a2,V1684)
| Exit: claim.claimant(claim_a2,person_a2)
| Call: person.occupation(person_a2,armed_forces)
| Fail: person.occupation(person_a2,armed_forces)
| Redo: claim.claimant(claim_a2,V1684)
| Fail: claim.claimant(claim_a2,V1684)
| Call: claim.reason(claim_a2,home_health_care)
| Fail: claim.reason(claim_a2,home_health_care)
| Call: claim.reason(claim_a2,home_health_care)
| Fail: claim.reason(claim_a2,home_health_care)
Fail: exception(claim_a2,policy1)
| | | Exit: ~exception(claim_a2,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a2)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(skilled_nursing,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1682)
| | | | Fail: covered_list(V1682)
| | | Fail: eligible_service(claim_a2,policy1,skilled_nursing)
| | | Redo: claim.reason(claim_a2,V1675)
| | | Fail: claim.reason(claim_a2,V1675)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim_a2,V1674)
| | | Fail: claim.hospital(claim_a2,V1674)
| | | Call: claim.reason(claim_a2,emergency_room)
| | | Fail: claim.reason(claim_a2,emergency_room)
| | Fail: valid_hospitalization(claim_a2,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1670)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1666)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1662)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1658)
| | | Redo: policy.enddate(policy1,person_a2,V1657)
| | | Fail: policy.enddate(policy1,person_a2,V1657)
| | | Redo: policy.startdate(policy1,person_a2,V1656)
| | | Fail: policy.startdate(policy1,person_a2,V1656)
| | | Redo: claim.hosp_end_time(claim_a2,V1654,V1655)
| | | Fail: claim.hosp_end_time(claim_a2,V1654,V1655)
| | | Redo: claim.hosp_start_time(claim_a2,V1652,V1653)
| | | Fail: claim.hosp_start_time(claim_a2,V1652,V1653)
| | | Redo: claim.claimant(claim_a2,V1651)
| | | Fail: claim.claimant(claim_a2,V1651)
| | Fail: policy_active(claim_a2,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a2)
| | | Fail: policy.insuree(policy1,person_a2)
| | | Redo: claim.claimant(claim_a2,V1650)
| | | Fail: claim.claimant(claim_a2,V1650)
| | Fail: valid_insuree(claim_a2,policy1)
| Fail: covered_under_policy(claim_a2,policy1,cardinal)
| Redo: policy.type(policy1,V1615)
| Fail: policy.type(policy1,V1615)
| Redo: claim.policy(X,V1614)
| Exit: claim.policy(claim_a3,policy1)
| Call: policy.type(policy1,V1615)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim_a3,policy1,cardinal)
| | Call: valid_insuree(claim_a3,policy1)
| | | Call: claim.claimant(claim_a3,V1685)
| | | Exit: claim.claimant(claim_a3,person_a3)
| | | Call: policy.insuree(policy1,person_a3)
| | | Exit: policy.insuree(policy1,person_a3)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim_a3,policy1)
| | | Call: claim.claimant(claim_a3,V1686)
| | | Exit: claim.claimant(claim_a3,person_a3)
| | | Call: claim.hosp_start_time(claim_a3,V1687,V1688)
| | | Exit: claim.hosp_start_time(claim_a3,03_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim_a3,V1689,V1690)
| | | Exit: claim.hosp_end_time(claim_a3,03_09_2023,01_13)
| | | Call: policy.startdate(policy1,person_a3,V1691)
| | | Exit: policy.startdate(policy1,person_a3,01_08_2023)
| | | Call: policy.enddate(policy1,person_a3,V1692)
| | | Exit: policy.enddate(policy1,person_a3,30_06_2024)
| | | Call: get_timestamp_from_date(03_09_2023,V1693)
| | | | Call: evaluate(parsedate(03_09_2023),[V1694,V1695,V1696])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1693)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(03_09_2023,V1697)
| | | | Call: evaluate(parsedate(03_09_2023),[V1698,V1699,V1700])
| | | | Exit: evaluate(parsedate(03_09_2023),[03,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,03,0,0,0),V1697)
| | | | Exit: evaluate(maketimestamp(2023,09,03,0,0,0),1693724400000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1701)
| | | | Call: evaluate(parsedate(30_06_2024),[V1702,V1703,V1704])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1701)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1705)
| | | | Call: evaluate(parsedate(01_08_2023),[V1706,V1707,V1708])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1705)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693724400000)
| | | Exit: leq(1690873200000,1693724400000)
| | | Call: leq(1693724400000,1719730800000)
| | | Exit: leq(1693724400000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim_a3,policy1)
| | | Call: claim.hospital(claim_a3,V1709)
| | | Exit: claim.hospital(claim_a3,other)
| | | Call: valid_hospital(other)
| | | Fail: valid_hospital(other)
| | | Redo: claim.hospital(claim_a3,V1709)
| | | Fail: claim.hospital(claim_a3,V1709)
| | | Call: claim.reason(claim_a3,emergency_room)
| | | Exit: claim.reason(claim_a3,emergency_room)
| | | Call: claim.type_of_care(claim_a3,emergency)
| | | Exit: claim.type_of_care(claim_a3,emergency)
| | | Call: ~exception(claim_a3,policy1)
Call: exception(claim_a3,policy1)
| Call: claim.claimant(claim_a3,V1710)
| Exit: claim.claimant(claim_a3,person_a3)
| Call: person.occupation(person_a3,armed_forces)
| Fail: person.occupation(person_a3,armed_forces)
| Redo: claim.claimant(claim_a3,V1710)
| Fail: claim.claimant(claim_a3,V1710)
| Call: claim.reason(claim_a3,home_health_care)
| Fail: claim.reason(claim_a3,home_health_care)
| Call: claim.reason(claim_a3,home_health_care)
| Fail: claim.reason(claim_a3,home_health_care)
Fail: exception(claim_a3,policy1)
| | | Exit: ~exception(claim_a3,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim_a3)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: claim.type_of_care(claim_a3,emergency)
| | | Fail: claim.type_of_care(claim_a3,emergency)
| | | Redo: claim.reason(claim_a3,emergency_room)
| | | Fail: claim.reason(claim_a3,emergency_room)
| | Fail: valid_hospitalization(claim_a3,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1705)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1701)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1697)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(03_09_2023,V1693)
| | | Redo: policy.enddate(policy1,person_a3,V1692)
| | | Fail: policy.enddate(policy1,person_a3,V1692)
| | | Redo: policy.startdate(policy1,person_a3,V1691)
| | | Fail: policy.startdate(policy1,person_a3,V1691)
| | | Redo: claim.hosp_end_time(claim_a3,V1689,V1690)
| | | Fail: claim.hosp_end_time(claim_a3,V1689,V1690)
| | | Redo: claim.hosp_start_time(claim_a3,V1687,V1688)
| | | Fail: claim.hosp_start_time(claim_a3,V1687,V1688)
| | | Redo: claim.claimant(claim_a3,V1686)
| | | Fail: claim.claimant(claim_a3,V1686)
| | Fail: policy_active(claim_a3,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person_a3)
| | | Fail: policy.insuree(policy1,person_a3)
| | | Redo: claim.claimant(claim_a3,V1685)
| | | Fail: claim.claimant(claim_a3,V1685)
| | Fail: valid_insuree(claim_a3,policy1)
| Fail: covered_under_policy(claim_a3,policy1,cardinal)
| Redo: policy.type(policy1,V1615)
| Fail: policy.type(policy1,V1615)
| Redo: claim.policy(X,V1614)
| Fail: claim.policy(X,V1614)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_hospice_etc.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim_a1', 'claim_a2', 'claim_a3' ]
RESULTS: [ 'claim_a1', 'claim_a2', 'claim_a3' ]
===== TEST SUCCEEDED: Test test_cases_hospice_etc.hdf===== 
Expected Result:  [ 'claim5' ]
Call: covered(X)
| Call: claim.policy(X,V1711)
| Exit: claim.policy(claim5,policy1)
| Call: policy.type(policy1,V1712)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim5,policy1,cardinal)
| | Call: valid_insuree(claim5,policy1)
| | | Call: claim.claimant(claim5,V1713)
| | | Exit: claim.claimant(claim5,person3)
| | | Call: policy.insuree(policy1,person3)
| | | Exit: policy.insuree(policy1,person3)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim5,policy1)
| | | Call: claim.claimant(claim5,V1714)
| | | Exit: claim.claimant(claim5,person3)
| | | Call: claim.hosp_start_time(claim5,V1715,V1716)
| | | Exit: claim.hosp_start_time(claim5,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim5,V1717,V1718)
| | | Exit: claim.hosp_end_time(claim5,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person3,V1719)
| | | Exit: policy.startdate(policy1,person3,01_08_2023)
| | | Call: policy.enddate(policy1,person3,V1720)
| | | Exit: policy.enddate(policy1,person3,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1721)
| | | | Call: evaluate(parsedate(02_09_2023),[V1722,V1723,V1724])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1721)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1725)
| | | | Call: evaluate(parsedate(02_09_2023),[V1726,V1727,V1728])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1725)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1729)
| | | | Call: evaluate(parsedate(30_06_2024),[V1730,V1731,V1732])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1729)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1733)
| | | | Call: evaluate(parsedate(01_08_2023),[V1734,V1735,V1736])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1733)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim5,policy1)
| | | Call: claim.hospital(claim5,V1737)
| | | Exit: claim.hospital(claim5,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim5,V1738)
| | | Exit: claim.reason(claim5,inpatient_care)
| | | Call: eligible_service(claim5,policy1,inpatient_care)
| | | | Call: check_policy_year_limit(claim5,inpatient_care)
| | | | | Call: claim.claimant(claim5,V1739)
| | | | | Exit: claim.claimant(claim5,person3)
| | | | | Call: person.dob(person3,V1740)
| | | | | Exit: person.dob(person3,01_01_2001)
| | | | | Call: claim.time(claim5,V1741,V1742)
| | | | | Exit: claim.time(claim5,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1743)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1744,V1745,V1746])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1747,V1748,V1749])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1750)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1751)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1752)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1753)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1743)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(inpatient_care,23,V1754)
| | | | | | Call: yearly_visit_limit(inpatient_care,V1755,V1756,V1754)
| | | | | | Fail: yearly_visit_limit(inpatient_care,V1755,V1756,V1754)
| | | | | Fail: yearly_visit_limit(inpatient_care,23,V1754)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1743)
| | | | | Redo: claim.time(claim5,V1741,V1742)
| | | | | Fail: claim.time(claim5,V1741,V1742)
| | | | | Redo: person.dob(person3,V1740)
| | | | | Fail: person.dob(person3,V1740)
| | | | | Redo: claim.claimant(claim5,V1739)
| | | | | Fail: claim.claimant(claim5,V1739)
| | | | Fail: check_policy_year_limit(claim5,inpatient_care)
| | | | Call: covered_list_with_location(V1757)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim5,V1758)
| | | | Exit: claim.location(claim5,hospital)
| | | | Call: valid_location(inpatient_care,hospital)
| | | | Exit: valid_location(inpatient_care,hospital)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim5,policy1)
Call: exception(claim5,policy1)
| Call: claim.claimant(claim5,V1759)
| Exit: claim.claimant(claim5,person3)
| Call: person.occupation(person3,armed_forces)
| Fail: person.occupation(person3,armed_forces)
| Redo: claim.claimant(claim5,V1759)
| Fail: claim.claimant(claim5,V1759)
| Call: claim.reason(claim5,home_health_care)
| Fail: claim.reason(claim5,home_health_care)
| Call: claim.reason(claim5,home_health_care)
| Fail: claim.reason(claim5,home_health_care)
Fail: exception(claim5,policy1)
| | | Exit: ~exception(claim5,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim5)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(inpatient_care,hospital)
| | | | Fail: valid_location(inpatient_care,hospital)
| | | | Redo: claim.location(claim5,V1758)
| | | | Fail: claim.location(claim5,V1758)
| | | | Redo: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(inpatient_care,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1757)
| | | | Fail: covered_list_with_location(V1757)
| | | | Call: covered_list_with_service_provider(V1760)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(inpatient_care,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(inpatient_care,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1760)
| | | | Fail: covered_list_with_service_provider(V1760)
| | | | Call: covered_list(V1761)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(inpatient_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(inpatient_care,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1761)
| | | | Fail: covered_list(V1761)
| | | Fail: eligible_service(claim5,policy1,inpatient_care)
| | | Redo: claim.reason(claim5,V1738)
| | | Fail: claim.reason(claim5,V1738)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim5,V1737)
| | | Fail: claim.hospital(claim5,V1737)
| | | Call: claim.reason(claim5,emergency_room)
| | | Fail: claim.reason(claim5,emergency_room)
| | Fail: valid_hospitalization(claim5,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1733)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1729)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1725)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1721)
| | | Redo: policy.enddate(policy1,person3,V1720)
| | | Fail: policy.enddate(policy1,person3,V1720)
| | | Redo: policy.startdate(policy1,person3,V1719)
| | | Fail: policy.startdate(policy1,person3,V1719)
| | | Redo: claim.hosp_end_time(claim5,V1717,V1718)
| | | Fail: claim.hosp_end_time(claim5,V1717,V1718)
| | | Redo: claim.hosp_start_time(claim5,V1715,V1716)
| | | Fail: claim.hosp_start_time(claim5,V1715,V1716)
| | | Redo: claim.claimant(claim5,V1714)
| | | Fail: claim.claimant(claim5,V1714)
| | Fail: policy_active(claim5,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person3)
| | | Fail: policy.insuree(policy1,person3)
| | | Redo: claim.claimant(claim5,V1713)
| | | Fail: claim.claimant(claim5,V1713)
| | Fail: valid_insuree(claim5,policy1)
| Fail: covered_under_policy(claim5,policy1,cardinal)
| Redo: policy.type(policy1,V1712)
| Fail: policy.type(policy1,V1712)
| Redo: claim.policy(X,V1711)
| Fail: claim.policy(X,V1711)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_inpatient_care.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim5' ]
RESULTS: [ 'claim5' ]
===== TEST SUCCEEDED: Test test_cases_inpatient_care.hdf===== 
Expected Result:  [ 'claim11' ]
Call: covered(X)
| Call: claim.policy(X,V1762)
| Exit: claim.policy(claim11,policy1)
| Call: policy.type(policy1,V1763)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim11,policy1,cardinal)
| | Call: valid_insuree(claim11,policy1)
| | | Call: claim.claimant(claim11,V1764)
| | | Exit: claim.claimant(claim11,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim11,policy1)
| | | Call: claim.claimant(claim11,V1765)
| | | Exit: claim.claimant(claim11,person4)
| | | Call: claim.hosp_start_time(claim11,V1766,V1767)
| | | Exit: claim.hosp_start_time(claim11,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim11,V1768,V1769)
| | | Exit: claim.hosp_end_time(claim11,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V1770)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V1771)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1772)
| | | | Call: evaluate(parsedate(02_09_2023),[V1773,V1774,V1775])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1772)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1776)
| | | | Call: evaluate(parsedate(02_09_2023),[V1777,V1778,V1779])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1776)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1780)
| | | | Call: evaluate(parsedate(30_06_2024),[V1781,V1782,V1783])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1780)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1784)
| | | | Call: evaluate(parsedate(01_08_2023),[V1785,V1786,V1787])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1784)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim11,policy1)
| | | Call: claim.hospital(claim11,V1788)
| | | Exit: claim.hospital(claim11,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim11,V1789)
| | | Exit: claim.reason(claim11,inpatient_surgical_services)
| | | Call: eligible_service(claim11,policy1,inpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim11,inpatient_surgical_services)
| | | | | Call: claim.claimant(claim11,V1790)
| | | | | Exit: claim.claimant(claim11,person4)
| | | | | Call: person.dob(person4,V1791)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim11,V1792,V1793)
| | | | | Exit: claim.time(claim11,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1794)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1795,V1796,V1797])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1798,V1799,V1800])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1801)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1802)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1803)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1804)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1794)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(inpatient_surgical_services,23,V1805)
| | | | | | Call: yearly_visit_limit(inpatient_surgical_services,V1806,V1807,V1805)
| | | | | | Fail: yearly_visit_limit(inpatient_surgical_services,V1806,V1807,V1805)
| | | | | Fail: yearly_visit_limit(inpatient_surgical_services,23,V1805)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1794)
| | | | | Redo: claim.time(claim11,V1792,V1793)
| | | | | Fail: claim.time(claim11,V1792,V1793)
| | | | | Redo: person.dob(person4,V1791)
| | | | | Fail: person.dob(person4,V1791)
| | | | | Redo: claim.claimant(claim11,V1790)
| | | | | Fail: claim.claimant(claim11,V1790)
| | | | Fail: check_policy_year_limit(claim11,inpatient_surgical_services)
| | | | Call: covered_list_with_location(V1808)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(inpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Exit: member(inpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: claim.location(claim11,V1809)
| | | | Exit: claim.location(claim11,birthing_center)
| | | | Call: valid_location(inpatient_surgical_services,birthing_center)
| | | | Exit: valid_location(inpatient_surgical_services,birthing_center)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim11,policy1)
Call: exception(claim11,policy1)
| Call: claim.claimant(claim11,V1810)
| Exit: claim.claimant(claim11,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim11,V1810)
| Fail: claim.claimant(claim11,V1810)
| Call: claim.reason(claim11,home_health_care)
| Fail: claim.reason(claim11,home_health_care)
| Call: claim.reason(claim11,home_health_care)
| Fail: claim.reason(claim11,home_health_care)
Fail: exception(claim11,policy1)
| | | Exit: ~exception(claim11,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim11)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(inpatient_surgical_services,birthing_center)
| | | | Fail: valid_location(inpatient_surgical_services,birthing_center)
| | | | Redo: claim.location(claim11,V1809)
| | | | Fail: claim.location(claim11,V1809)
| | | | Redo: member(inpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(inpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1808)
| | | | Fail: covered_list_with_location(V1808)
| | | | Call: covered_list_with_service_provider(V1811)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(inpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(inpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1811)
| | | | Fail: covered_list_with_service_provider(V1811)
| | | | Call: covered_list(V1812)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(inpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(inpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1812)
| | | | Fail: covered_list(V1812)
| | | | Call: claim.location(claim11,V1813)
| | | | Exit: claim.location(claim11,birthing_center)
| | | | Call: valid_location(inpatient_surgical_services,birthing_center)
| | | | Exit: valid_location(inpatient_surgical_services,birthing_center)
| | | | Call: claim.service_provider(claim11,V1814)
| | | | Exit: claim.service_provider(claim11,anesthetist)
| | | | Call: valid_service_provider(inpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(inpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim11,policy1)
Call: exception(claim11,policy1)
| Call: claim.claimant(claim11,V1815)
| Exit: claim.claimant(claim11,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim11,V1815)
| Fail: claim.claimant(claim11,V1815)
| Call: claim.reason(claim11,home_health_care)
| Fail: claim.reason(claim11,home_health_care)
| Call: claim.reason(claim11,home_health_care)
| Fail: claim.reason(claim11,home_health_care)
Fail: exception(claim11,policy1)
| | | Exit: ~exception(claim11,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim11)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(inpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(inpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim11,V1814)
| | | | Fail: claim.service_provider(claim11,V1814)
| | | | Redo: valid_location(inpatient_surgical_services,birthing_center)
| | | | Fail: valid_location(inpatient_surgical_services,birthing_center)
| | | | Redo: claim.location(claim11,V1813)
| | | | Fail: claim.location(claim11,V1813)
| | | Fail: eligible_service(claim11,policy1,inpatient_surgical_services)
| | | Redo: claim.reason(claim11,V1789)
| | | Fail: claim.reason(claim11,V1789)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim11,V1788)
| | | Fail: claim.hospital(claim11,V1788)
| | | Call: claim.reason(claim11,emergency_room)
| | | Fail: claim.reason(claim11,emergency_room)
| | Fail: valid_hospitalization(claim11,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1784)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1780)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1776)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1772)
| | | Redo: policy.enddate(policy1,person4,V1771)
| | | Fail: policy.enddate(policy1,person4,V1771)
| | | Redo: policy.startdate(policy1,person4,V1770)
| | | Fail: policy.startdate(policy1,person4,V1770)
| | | Redo: claim.hosp_end_time(claim11,V1768,V1769)
| | | Fail: claim.hosp_end_time(claim11,V1768,V1769)
| | | Redo: claim.hosp_start_time(claim11,V1766,V1767)
| | | Fail: claim.hosp_start_time(claim11,V1766,V1767)
| | | Redo: claim.claimant(claim11,V1765)
| | | Fail: claim.claimant(claim11,V1765)
| | Fail: policy_active(claim11,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim11,V1764)
| | | Fail: claim.claimant(claim11,V1764)
| | Fail: valid_insuree(claim11,policy1)
| Fail: covered_under_policy(claim11,policy1,cardinal)
| Redo: policy.type(policy1,V1763)
| Fail: policy.type(policy1,V1763)
| Redo: claim.policy(X,V1762)
| Fail: claim.policy(X,V1762)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_inpatient_surgical_services.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim11' ]
RESULTS: [ 'claim11' ]
===== TEST SUCCEEDED: Test test_cases_inpatient_surgical_services.hdf===== 
Expected Result:  [ 'claim6' ]
Call: covered(X)
| Call: claim.policy(X,V1816)
| Exit: claim.policy(claim6,policy1)
| Call: policy.type(policy1,V1817)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim6,policy1,cardinal)
| | Call: valid_insuree(claim6,policy1)
| | | Call: claim.claimant(claim6,V1818)
| | | Exit: claim.claimant(claim6,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim6,policy1)
| | | Call: claim.claimant(claim6,V1819)
| | | Exit: claim.claimant(claim6,person4)
| | | Call: claim.hosp_start_time(claim6,V1820,V1821)
| | | Exit: claim.hosp_start_time(claim6,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim6,V1822,V1823)
| | | Exit: claim.hosp_end_time(claim6,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V1824)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V1825)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1826)
| | | | Call: evaluate(parsedate(02_09_2023),[V1827,V1828,V1829])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1826)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1830)
| | | | Call: evaluate(parsedate(02_09_2023),[V1831,V1832,V1833])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1830)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1834)
| | | | Call: evaluate(parsedate(30_06_2024),[V1835,V1836,V1837])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1834)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1838)
| | | | Call: evaluate(parsedate(01_08_2023),[V1839,V1840,V1841])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1838)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim6,policy1)
| | | Call: claim.hospital(claim6,V1842)
| | | Exit: claim.hospital(claim6,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim6,V1843)
| | | Exit: claim.reason(claim6,outpatient_surgery_facility_charges)
| | | Call: eligible_service(claim6,policy1,outpatient_surgery_facility_charges)
| | | | Call: check_policy_year_limit(claim6,outpatient_surgery_facility_charges)
| | | | | Call: claim.claimant(claim6,V1844)
| | | | | Exit: claim.claimant(claim6,person4)
| | | | | Call: person.dob(person4,V1845)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim6,V1846,V1847)
| | | | | Fail: claim.time(claim6,V1846,V1847)
| | | | | Redo: person.dob(person4,V1845)
| | | | | Fail: person.dob(person4,V1845)
| | | | | Redo: claim.claimant(claim6,V1844)
| | | | | Fail: claim.claimant(claim6,V1844)
| | | | Fail: check_policy_year_limit(claim6,outpatient_surgery_facility_charges)
| | | | Call: covered_list_with_location(V1848)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgery_facility_charges,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgery_facility_charges,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1848)
| | | | Fail: covered_list_with_location(V1848)
| | | | Call: covered_list_with_service_provider(V1849)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgery_facility_charges,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgery_facility_charges,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1849)
| | | | Fail: covered_list_with_service_provider(V1849)
| | | | Call: covered_list(V1850)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgery_facility_charges,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgery_facility_charges,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1850)
| | | | Fail: covered_list(V1850)
| | | | Call: claim.location(claim6,V1851)
| | | | Exit: claim.location(claim6,outpatient_dept)
| | | | Call: valid_location(outpatient_surgery_facility_charges,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgery_facility_charges,outpatient_dept)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim6,policy1)
Call: exception(claim6,policy1)
| Call: claim.claimant(claim6,V1852)
| Exit: claim.claimant(claim6,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim6,V1852)
| Fail: claim.claimant(claim6,V1852)
| Call: claim.reason(claim6,home_health_care)
| Fail: claim.reason(claim6,home_health_care)
| Call: claim.reason(claim6,home_health_care)
| Fail: claim.reason(claim6,home_health_care)
Fail: exception(claim6,policy1)
| | | Exit: ~exception(claim6,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim6)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(outpatient_surgery_facility_charges,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgery_facility_charges,outpatient_dept)
| | | | Redo: claim.location(claim6,V1851)
| | | | Fail: claim.location(claim6,V1851)
| | | Fail: eligible_service(claim6,policy1,outpatient_surgery_facility_charges)
| | | Redo: claim.reason(claim6,V1843)
| | | Fail: claim.reason(claim6,V1843)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim6,V1842)
| | | Fail: claim.hospital(claim6,V1842)
| | | Call: claim.reason(claim6,emergency_room)
| | | Fail: claim.reason(claim6,emergency_room)
| | Fail: valid_hospitalization(claim6,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1838)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1834)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1830)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1826)
| | | Redo: policy.enddate(policy1,person4,V1825)
| | | Fail: policy.enddate(policy1,person4,V1825)
| | | Redo: policy.startdate(policy1,person4,V1824)
| | | Fail: policy.startdate(policy1,person4,V1824)
| | | Redo: claim.hosp_end_time(claim6,V1822,V1823)
| | | Fail: claim.hosp_end_time(claim6,V1822,V1823)
| | | Redo: claim.hosp_start_time(claim6,V1820,V1821)
| | | Fail: claim.hosp_start_time(claim6,V1820,V1821)
| | | Redo: claim.claimant(claim6,V1819)
| | | Fail: claim.claimant(claim6,V1819)
| | Fail: policy_active(claim6,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim6,V1818)
| | | Fail: claim.claimant(claim6,V1818)
| | Fail: valid_insuree(claim6,policy1)
| Fail: covered_under_policy(claim6,policy1,cardinal)
| Redo: policy.type(policy1,V1817)
| Fail: policy.type(policy1,V1817)
| Redo: claim.policy(X,V1816)
| Fail: claim.policy(X,V1816)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_outpatient_surgery_facility_charges.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim6' ]
RESULTS: [ 'claim6' ]
===== TEST SUCCEEDED: Test test_cases_outpatient_surgery_facility_charges.hdf===== 
Expected Result:  [ 'claim12' ]
Call: covered(X)
| Call: claim.policy(X,V1853)
| Exit: claim.policy(claim12,policy1)
| Call: policy.type(policy1,V1854)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim12,policy1,cardinal)
| | Call: valid_insuree(claim12,policy1)
| | | Call: claim.claimant(claim12,V1855)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim12,policy1)
| | | Call: claim.claimant(claim12,V1856)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: claim.hosp_start_time(claim12,V1857,V1858)
| | | Exit: claim.hosp_start_time(claim12,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim12,V1859,V1860)
| | | Exit: claim.hosp_end_time(claim12,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V1861)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V1862)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1863)
| | | | Call: evaluate(parsedate(02_09_2023),[V1864,V1865,V1866])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1863)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1867)
| | | | Call: evaluate(parsedate(02_09_2023),[V1868,V1869,V1870])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1867)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1871)
| | | | Call: evaluate(parsedate(30_06_2024),[V1872,V1873,V1874])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1871)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1875)
| | | | Call: evaluate(parsedate(01_08_2023),[V1876,V1877,V1878])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1875)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V1879)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V1880)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V1881)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V1882)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1883,V1884)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1885)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1886,V1887,V1888])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1889,V1890,V1891])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1892)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1893)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1894)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1895)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1885)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1896)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V1897,V1898,V1896)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V1897,V1898,V1896)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1896)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1885)
| | | | | Redo: claim.time(claim12,V1883,V1884)
| | | | | Fail: claim.time(claim12,V1883,V1884)
| | | | | Redo: person.dob(person4,V1882)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1883,V1884)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1885)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1899,V1900,V1901])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1902,V1903,V1904])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1905)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1906)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1907)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1908)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1885)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1896)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V1909,V1910,V1896)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V1909,V1910,V1896)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1896)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1885)
| | | | | Redo: claim.time(claim12,V1883,V1884)
| | | | | Fail: claim.time(claim12,V1883,V1884)
| | | | | Redo: person.dob(person4,V1882)
| | | | | Fail: person.dob(person4,V1882)
| | | | | Redo: claim.claimant(claim12,V1881)
| | | | | Fail: claim.claimant(claim12,V1881)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V1911)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1911)
| | | | Fail: covered_list_with_location(V1911)
| | | | Call: covered_list_with_service_provider(V1912)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1912)
| | | | Fail: covered_list_with_service_provider(V1912)
| | | | Call: covered_list(V1913)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1913)
| | | | Fail: covered_list(V1913)
| | | | Call: claim.location(claim12,V1914)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V1915)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V1916)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V1916)
| Fail: claim.claimant(claim12,V1916)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V1915)
| | | | Fail: claim.service_provider(claim12,V1915)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V1914)
| | | | Fail: claim.location(claim12,V1914)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V1880)
| | | Fail: claim.reason(claim12,V1880)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V1879)
| | | Fail: claim.hospital(claim12,V1879)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1875)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1871)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1867)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1863)
| | | Redo: policy.enddate(policy1,person4,V1862)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1863)
| | | | Call: evaluate(parsedate(02_09_2023),[V1917,V1918,V1919])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1863)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1867)
| | | | Call: evaluate(parsedate(02_09_2023),[V1920,V1921,V1922])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1867)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1871)
| | | | Call: evaluate(parsedate(30_06_2024),[V1923,V1924,V1925])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1871)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1875)
| | | | Call: evaluate(parsedate(01_08_2023),[V1926,V1927,V1928])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1875)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V1929)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V1930)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V1931)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V1932)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1933,V1934)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1935)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1936,V1937,V1938])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1939,V1940,V1941])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1942)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1943)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1944)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1945)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1935)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1946)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V1947,V1948,V1946)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V1947,V1948,V1946)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1946)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1935)
| | | | | Redo: claim.time(claim12,V1933,V1934)
| | | | | Fail: claim.time(claim12,V1933,V1934)
| | | | | Redo: person.dob(person4,V1932)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1933,V1934)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1935)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1949,V1950,V1951])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1952,V1953,V1954])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1955)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1956)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1957)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1958)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1935)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1946)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V1959,V1960,V1946)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V1959,V1960,V1946)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1946)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1935)
| | | | | Redo: claim.time(claim12,V1933,V1934)
| | | | | Fail: claim.time(claim12,V1933,V1934)
| | | | | Redo: person.dob(person4,V1932)
| | | | | Fail: person.dob(person4,V1932)
| | | | | Redo: claim.claimant(claim12,V1931)
| | | | | Fail: claim.claimant(claim12,V1931)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V1961)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V1961)
| | | | Fail: covered_list_with_location(V1961)
| | | | Call: covered_list_with_service_provider(V1962)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V1962)
| | | | Fail: covered_list_with_service_provider(V1962)
| | | | Call: covered_list(V1963)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V1963)
| | | | Fail: covered_list(V1963)
| | | | Call: claim.location(claim12,V1964)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V1965)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V1966)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V1966)
| Fail: claim.claimant(claim12,V1966)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V1965)
| | | | Fail: claim.service_provider(claim12,V1965)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V1964)
| | | | Fail: claim.location(claim12,V1964)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V1930)
| | | Fail: claim.reason(claim12,V1930)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V1929)
| | | Fail: claim.hospital(claim12,V1929)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1875)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1871)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1867)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1863)
| | | Redo: policy.enddate(policy1,person4,V1862)
| | | Fail: policy.enddate(policy1,person4,V1862)
| | | Redo: policy.startdate(policy1,person4,V1861)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V1862)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1863)
| | | | Call: evaluate(parsedate(02_09_2023),[V1967,V1968,V1969])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1863)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1867)
| | | | Call: evaluate(parsedate(02_09_2023),[V1970,V1971,V1972])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1867)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1871)
| | | | Call: evaluate(parsedate(30_06_2024),[V1973,V1974,V1975])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1871)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1875)
| | | | Call: evaluate(parsedate(01_08_2023),[V1976,V1977,V1978])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1875)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V1979)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V1980)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V1981)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V1982)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1983,V1984)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1985)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1986,V1987,V1988])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V1989,V1990,V1991])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V1992)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V1993)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V1994)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V1995)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1985)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1996)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V1997,V1998,V1996)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V1997,V1998,V1996)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1996)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1985)
| | | | | Redo: claim.time(claim12,V1983,V1984)
| | | | | Fail: claim.time(claim12,V1983,V1984)
| | | | | Redo: person.dob(person4,V1982)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V1983,V1984)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V1985)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V1999,V2000,V2001])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2002,V2003,V2004])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2005)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2006)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2007)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2008)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V1985)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V1996)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2009,V2010,V1996)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2009,V2010,V1996)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V1996)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V1985)
| | | | | Redo: claim.time(claim12,V1983,V1984)
| | | | | Fail: claim.time(claim12,V1983,V1984)
| | | | | Redo: person.dob(person4,V1982)
| | | | | Fail: person.dob(person4,V1982)
| | | | | Redo: claim.claimant(claim12,V1981)
| | | | | Fail: claim.claimant(claim12,V1981)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2011)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2011)
| | | | Fail: covered_list_with_location(V2011)
| | | | Call: covered_list_with_service_provider(V2012)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2012)
| | | | Fail: covered_list_with_service_provider(V2012)
| | | | Call: covered_list(V2013)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2013)
| | | | Fail: covered_list(V2013)
| | | | Call: claim.location(claim12,V2014)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2015)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2016)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2016)
| Fail: claim.claimant(claim12,V2016)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2015)
| | | | Fail: claim.service_provider(claim12,V2015)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2014)
| | | | Fail: claim.location(claim12,V2014)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V1980)
| | | Fail: claim.reason(claim12,V1980)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V1979)
| | | Fail: claim.hospital(claim12,V1979)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1875)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1871)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1867)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1863)
| | | Redo: policy.enddate(policy1,person4,V1862)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V1863)
| | | | Call: evaluate(parsedate(02_09_2023),[V2017,V2018,V2019])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1863)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V1867)
| | | | Call: evaluate(parsedate(02_09_2023),[V2020,V2021,V2022])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V1867)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V1871)
| | | | Call: evaluate(parsedate(30_06_2024),[V2023,V2024,V2025])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V1871)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V1875)
| | | | Call: evaluate(parsedate(01_08_2023),[V2026,V2027,V2028])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V1875)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2029)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2030)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2031)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2032)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2033,V2034)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2035)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2036,V2037,V2038])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2039,V2040,V2041])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2042)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2043)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2044)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2045)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2035)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2046)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2047,V2048,V2046)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2047,V2048,V2046)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2046)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2035)
| | | | | Redo: claim.time(claim12,V2033,V2034)
| | | | | Fail: claim.time(claim12,V2033,V2034)
| | | | | Redo: person.dob(person4,V2032)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2033,V2034)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2035)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2049,V2050,V2051])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2052,V2053,V2054])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2055)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2056)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2057)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2058)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2035)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2046)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2059,V2060,V2046)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2059,V2060,V2046)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2046)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2035)
| | | | | Redo: claim.time(claim12,V2033,V2034)
| | | | | Fail: claim.time(claim12,V2033,V2034)
| | | | | Redo: person.dob(person4,V2032)
| | | | | Fail: person.dob(person4,V2032)
| | | | | Redo: claim.claimant(claim12,V2031)
| | | | | Fail: claim.claimant(claim12,V2031)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2061)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2061)
| | | | Fail: covered_list_with_location(V2061)
| | | | Call: covered_list_with_service_provider(V2062)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2062)
| | | | Fail: covered_list_with_service_provider(V2062)
| | | | Call: covered_list(V2063)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2063)
| | | | Fail: covered_list(V2063)
| | | | Call: claim.location(claim12,V2064)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2065)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2066)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2066)
| Fail: claim.claimant(claim12,V2066)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2065)
| | | | Fail: claim.service_provider(claim12,V2065)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2064)
| | | | Fail: claim.location(claim12,V2064)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2030)
| | | Fail: claim.reason(claim12,V2030)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2029)
| | | Fail: claim.hospital(claim12,V2029)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V1875)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V1871)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1867)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V1863)
| | | Redo: policy.enddate(policy1,person4,V1862)
| | | Fail: policy.enddate(policy1,person4,V1862)
| | | Redo: policy.startdate(policy1,person4,V1861)
| | | Fail: policy.startdate(policy1,person4,V1861)
| | | Redo: claim.hosp_end_time(claim12,V1859,V1860)
| | | Fail: claim.hosp_end_time(claim12,V1859,V1860)
| | | Redo: claim.hosp_start_time(claim12,V1857,V1858)
| | | Fail: claim.hosp_start_time(claim12,V1857,V1858)
| | | Redo: claim.claimant(claim12,V1856)
| | | Fail: claim.claimant(claim12,V1856)
| | Fail: policy_active(claim12,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim12,policy1)
| | | Call: claim.claimant(claim12,V2067)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: claim.hosp_start_time(claim12,V2068,V2069)
| | | Exit: claim.hosp_start_time(claim12,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim12,V2070,V2071)
| | | Exit: claim.hosp_end_time(claim12,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V2072)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2073)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2074)
| | | | Call: evaluate(parsedate(02_09_2023),[V2075,V2076,V2077])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2074)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2078)
| | | | Call: evaluate(parsedate(02_09_2023),[V2079,V2080,V2081])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2078)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2082)
| | | | Call: evaluate(parsedate(30_06_2024),[V2083,V2084,V2085])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2082)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2086)
| | | | Call: evaluate(parsedate(01_08_2023),[V2087,V2088,V2089])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2086)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2090)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2091)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2092)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2093)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2094,V2095)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2096)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2097,V2098,V2099])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2100,V2101,V2102])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2103)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2104)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2105)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2106)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2096)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2107)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2108,V2109,V2107)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2108,V2109,V2107)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2107)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2096)
| | | | | Redo: claim.time(claim12,V2094,V2095)
| | | | | Fail: claim.time(claim12,V2094,V2095)
| | | | | Redo: person.dob(person4,V2093)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2094,V2095)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2096)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2110,V2111,V2112])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2113,V2114,V2115])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2116)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2117)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2118)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2119)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2096)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2107)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2120,V2121,V2107)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2120,V2121,V2107)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2107)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2096)
| | | | | Redo: claim.time(claim12,V2094,V2095)
| | | | | Fail: claim.time(claim12,V2094,V2095)
| | | | | Redo: person.dob(person4,V2093)
| | | | | Fail: person.dob(person4,V2093)
| | | | | Redo: claim.claimant(claim12,V2092)
| | | | | Fail: claim.claimant(claim12,V2092)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2122)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2122)
| | | | Fail: covered_list_with_location(V2122)
| | | | Call: covered_list_with_service_provider(V2123)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2123)
| | | | Fail: covered_list_with_service_provider(V2123)
| | | | Call: covered_list(V2124)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2124)
| | | | Fail: covered_list(V2124)
| | | | Call: claim.location(claim12,V2125)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2126)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2127)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2127)
| Fail: claim.claimant(claim12,V2127)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2126)
| | | | Fail: claim.service_provider(claim12,V2126)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2125)
| | | | Fail: claim.location(claim12,V2125)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2091)
| | | Fail: claim.reason(claim12,V2091)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2090)
| | | Fail: claim.hospital(claim12,V2090)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2086)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2082)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2078)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2074)
| | | Redo: policy.enddate(policy1,person4,V2073)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2074)
| | | | Call: evaluate(parsedate(02_09_2023),[V2128,V2129,V2130])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2074)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2078)
| | | | Call: evaluate(parsedate(02_09_2023),[V2131,V2132,V2133])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2078)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2082)
| | | | Call: evaluate(parsedate(30_06_2024),[V2134,V2135,V2136])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2082)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2086)
| | | | Call: evaluate(parsedate(01_08_2023),[V2137,V2138,V2139])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2086)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2140)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2141)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2142)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2143)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2144,V2145)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2146)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2147,V2148,V2149])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2150,V2151,V2152])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2153)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2154)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2155)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2156)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2146)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2157)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2158,V2159,V2157)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2158,V2159,V2157)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2157)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2146)
| | | | | Redo: claim.time(claim12,V2144,V2145)
| | | | | Fail: claim.time(claim12,V2144,V2145)
| | | | | Redo: person.dob(person4,V2143)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2144,V2145)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2146)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2160,V2161,V2162])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2163,V2164,V2165])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2166)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2167)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2168)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2169)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2146)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2157)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2170,V2171,V2157)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2170,V2171,V2157)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2157)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2146)
| | | | | Redo: claim.time(claim12,V2144,V2145)
| | | | | Fail: claim.time(claim12,V2144,V2145)
| | | | | Redo: person.dob(person4,V2143)
| | | | | Fail: person.dob(person4,V2143)
| | | | | Redo: claim.claimant(claim12,V2142)
| | | | | Fail: claim.claimant(claim12,V2142)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2172)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2172)
| | | | Fail: covered_list_with_location(V2172)
| | | | Call: covered_list_with_service_provider(V2173)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2173)
| | | | Fail: covered_list_with_service_provider(V2173)
| | | | Call: covered_list(V2174)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2174)
| | | | Fail: covered_list(V2174)
| | | | Call: claim.location(claim12,V2175)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2176)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2177)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2177)
| Fail: claim.claimant(claim12,V2177)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2176)
| | | | Fail: claim.service_provider(claim12,V2176)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2175)
| | | | Fail: claim.location(claim12,V2175)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2141)
| | | Fail: claim.reason(claim12,V2141)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2140)
| | | Fail: claim.hospital(claim12,V2140)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2086)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2082)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2078)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2074)
| | | Redo: policy.enddate(policy1,person4,V2073)
| | | Fail: policy.enddate(policy1,person4,V2073)
| | | Redo: policy.startdate(policy1,person4,V2072)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2073)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2074)
| | | | Call: evaluate(parsedate(02_09_2023),[V2178,V2179,V2180])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2074)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2078)
| | | | Call: evaluate(parsedate(02_09_2023),[V2181,V2182,V2183])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2078)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2082)
| | | | Call: evaluate(parsedate(30_06_2024),[V2184,V2185,V2186])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2082)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2086)
| | | | Call: evaluate(parsedate(01_08_2023),[V2187,V2188,V2189])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2086)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2190)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2191)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2192)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2193)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2194,V2195)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2196)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2197,V2198,V2199])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2200,V2201,V2202])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2203)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2204)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2205)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2206)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2196)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2207)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2208,V2209,V2207)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2208,V2209,V2207)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2207)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2196)
| | | | | Redo: claim.time(claim12,V2194,V2195)
| | | | | Fail: claim.time(claim12,V2194,V2195)
| | | | | Redo: person.dob(person4,V2193)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2194,V2195)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2196)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2210,V2211,V2212])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2213,V2214,V2215])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2216)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2217)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2218)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2219)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2196)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2207)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2220,V2221,V2207)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2220,V2221,V2207)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2207)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2196)
| | | | | Redo: claim.time(claim12,V2194,V2195)
| | | | | Fail: claim.time(claim12,V2194,V2195)
| | | | | Redo: person.dob(person4,V2193)
| | | | | Fail: person.dob(person4,V2193)
| | | | | Redo: claim.claimant(claim12,V2192)
| | | | | Fail: claim.claimant(claim12,V2192)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2222)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2222)
| | | | Fail: covered_list_with_location(V2222)
| | | | Call: covered_list_with_service_provider(V2223)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2223)
| | | | Fail: covered_list_with_service_provider(V2223)
| | | | Call: covered_list(V2224)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2224)
| | | | Fail: covered_list(V2224)
| | | | Call: claim.location(claim12,V2225)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2226)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2227)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2227)
| Fail: claim.claimant(claim12,V2227)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2226)
| | | | Fail: claim.service_provider(claim12,V2226)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2225)
| | | | Fail: claim.location(claim12,V2225)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2191)
| | | Fail: claim.reason(claim12,V2191)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2190)
| | | Fail: claim.hospital(claim12,V2190)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2086)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2082)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2078)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2074)
| | | Redo: policy.enddate(policy1,person4,V2073)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2074)
| | | | Call: evaluate(parsedate(02_09_2023),[V2228,V2229,V2230])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2074)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2078)
| | | | Call: evaluate(parsedate(02_09_2023),[V2231,V2232,V2233])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2078)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2082)
| | | | Call: evaluate(parsedate(30_06_2024),[V2234,V2235,V2236])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2082)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2086)
| | | | Call: evaluate(parsedate(01_08_2023),[V2237,V2238,V2239])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2086)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2240)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2241)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2242)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2243)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2244,V2245)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2246)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2247,V2248,V2249])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2250,V2251,V2252])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2253)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2254)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2255)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2256)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2246)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2257)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2258,V2259,V2257)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2258,V2259,V2257)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2257)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2246)
| | | | | Redo: claim.time(claim12,V2244,V2245)
| | | | | Fail: claim.time(claim12,V2244,V2245)
| | | | | Redo: person.dob(person4,V2243)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2244,V2245)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2246)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2260,V2261,V2262])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2263,V2264,V2265])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2266)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2267)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2268)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2269)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2246)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2257)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2270,V2271,V2257)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2270,V2271,V2257)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2257)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2246)
| | | | | Redo: claim.time(claim12,V2244,V2245)
| | | | | Fail: claim.time(claim12,V2244,V2245)
| | | | | Redo: person.dob(person4,V2243)
| | | | | Fail: person.dob(person4,V2243)
| | | | | Redo: claim.claimant(claim12,V2242)
| | | | | Fail: claim.claimant(claim12,V2242)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2272)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2272)
| | | | Fail: covered_list_with_location(V2272)
| | | | Call: covered_list_with_service_provider(V2273)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2273)
| | | | Fail: covered_list_with_service_provider(V2273)
| | | | Call: covered_list(V2274)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2274)
| | | | Fail: covered_list(V2274)
| | | | Call: claim.location(claim12,V2275)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2276)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2277)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2277)
| Fail: claim.claimant(claim12,V2277)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2276)
| | | | Fail: claim.service_provider(claim12,V2276)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2275)
| | | | Fail: claim.location(claim12,V2275)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2241)
| | | Fail: claim.reason(claim12,V2241)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2240)
| | | Fail: claim.hospital(claim12,V2240)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2086)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2082)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2078)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2074)
| | | Redo: policy.enddate(policy1,person4,V2073)
| | | Fail: policy.enddate(policy1,person4,V2073)
| | | Redo: policy.startdate(policy1,person4,V2072)
| | | Fail: policy.startdate(policy1,person4,V2072)
| | | Redo: claim.hosp_end_time(claim12,V2070,V2071)
| | | Fail: claim.hosp_end_time(claim12,V2070,V2071)
| | | Redo: claim.hosp_start_time(claim12,V2068,V2069)
| | | Fail: claim.hosp_start_time(claim12,V2068,V2069)
| | | Redo: claim.claimant(claim12,V2067)
| | | Fail: claim.claimant(claim12,V2067)
| | Fail: policy_active(claim12,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim12,V1855)
| | | Fail: claim.claimant(claim12,V1855)
| | Fail: valid_insuree(claim12,policy1)
| Fail: covered_under_policy(claim12,policy1,cardinal)
| Redo: policy.type(policy1,V1854)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim12,policy1,cardinal)
| | Call: valid_insuree(claim12,policy1)
| | | Call: claim.claimant(claim12,V2278)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim12,policy1)
| | | Call: claim.claimant(claim12,V2279)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: claim.hosp_start_time(claim12,V2280,V2281)
| | | Exit: claim.hosp_start_time(claim12,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim12,V2282,V2283)
| | | Exit: claim.hosp_end_time(claim12,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V2284)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2285)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2286)
| | | | Call: evaluate(parsedate(02_09_2023),[V2287,V2288,V2289])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2286)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2290)
| | | | Call: evaluate(parsedate(02_09_2023),[V2291,V2292,V2293])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2290)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2294)
| | | | Call: evaluate(parsedate(30_06_2024),[V2295,V2296,V2297])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2294)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2298)
| | | | Call: evaluate(parsedate(01_08_2023),[V2299,V2300,V2301])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2298)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2302)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2303)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2304)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2305)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2306,V2307)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2308)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2309,V2310,V2311])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2312,V2313,V2314])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2315)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2316)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2317)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2318)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2308)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2319)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2320,V2321,V2319)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2320,V2321,V2319)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2319)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2308)
| | | | | Redo: claim.time(claim12,V2306,V2307)
| | | | | Fail: claim.time(claim12,V2306,V2307)
| | | | | Redo: person.dob(person4,V2305)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2306,V2307)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2308)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2322,V2323,V2324])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2325,V2326,V2327])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2328)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2329)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2330)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2331)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2308)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2319)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2332,V2333,V2319)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2332,V2333,V2319)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2319)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2308)
| | | | | Redo: claim.time(claim12,V2306,V2307)
| | | | | Fail: claim.time(claim12,V2306,V2307)
| | | | | Redo: person.dob(person4,V2305)
| | | | | Fail: person.dob(person4,V2305)
| | | | | Redo: claim.claimant(claim12,V2304)
| | | | | Fail: claim.claimant(claim12,V2304)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2334)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2334)
| | | | Fail: covered_list_with_location(V2334)
| | | | Call: covered_list_with_service_provider(V2335)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2335)
| | | | Fail: covered_list_with_service_provider(V2335)
| | | | Call: covered_list(V2336)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2336)
| | | | Fail: covered_list(V2336)
| | | | Call: claim.location(claim12,V2337)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2338)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2339)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2339)
| Fail: claim.claimant(claim12,V2339)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2338)
| | | | Fail: claim.service_provider(claim12,V2338)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2337)
| | | | Fail: claim.location(claim12,V2337)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2303)
| | | Fail: claim.reason(claim12,V2303)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2302)
| | | Fail: claim.hospital(claim12,V2302)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2298)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2294)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2290)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2286)
| | | Redo: policy.enddate(policy1,person4,V2285)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2286)
| | | | Call: evaluate(parsedate(02_09_2023),[V2340,V2341,V2342])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2286)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2290)
| | | | Call: evaluate(parsedate(02_09_2023),[V2343,V2344,V2345])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2290)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2294)
| | | | Call: evaluate(parsedate(30_06_2024),[V2346,V2347,V2348])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2294)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2298)
| | | | Call: evaluate(parsedate(01_08_2023),[V2349,V2350,V2351])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2298)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2352)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2353)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2354)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2355)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2356,V2357)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2358)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2359,V2360,V2361])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2362,V2363,V2364])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2365)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2366)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2367)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2368)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2358)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2369)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2370,V2371,V2369)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2370,V2371,V2369)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2369)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2358)
| | | | | Redo: claim.time(claim12,V2356,V2357)
| | | | | Fail: claim.time(claim12,V2356,V2357)
| | | | | Redo: person.dob(person4,V2355)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2356,V2357)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2358)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2372,V2373,V2374])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2375,V2376,V2377])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2378)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2379)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2380)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2381)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2358)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2369)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2382,V2383,V2369)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2382,V2383,V2369)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2369)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2358)
| | | | | Redo: claim.time(claim12,V2356,V2357)
| | | | | Fail: claim.time(claim12,V2356,V2357)
| | | | | Redo: person.dob(person4,V2355)
| | | | | Fail: person.dob(person4,V2355)
| | | | | Redo: claim.claimant(claim12,V2354)
| | | | | Fail: claim.claimant(claim12,V2354)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2384)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2384)
| | | | Fail: covered_list_with_location(V2384)
| | | | Call: covered_list_with_service_provider(V2385)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2385)
| | | | Fail: covered_list_with_service_provider(V2385)
| | | | Call: covered_list(V2386)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2386)
| | | | Fail: covered_list(V2386)
| | | | Call: claim.location(claim12,V2387)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2388)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2389)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2389)
| Fail: claim.claimant(claim12,V2389)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2388)
| | | | Fail: claim.service_provider(claim12,V2388)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2387)
| | | | Fail: claim.location(claim12,V2387)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2353)
| | | Fail: claim.reason(claim12,V2353)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2352)
| | | Fail: claim.hospital(claim12,V2352)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2298)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2294)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2290)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2286)
| | | Redo: policy.enddate(policy1,person4,V2285)
| | | Fail: policy.enddate(policy1,person4,V2285)
| | | Redo: policy.startdate(policy1,person4,V2284)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2285)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2286)
| | | | Call: evaluate(parsedate(02_09_2023),[V2390,V2391,V2392])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2286)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2290)
| | | | Call: evaluate(parsedate(02_09_2023),[V2393,V2394,V2395])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2290)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2294)
| | | | Call: evaluate(parsedate(30_06_2024),[V2396,V2397,V2398])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2294)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2298)
| | | | Call: evaluate(parsedate(01_08_2023),[V2399,V2400,V2401])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2298)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2402)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2403)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2404)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2405)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2406,V2407)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2408)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2409,V2410,V2411])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2412,V2413,V2414])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2415)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2416)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2417)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2418)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2408)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2419)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2420,V2421,V2419)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2420,V2421,V2419)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2419)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2408)
| | | | | Redo: claim.time(claim12,V2406,V2407)
| | | | | Fail: claim.time(claim12,V2406,V2407)
| | | | | Redo: person.dob(person4,V2405)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2406,V2407)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2408)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2422,V2423,V2424])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2425,V2426,V2427])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2428)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2429)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2430)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2431)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2408)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2419)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2432,V2433,V2419)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2432,V2433,V2419)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2419)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2408)
| | | | | Redo: claim.time(claim12,V2406,V2407)
| | | | | Fail: claim.time(claim12,V2406,V2407)
| | | | | Redo: person.dob(person4,V2405)
| | | | | Fail: person.dob(person4,V2405)
| | | | | Redo: claim.claimant(claim12,V2404)
| | | | | Fail: claim.claimant(claim12,V2404)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2434)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2434)
| | | | Fail: covered_list_with_location(V2434)
| | | | Call: covered_list_with_service_provider(V2435)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2435)
| | | | Fail: covered_list_with_service_provider(V2435)
| | | | Call: covered_list(V2436)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2436)
| | | | Fail: covered_list(V2436)
| | | | Call: claim.location(claim12,V2437)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2438)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2439)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2439)
| Fail: claim.claimant(claim12,V2439)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2438)
| | | | Fail: claim.service_provider(claim12,V2438)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2437)
| | | | Fail: claim.location(claim12,V2437)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2403)
| | | Fail: claim.reason(claim12,V2403)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2402)
| | | Fail: claim.hospital(claim12,V2402)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2298)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2294)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2290)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2286)
| | | Redo: policy.enddate(policy1,person4,V2285)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2286)
| | | | Call: evaluate(parsedate(02_09_2023),[V2440,V2441,V2442])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2286)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2290)
| | | | Call: evaluate(parsedate(02_09_2023),[V2443,V2444,V2445])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2290)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2294)
| | | | Call: evaluate(parsedate(30_06_2024),[V2446,V2447,V2448])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2294)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2298)
| | | | Call: evaluate(parsedate(01_08_2023),[V2449,V2450,V2451])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2298)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2452)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2453)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2454)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2455)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2456,V2457)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2458)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2459,V2460,V2461])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2462,V2463,V2464])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2465)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2466)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2467)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2468)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2458)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2469)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2470,V2471,V2469)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2470,V2471,V2469)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2469)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2458)
| | | | | Redo: claim.time(claim12,V2456,V2457)
| | | | | Fail: claim.time(claim12,V2456,V2457)
| | | | | Redo: person.dob(person4,V2455)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2456,V2457)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2458)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2472,V2473,V2474])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2475,V2476,V2477])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2478)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2479)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2480)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2481)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2458)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2469)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2482,V2483,V2469)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2482,V2483,V2469)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2469)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2458)
| | | | | Redo: claim.time(claim12,V2456,V2457)
| | | | | Fail: claim.time(claim12,V2456,V2457)
| | | | | Redo: person.dob(person4,V2455)
| | | | | Fail: person.dob(person4,V2455)
| | | | | Redo: claim.claimant(claim12,V2454)
| | | | | Fail: claim.claimant(claim12,V2454)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2484)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2484)
| | | | Fail: covered_list_with_location(V2484)
| | | | Call: covered_list_with_service_provider(V2485)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2485)
| | | | Fail: covered_list_with_service_provider(V2485)
| | | | Call: covered_list(V2486)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2486)
| | | | Fail: covered_list(V2486)
| | | | Call: claim.location(claim12,V2487)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2488)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2489)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2489)
| Fail: claim.claimant(claim12,V2489)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2488)
| | | | Fail: claim.service_provider(claim12,V2488)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2487)
| | | | Fail: claim.location(claim12,V2487)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2453)
| | | Fail: claim.reason(claim12,V2453)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2452)
| | | Fail: claim.hospital(claim12,V2452)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2298)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2294)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2290)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2286)
| | | Redo: policy.enddate(policy1,person4,V2285)
| | | Fail: policy.enddate(policy1,person4,V2285)
| | | Redo: policy.startdate(policy1,person4,V2284)
| | | Fail: policy.startdate(policy1,person4,V2284)
| | | Redo: claim.hosp_end_time(claim12,V2282,V2283)
| | | Fail: claim.hosp_end_time(claim12,V2282,V2283)
| | | Redo: claim.hosp_start_time(claim12,V2280,V2281)
| | | Fail: claim.hosp_start_time(claim12,V2280,V2281)
| | | Redo: claim.claimant(claim12,V2279)
| | | Fail: claim.claimant(claim12,V2279)
| | Fail: policy_active(claim12,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim12,policy1)
| | | Call: claim.claimant(claim12,V2490)
| | | Exit: claim.claimant(claim12,person4)
| | | Call: claim.hosp_start_time(claim12,V2491,V2492)
| | | Exit: claim.hosp_start_time(claim12,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim12,V2493,V2494)
| | | Exit: claim.hosp_end_time(claim12,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V2495)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2496)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2497)
| | | | Call: evaluate(parsedate(02_09_2023),[V2498,V2499,V2500])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2497)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2501)
| | | | Call: evaluate(parsedate(02_09_2023),[V2502,V2503,V2504])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2501)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2505)
| | | | Call: evaluate(parsedate(30_06_2024),[V2506,V2507,V2508])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2505)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2509)
| | | | Call: evaluate(parsedate(01_08_2023),[V2510,V2511,V2512])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2509)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2513)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2514)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2515)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2516)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2517,V2518)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2519)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2520,V2521,V2522])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2523,V2524,V2525])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2526)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2527)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2528)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2529)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2519)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2530)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2531,V2532,V2530)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2531,V2532,V2530)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2530)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2519)
| | | | | Redo: claim.time(claim12,V2517,V2518)
| | | | | Fail: claim.time(claim12,V2517,V2518)
| | | | | Redo: person.dob(person4,V2516)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2517,V2518)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2519)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2533,V2534,V2535])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2536,V2537,V2538])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2539)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2540)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2541)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2542)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2519)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2530)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2543,V2544,V2530)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2543,V2544,V2530)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2530)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2519)
| | | | | Redo: claim.time(claim12,V2517,V2518)
| | | | | Fail: claim.time(claim12,V2517,V2518)
| | | | | Redo: person.dob(person4,V2516)
| | | | | Fail: person.dob(person4,V2516)
| | | | | Redo: claim.claimant(claim12,V2515)
| | | | | Fail: claim.claimant(claim12,V2515)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2545)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2545)
| | | | Fail: covered_list_with_location(V2545)
| | | | Call: covered_list_with_service_provider(V2546)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2546)
| | | | Fail: covered_list_with_service_provider(V2546)
| | | | Call: covered_list(V2547)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2547)
| | | | Fail: covered_list(V2547)
| | | | Call: claim.location(claim12,V2548)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2549)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2550)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2550)
| Fail: claim.claimant(claim12,V2550)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2549)
| | | | Fail: claim.service_provider(claim12,V2549)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2548)
| | | | Fail: claim.location(claim12,V2548)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2514)
| | | Fail: claim.reason(claim12,V2514)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2513)
| | | Fail: claim.hospital(claim12,V2513)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2509)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2505)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2501)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2497)
| | | Redo: policy.enddate(policy1,person4,V2496)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2497)
| | | | Call: evaluate(parsedate(02_09_2023),[V2551,V2552,V2553])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2497)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2501)
| | | | Call: evaluate(parsedate(02_09_2023),[V2554,V2555,V2556])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2501)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2505)
| | | | Call: evaluate(parsedate(30_06_2024),[V2557,V2558,V2559])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2505)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2509)
| | | | Call: evaluate(parsedate(01_08_2023),[V2560,V2561,V2562])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2509)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2563)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2564)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2565)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2566)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2567,V2568)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2569)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2570,V2571,V2572])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2573,V2574,V2575])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2576)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2577)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2578)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2579)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2569)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2580)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2581,V2582,V2580)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2581,V2582,V2580)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2580)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2569)
| | | | | Redo: claim.time(claim12,V2567,V2568)
| | | | | Fail: claim.time(claim12,V2567,V2568)
| | | | | Redo: person.dob(person4,V2566)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2567,V2568)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2569)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2583,V2584,V2585])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2586,V2587,V2588])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2589)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2590)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2591)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2592)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2569)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2580)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2593,V2594,V2580)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2593,V2594,V2580)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2580)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2569)
| | | | | Redo: claim.time(claim12,V2567,V2568)
| | | | | Fail: claim.time(claim12,V2567,V2568)
| | | | | Redo: person.dob(person4,V2566)
| | | | | Fail: person.dob(person4,V2566)
| | | | | Redo: claim.claimant(claim12,V2565)
| | | | | Fail: claim.claimant(claim12,V2565)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2595)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2595)
| | | | Fail: covered_list_with_location(V2595)
| | | | Call: covered_list_with_service_provider(V2596)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2596)
| | | | Fail: covered_list_with_service_provider(V2596)
| | | | Call: covered_list(V2597)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2597)
| | | | Fail: covered_list(V2597)
| | | | Call: claim.location(claim12,V2598)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2599)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2600)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2600)
| Fail: claim.claimant(claim12,V2600)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2599)
| | | | Fail: claim.service_provider(claim12,V2599)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2598)
| | | | Fail: claim.location(claim12,V2598)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2564)
| | | Fail: claim.reason(claim12,V2564)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2563)
| | | Fail: claim.hospital(claim12,V2563)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2509)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2505)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2501)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2497)
| | | Redo: policy.enddate(policy1,person4,V2496)
| | | Fail: policy.enddate(policy1,person4,V2496)
| | | Redo: policy.startdate(policy1,person4,V2495)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2496)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2497)
| | | | Call: evaluate(parsedate(02_09_2023),[V2601,V2602,V2603])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2497)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2501)
| | | | Call: evaluate(parsedate(02_09_2023),[V2604,V2605,V2606])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2501)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2505)
| | | | Call: evaluate(parsedate(30_06_2024),[V2607,V2608,V2609])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2505)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2509)
| | | | Call: evaluate(parsedate(01_08_2023),[V2610,V2611,V2612])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2509)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2613)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2614)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2615)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2616)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2617,V2618)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2619)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2620,V2621,V2622])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2623,V2624,V2625])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2626)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2627)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2628)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2629)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2619)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2630)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2631,V2632,V2630)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2631,V2632,V2630)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2630)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2619)
| | | | | Redo: claim.time(claim12,V2617,V2618)
| | | | | Fail: claim.time(claim12,V2617,V2618)
| | | | | Redo: person.dob(person4,V2616)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2617,V2618)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2619)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2633,V2634,V2635])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2636,V2637,V2638])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2639)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2640)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2641)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2642)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2619)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2630)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2643,V2644,V2630)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2643,V2644,V2630)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2630)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2619)
| | | | | Redo: claim.time(claim12,V2617,V2618)
| | | | | Fail: claim.time(claim12,V2617,V2618)
| | | | | Redo: person.dob(person4,V2616)
| | | | | Fail: person.dob(person4,V2616)
| | | | | Redo: claim.claimant(claim12,V2615)
| | | | | Fail: claim.claimant(claim12,V2615)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2645)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2645)
| | | | Fail: covered_list_with_location(V2645)
| | | | Call: covered_list_with_service_provider(V2646)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2646)
| | | | Fail: covered_list_with_service_provider(V2646)
| | | | Call: covered_list(V2647)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2647)
| | | | Fail: covered_list(V2647)
| | | | Call: claim.location(claim12,V2648)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2649)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2650)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2650)
| Fail: claim.claimant(claim12,V2650)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2649)
| | | | Fail: claim.service_provider(claim12,V2649)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2648)
| | | | Fail: claim.location(claim12,V2648)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2614)
| | | Fail: claim.reason(claim12,V2614)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2613)
| | | Fail: claim.hospital(claim12,V2613)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2509)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2505)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2501)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2497)
| | | Redo: policy.enddate(policy1,person4,V2496)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2497)
| | | | Call: evaluate(parsedate(02_09_2023),[V2651,V2652,V2653])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2497)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2501)
| | | | Call: evaluate(parsedate(02_09_2023),[V2654,V2655,V2656])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2501)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2505)
| | | | Call: evaluate(parsedate(30_06_2024),[V2657,V2658,V2659])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2505)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2509)
| | | | Call: evaluate(parsedate(01_08_2023),[V2660,V2661,V2662])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2509)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim12,policy1)
| | | Call: claim.hospital(claim12,V2663)
| | | Exit: claim.hospital(claim12,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim12,V2664)
| | | Exit: claim.reason(claim12,outpatient_surgical_services)
| | | Call: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim12,V2665)
| | | | | Exit: claim.claimant(claim12,person4)
| | | | | Call: person.dob(person4,V2666)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2667,V2668)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2669)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2670,V2671,V2672])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2673,V2674,V2675])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2676)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2677)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2678)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2679)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2669)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2680)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2681,V2682,V2680)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2681,V2682,V2680)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2680)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2669)
| | | | | Redo: claim.time(claim12,V2667,V2668)
| | | | | Fail: claim.time(claim12,V2667,V2668)
| | | | | Redo: person.dob(person4,V2666)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim12,V2667,V2668)
| | | | | Exit: claim.time(claim12,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2669)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2683,V2684,V2685])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2686,V2687,V2688])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2689)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2690)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2691)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2692)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2669)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2680)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2693,V2694,V2680)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2693,V2694,V2680)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2680)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2669)
| | | | | Redo: claim.time(claim12,V2667,V2668)
| | | | | Fail: claim.time(claim12,V2667,V2668)
| | | | | Redo: person.dob(person4,V2666)
| | | | | Fail: person.dob(person4,V2666)
| | | | | Redo: claim.claimant(claim12,V2665)
| | | | | Fail: claim.claimant(claim12,V2665)
| | | | Fail: check_policy_year_limit(claim12,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2695)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2695)
| | | | Fail: covered_list_with_location(V2695)
| | | | Call: covered_list_with_service_provider(V2696)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2696)
| | | | Fail: covered_list_with_service_provider(V2696)
| | | | Call: covered_list(V2697)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2697)
| | | | Fail: covered_list(V2697)
| | | | Call: claim.location(claim12,V2698)
| | | | Exit: claim.location(claim12,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim12,V2699)
| | | | Exit: claim.service_provider(claim12,anesthetist)
| | | | Call: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Exit: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim12,policy1)
Call: exception(claim12,policy1)
| Call: claim.claimant(claim12,V2700)
| Exit: claim.claimant(claim12,person4)
| Call: person.occupation(person4,armed_forces)
| Fail: person.occupation(person4,armed_forces)
| Redo: claim.claimant(claim12,V2700)
| Fail: claim.claimant(claim12,V2700)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
| Call: claim.reason(claim12,home_health_care)
| Fail: claim.reason(claim12,home_health_care)
Fail: exception(claim12,policy1)
| | | Exit: ~exception(claim12,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim12)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Fail: valid_service_provider(outpatient_surgical_services,anesthetist)
| | | | Redo: claim.service_provider(claim12,V2699)
| | | | Fail: claim.service_provider(claim12,V2699)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim12,V2698)
| | | | Fail: claim.location(claim12,V2698)
| | | Fail: eligible_service(claim12,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim12,V2664)
| | | Fail: claim.reason(claim12,V2664)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim12,V2663)
| | | Fail: claim.hospital(claim12,V2663)
| | | Call: claim.reason(claim12,emergency_room)
| | | Fail: claim.reason(claim12,emergency_room)
| | Fail: valid_hospitalization(claim12,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2509)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2505)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2501)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2497)
| | | Redo: policy.enddate(policy1,person4,V2496)
| | | Fail: policy.enddate(policy1,person4,V2496)
| | | Redo: policy.startdate(policy1,person4,V2495)
| | | Fail: policy.startdate(policy1,person4,V2495)
| | | Redo: claim.hosp_end_time(claim12,V2493,V2494)
| | | Fail: claim.hosp_end_time(claim12,V2493,V2494)
| | | Redo: claim.hosp_start_time(claim12,V2491,V2492)
| | | Fail: claim.hosp_start_time(claim12,V2491,V2492)
| | | Redo: claim.claimant(claim12,V2490)
| | | Fail: claim.claimant(claim12,V2490)
| | Fail: policy_active(claim12,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim12,V2278)
| | | Fail: claim.claimant(claim12,V2278)
| | Fail: valid_insuree(claim12,policy1)
| Fail: covered_under_policy(claim12,policy1,cardinal)
| Redo: policy.type(policy1,V1854)
| Fail: policy.type(policy1,V1854)
| Redo: claim.policy(X,V1853)
| Exit: claim.policy(claim13,policy1)
| Call: policy.type(policy1,V1854)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim13,policy1,cardinal)
| | Call: valid_insuree(claim13,policy1)
| | | Call: claim.claimant(claim13,V2701)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim13,policy1)
| | | Call: claim.claimant(claim13,V2702)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: claim.hosp_start_time(claim13,V2703,V2704)
| | | Exit: claim.hosp_start_time(claim13,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim13,V2705,V2706)
| | | Exit: claim.hosp_end_time(claim13,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V2707)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2708)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2709)
| | | | Call: evaluate(parsedate(02_09_2023),[V2710,V2711,V2712])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2709)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2713)
| | | | Call: evaluate(parsedate(02_09_2023),[V2714,V2715,V2716])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2713)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2717)
| | | | Call: evaluate(parsedate(30_06_2024),[V2718,V2719,V2720])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2717)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2721)
| | | | Call: evaluate(parsedate(01_08_2023),[V2722,V2723,V2724])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2721)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2725)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2726)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2727)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2728)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2729,V2730)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2731)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2732,V2733,V2734])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2735,V2736,V2737])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2738)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2739)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2740)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2741)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2731)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2742)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2743,V2744,V2742)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2743,V2744,V2742)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2742)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2731)
| | | | | Redo: claim.time(claim13,V2729,V2730)
| | | | | Fail: claim.time(claim13,V2729,V2730)
| | | | | Redo: person.dob(person4,V2728)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2729,V2730)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2731)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2745,V2746,V2747])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2748,V2749,V2750])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2751)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2752)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2753)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2754)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2731)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2742)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2755,V2756,V2742)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2755,V2756,V2742)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2742)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2731)
| | | | | Redo: claim.time(claim13,V2729,V2730)
| | | | | Fail: claim.time(claim13,V2729,V2730)
| | | | | Redo: person.dob(person4,V2728)
| | | | | Fail: person.dob(person4,V2728)
| | | | | Redo: claim.claimant(claim13,V2727)
| | | | | Fail: claim.claimant(claim13,V2727)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2757)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2757)
| | | | Fail: covered_list_with_location(V2757)
| | | | Call: covered_list_with_service_provider(V2758)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2758)
| | | | Fail: covered_list_with_service_provider(V2758)
| | | | Call: covered_list(V2759)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2759)
| | | | Fail: covered_list(V2759)
| | | | Call: claim.location(claim13,V2760)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V2761)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V2761)
| | | | Fail: claim.service_provider(claim13,V2761)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V2760)
| | | | Fail: claim.location(claim13,V2760)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2726)
| | | Fail: claim.reason(claim13,V2726)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2725)
| | | Fail: claim.hospital(claim13,V2725)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2721)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2717)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2713)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2709)
| | | Redo: policy.enddate(policy1,person4,V2708)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2709)
| | | | Call: evaluate(parsedate(02_09_2023),[V2762,V2763,V2764])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2709)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2713)
| | | | Call: evaluate(parsedate(02_09_2023),[V2765,V2766,V2767])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2713)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2717)
| | | | Call: evaluate(parsedate(30_06_2024),[V2768,V2769,V2770])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2717)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2721)
| | | | Call: evaluate(parsedate(01_08_2023),[V2771,V2772,V2773])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2721)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2774)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2775)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2776)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2777)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2778,V2779)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2780)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2781,V2782,V2783])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2784,V2785,V2786])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2787)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2788)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2789)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2790)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2780)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2791)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2792,V2793,V2791)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2792,V2793,V2791)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2791)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2780)
| | | | | Redo: claim.time(claim13,V2778,V2779)
| | | | | Fail: claim.time(claim13,V2778,V2779)
| | | | | Redo: person.dob(person4,V2777)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2778,V2779)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2780)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2794,V2795,V2796])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2797,V2798,V2799])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2800)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2801)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2802)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2803)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2780)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2791)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2804,V2805,V2791)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2804,V2805,V2791)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2791)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2780)
| | | | | Redo: claim.time(claim13,V2778,V2779)
| | | | | Fail: claim.time(claim13,V2778,V2779)
| | | | | Redo: person.dob(person4,V2777)
| | | | | Fail: person.dob(person4,V2777)
| | | | | Redo: claim.claimant(claim13,V2776)
| | | | | Fail: claim.claimant(claim13,V2776)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2806)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2806)
| | | | Fail: covered_list_with_location(V2806)
| | | | Call: covered_list_with_service_provider(V2807)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2807)
| | | | Fail: covered_list_with_service_provider(V2807)
| | | | Call: covered_list(V2808)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2808)
| | | | Fail: covered_list(V2808)
| | | | Call: claim.location(claim13,V2809)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V2810)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V2810)
| | | | Fail: claim.service_provider(claim13,V2810)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V2809)
| | | | Fail: claim.location(claim13,V2809)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2775)
| | | Fail: claim.reason(claim13,V2775)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2774)
| | | Fail: claim.hospital(claim13,V2774)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2721)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2717)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2713)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2709)
| | | Redo: policy.enddate(policy1,person4,V2708)
| | | Fail: policy.enddate(policy1,person4,V2708)
| | | Redo: policy.startdate(policy1,person4,V2707)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2708)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2709)
| | | | Call: evaluate(parsedate(02_09_2023),[V2811,V2812,V2813])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2709)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2713)
| | | | Call: evaluate(parsedate(02_09_2023),[V2814,V2815,V2816])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2713)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2717)
| | | | Call: evaluate(parsedate(30_06_2024),[V2817,V2818,V2819])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2717)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2721)
| | | | Call: evaluate(parsedate(01_08_2023),[V2820,V2821,V2822])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2721)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2823)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2824)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2825)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2826)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2827,V2828)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2829)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2830,V2831,V2832])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2833,V2834,V2835])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2836)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2837)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2838)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2839)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2829)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2840)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2841,V2842,V2840)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2841,V2842,V2840)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2840)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2829)
| | | | | Redo: claim.time(claim13,V2827,V2828)
| | | | | Fail: claim.time(claim13,V2827,V2828)
| | | | | Redo: person.dob(person4,V2826)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2827,V2828)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2829)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2843,V2844,V2845])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2846,V2847,V2848])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2849)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2850)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2851)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2852)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2829)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2840)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2853,V2854,V2840)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2853,V2854,V2840)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2840)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2829)
| | | | | Redo: claim.time(claim13,V2827,V2828)
| | | | | Fail: claim.time(claim13,V2827,V2828)
| | | | | Redo: person.dob(person4,V2826)
| | | | | Fail: person.dob(person4,V2826)
| | | | | Redo: claim.claimant(claim13,V2825)
| | | | | Fail: claim.claimant(claim13,V2825)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2855)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2855)
| | | | Fail: covered_list_with_location(V2855)
| | | | Call: covered_list_with_service_provider(V2856)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2856)
| | | | Fail: covered_list_with_service_provider(V2856)
| | | | Call: covered_list(V2857)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2857)
| | | | Fail: covered_list(V2857)
| | | | Call: claim.location(claim13,V2858)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V2859)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V2859)
| | | | Fail: claim.service_provider(claim13,V2859)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V2858)
| | | | Fail: claim.location(claim13,V2858)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2824)
| | | Fail: claim.reason(claim13,V2824)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2823)
| | | Fail: claim.hospital(claim13,V2823)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2721)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2717)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2713)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2709)
| | | Redo: policy.enddate(policy1,person4,V2708)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2709)
| | | | Call: evaluate(parsedate(02_09_2023),[V2860,V2861,V2862])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2709)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2713)
| | | | Call: evaluate(parsedate(02_09_2023),[V2863,V2864,V2865])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2713)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2717)
| | | | Call: evaluate(parsedate(30_06_2024),[V2866,V2867,V2868])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2717)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2721)
| | | | Call: evaluate(parsedate(01_08_2023),[V2869,V2870,V2871])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2721)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2872)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2873)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2874)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2875)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2876,V2877)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2878)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2879,V2880,V2881])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2882,V2883,V2884])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2885)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2886)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2887)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2888)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2878)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2889)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2890,V2891,V2889)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2890,V2891,V2889)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2889)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2878)
| | | | | Redo: claim.time(claim13,V2876,V2877)
| | | | | Fail: claim.time(claim13,V2876,V2877)
| | | | | Redo: person.dob(person4,V2875)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2876,V2877)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2878)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2892,V2893,V2894])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2895,V2896,V2897])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2898)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2899)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2900)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2901)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2878)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2889)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2902,V2903,V2889)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2902,V2903,V2889)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2889)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2878)
| | | | | Redo: claim.time(claim13,V2876,V2877)
| | | | | Fail: claim.time(claim13,V2876,V2877)
| | | | | Redo: person.dob(person4,V2875)
| | | | | Fail: person.dob(person4,V2875)
| | | | | Redo: claim.claimant(claim13,V2874)
| | | | | Fail: claim.claimant(claim13,V2874)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2904)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2904)
| | | | Fail: covered_list_with_location(V2904)
| | | | Call: covered_list_with_service_provider(V2905)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2905)
| | | | Fail: covered_list_with_service_provider(V2905)
| | | | Call: covered_list(V2906)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2906)
| | | | Fail: covered_list(V2906)
| | | | Call: claim.location(claim13,V2907)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V2908)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V2908)
| | | | Fail: claim.service_provider(claim13,V2908)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V2907)
| | | | Fail: claim.location(claim13,V2907)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2873)
| | | Fail: claim.reason(claim13,V2873)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2872)
| | | Fail: claim.hospital(claim13,V2872)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2721)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2717)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2713)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2709)
| | | Redo: policy.enddate(policy1,person4,V2708)
| | | Fail: policy.enddate(policy1,person4,V2708)
| | | Redo: policy.startdate(policy1,person4,V2707)
| | | Fail: policy.startdate(policy1,person4,V2707)
| | | Redo: claim.hosp_end_time(claim13,V2705,V2706)
| | | Fail: claim.hosp_end_time(claim13,V2705,V2706)
| | | Redo: claim.hosp_start_time(claim13,V2703,V2704)
| | | Fail: claim.hosp_start_time(claim13,V2703,V2704)
| | | Redo: claim.claimant(claim13,V2702)
| | | Fail: claim.claimant(claim13,V2702)
| | Fail: policy_active(claim13,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim13,policy1)
| | | Call: claim.claimant(claim13,V2909)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: claim.hosp_start_time(claim13,V2910,V2911)
| | | Exit: claim.hosp_start_time(claim13,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim13,V2912,V2913)
| | | Exit: claim.hosp_end_time(claim13,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V2914)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2915)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2916)
| | | | Call: evaluate(parsedate(02_09_2023),[V2917,V2918,V2919])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2916)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2920)
| | | | Call: evaluate(parsedate(02_09_2023),[V2921,V2922,V2923])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2920)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2924)
| | | | Call: evaluate(parsedate(30_06_2024),[V2925,V2926,V2927])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2924)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2928)
| | | | Call: evaluate(parsedate(01_08_2023),[V2929,V2930,V2931])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2928)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2932)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2933)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2934)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2935)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2936,V2937)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2938)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2939,V2940,V2941])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2942,V2943,V2944])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2945)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2946)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2947)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2948)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2938)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2949)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2950,V2951,V2949)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2950,V2951,V2949)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2949)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2938)
| | | | | Redo: claim.time(claim13,V2936,V2937)
| | | | | Fail: claim.time(claim13,V2936,V2937)
| | | | | Redo: person.dob(person4,V2935)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2936,V2937)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2938)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2952,V2953,V2954])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2955,V2956,V2957])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2958)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2959)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2960)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2961)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2938)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2949)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2962,V2963,V2949)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2962,V2963,V2949)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2949)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2938)
| | | | | Redo: claim.time(claim13,V2936,V2937)
| | | | | Fail: claim.time(claim13,V2936,V2937)
| | | | | Redo: person.dob(person4,V2935)
| | | | | Fail: person.dob(person4,V2935)
| | | | | Redo: claim.claimant(claim13,V2934)
| | | | | Fail: claim.claimant(claim13,V2934)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V2964)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V2964)
| | | | Fail: covered_list_with_location(V2964)
| | | | Call: covered_list_with_service_provider(V2965)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V2965)
| | | | Fail: covered_list_with_service_provider(V2965)
| | | | Call: covered_list(V2966)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V2966)
| | | | Fail: covered_list(V2966)
| | | | Call: claim.location(claim13,V2967)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V2968)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V2968)
| | | | Fail: claim.service_provider(claim13,V2968)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V2967)
| | | | Fail: claim.location(claim13,V2967)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2933)
| | | Fail: claim.reason(claim13,V2933)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2932)
| | | Fail: claim.hospital(claim13,V2932)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2928)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2924)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2920)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2916)
| | | Redo: policy.enddate(policy1,person4,V2915)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2916)
| | | | Call: evaluate(parsedate(02_09_2023),[V2969,V2970,V2971])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2916)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2920)
| | | | Call: evaluate(parsedate(02_09_2023),[V2972,V2973,V2974])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2920)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2924)
| | | | Call: evaluate(parsedate(30_06_2024),[V2975,V2976,V2977])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2924)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2928)
| | | | Call: evaluate(parsedate(01_08_2023),[V2978,V2979,V2980])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2928)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V2981)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V2982)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V2983)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V2984)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2985,V2986)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2987)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V2988,V2989,V2990])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V2991,V2992,V2993])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V2994)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V2995)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V2996)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V2997)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2987)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2998)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V2999,V3000,V2998)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V2999,V3000,V2998)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2998)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2987)
| | | | | Redo: claim.time(claim13,V2985,V2986)
| | | | | Fail: claim.time(claim13,V2985,V2986)
| | | | | Redo: person.dob(person4,V2984)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V2985,V2986)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V2987)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3001,V3002,V3003])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3004,V3005,V3006])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3007)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3008)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3009)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3010)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V2987)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V2998)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3011,V3012,V2998)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3011,V3012,V2998)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V2998)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V2987)
| | | | | Redo: claim.time(claim13,V2985,V2986)
| | | | | Fail: claim.time(claim13,V2985,V2986)
| | | | | Redo: person.dob(person4,V2984)
| | | | | Fail: person.dob(person4,V2984)
| | | | | Redo: claim.claimant(claim13,V2983)
| | | | | Fail: claim.claimant(claim13,V2983)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3013)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3013)
| | | | Fail: covered_list_with_location(V3013)
| | | | Call: covered_list_with_service_provider(V3014)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3014)
| | | | Fail: covered_list_with_service_provider(V3014)
| | | | Call: covered_list(V3015)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3015)
| | | | Fail: covered_list(V3015)
| | | | Call: claim.location(claim13,V3016)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3017)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3017)
| | | | Fail: claim.service_provider(claim13,V3017)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3016)
| | | | Fail: claim.location(claim13,V3016)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V2982)
| | | Fail: claim.reason(claim13,V2982)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V2981)
| | | Fail: claim.hospital(claim13,V2981)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2928)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2924)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2920)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2916)
| | | Redo: policy.enddate(policy1,person4,V2915)
| | | Fail: policy.enddate(policy1,person4,V2915)
| | | Redo: policy.startdate(policy1,person4,V2914)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V2915)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2916)
| | | | Call: evaluate(parsedate(02_09_2023),[V3018,V3019,V3020])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2916)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2920)
| | | | Call: evaluate(parsedate(02_09_2023),[V3021,V3022,V3023])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2920)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2924)
| | | | Call: evaluate(parsedate(30_06_2024),[V3024,V3025,V3026])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2924)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2928)
| | | | Call: evaluate(parsedate(01_08_2023),[V3027,V3028,V3029])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2928)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3030)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3031)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3032)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3033)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3034,V3035)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3036)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3037,V3038,V3039])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3040,V3041,V3042])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3043)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3044)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3045)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3046)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3036)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3047)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3048,V3049,V3047)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3048,V3049,V3047)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3047)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3036)
| | | | | Redo: claim.time(claim13,V3034,V3035)
| | | | | Fail: claim.time(claim13,V3034,V3035)
| | | | | Redo: person.dob(person4,V3033)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3034,V3035)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3036)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3050,V3051,V3052])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3053,V3054,V3055])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3056)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3057)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3058)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3059)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3036)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3047)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3060,V3061,V3047)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3060,V3061,V3047)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3047)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3036)
| | | | | Redo: claim.time(claim13,V3034,V3035)
| | | | | Fail: claim.time(claim13,V3034,V3035)
| | | | | Redo: person.dob(person4,V3033)
| | | | | Fail: person.dob(person4,V3033)
| | | | | Redo: claim.claimant(claim13,V3032)
| | | | | Fail: claim.claimant(claim13,V3032)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3062)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3062)
| | | | Fail: covered_list_with_location(V3062)
| | | | Call: covered_list_with_service_provider(V3063)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3063)
| | | | Fail: covered_list_with_service_provider(V3063)
| | | | Call: covered_list(V3064)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3064)
| | | | Fail: covered_list(V3064)
| | | | Call: claim.location(claim13,V3065)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3066)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3066)
| | | | Fail: claim.service_provider(claim13,V3066)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3065)
| | | | Fail: claim.location(claim13,V3065)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3031)
| | | Fail: claim.reason(claim13,V3031)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3030)
| | | Fail: claim.hospital(claim13,V3030)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2928)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2924)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2920)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2916)
| | | Redo: policy.enddate(policy1,person4,V2915)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V2916)
| | | | Call: evaluate(parsedate(02_09_2023),[V3067,V3068,V3069])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2916)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V2920)
| | | | Call: evaluate(parsedate(02_09_2023),[V3070,V3071,V3072])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V2920)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V2924)
| | | | Call: evaluate(parsedate(30_06_2024),[V3073,V3074,V3075])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V2924)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V2928)
| | | | Call: evaluate(parsedate(01_08_2023),[V3076,V3077,V3078])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V2928)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3079)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3080)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3081)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3082)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3083,V3084)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3085)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3086,V3087,V3088])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3089,V3090,V3091])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3092)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3093)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3094)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3095)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3085)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3096)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3097,V3098,V3096)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3097,V3098,V3096)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3096)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3085)
| | | | | Redo: claim.time(claim13,V3083,V3084)
| | | | | Fail: claim.time(claim13,V3083,V3084)
| | | | | Redo: person.dob(person4,V3082)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3083,V3084)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3085)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3099,V3100,V3101])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3102,V3103,V3104])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3105)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3106)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3107)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3108)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3085)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3096)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3109,V3110,V3096)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3109,V3110,V3096)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3096)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3085)
| | | | | Redo: claim.time(claim13,V3083,V3084)
| | | | | Fail: claim.time(claim13,V3083,V3084)
| | | | | Redo: person.dob(person4,V3082)
| | | | | Fail: person.dob(person4,V3082)
| | | | | Redo: claim.claimant(claim13,V3081)
| | | | | Fail: claim.claimant(claim13,V3081)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3111)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3111)
| | | | Fail: covered_list_with_location(V3111)
| | | | Call: covered_list_with_service_provider(V3112)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3112)
| | | | Fail: covered_list_with_service_provider(V3112)
| | | | Call: covered_list(V3113)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3113)
| | | | Fail: covered_list(V3113)
| | | | Call: claim.location(claim13,V3114)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3115)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3115)
| | | | Fail: claim.service_provider(claim13,V3115)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3114)
| | | | Fail: claim.location(claim13,V3114)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3080)
| | | Fail: claim.reason(claim13,V3080)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3079)
| | | Fail: claim.hospital(claim13,V3079)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V2928)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V2924)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2920)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V2916)
| | | Redo: policy.enddate(policy1,person4,V2915)
| | | Fail: policy.enddate(policy1,person4,V2915)
| | | Redo: policy.startdate(policy1,person4,V2914)
| | | Fail: policy.startdate(policy1,person4,V2914)
| | | Redo: claim.hosp_end_time(claim13,V2912,V2913)
| | | Fail: claim.hosp_end_time(claim13,V2912,V2913)
| | | Redo: claim.hosp_start_time(claim13,V2910,V2911)
| | | Fail: claim.hosp_start_time(claim13,V2910,V2911)
| | | Redo: claim.claimant(claim13,V2909)
| | | Fail: claim.claimant(claim13,V2909)
| | Fail: policy_active(claim13,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim13,V2701)
| | | Fail: claim.claimant(claim13,V2701)
| | Fail: valid_insuree(claim13,policy1)
| Fail: covered_under_policy(claim13,policy1,cardinal)
| Redo: policy.type(policy1,V1854)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim13,policy1,cardinal)
| | Call: valid_insuree(claim13,policy1)
| | | Call: claim.claimant(claim13,V3116)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim13,policy1)
| | | Call: claim.claimant(claim13,V3117)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: claim.hosp_start_time(claim13,V3118,V3119)
| | | Exit: claim.hosp_start_time(claim13,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim13,V3120,V3121)
| | | Exit: claim.hosp_end_time(claim13,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V3122)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V3123)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3124)
| | | | Call: evaluate(parsedate(02_09_2023),[V3125,V3126,V3127])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3124)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3128)
| | | | Call: evaluate(parsedate(02_09_2023),[V3129,V3130,V3131])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3128)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3132)
| | | | Call: evaluate(parsedate(30_06_2024),[V3133,V3134,V3135])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3132)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3136)
| | | | Call: evaluate(parsedate(01_08_2023),[V3137,V3138,V3139])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3136)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3140)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3141)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3142)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3143)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3144,V3145)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3146)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3147,V3148,V3149])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3150,V3151,V3152])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3153)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3154)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3155)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3156)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3146)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3157)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3158,V3159,V3157)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3158,V3159,V3157)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3157)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3146)
| | | | | Redo: claim.time(claim13,V3144,V3145)
| | | | | Fail: claim.time(claim13,V3144,V3145)
| | | | | Redo: person.dob(person4,V3143)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3144,V3145)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3146)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3160,V3161,V3162])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3163,V3164,V3165])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3166)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3167)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3168)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3169)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3146)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3157)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3170,V3171,V3157)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3170,V3171,V3157)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3157)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3146)
| | | | | Redo: claim.time(claim13,V3144,V3145)
| | | | | Fail: claim.time(claim13,V3144,V3145)
| | | | | Redo: person.dob(person4,V3143)
| | | | | Fail: person.dob(person4,V3143)
| | | | | Redo: claim.claimant(claim13,V3142)
| | | | | Fail: claim.claimant(claim13,V3142)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3172)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3172)
| | | | Fail: covered_list_with_location(V3172)
| | | | Call: covered_list_with_service_provider(V3173)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3173)
| | | | Fail: covered_list_with_service_provider(V3173)
| | | | Call: covered_list(V3174)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3174)
| | | | Fail: covered_list(V3174)
| | | | Call: claim.location(claim13,V3175)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3176)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3176)
| | | | Fail: claim.service_provider(claim13,V3176)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3175)
| | | | Fail: claim.location(claim13,V3175)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3141)
| | | Fail: claim.reason(claim13,V3141)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3140)
| | | Fail: claim.hospital(claim13,V3140)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3136)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3132)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3128)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3124)
| | | Redo: policy.enddate(policy1,person4,V3123)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3124)
| | | | Call: evaluate(parsedate(02_09_2023),[V3177,V3178,V3179])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3124)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3128)
| | | | Call: evaluate(parsedate(02_09_2023),[V3180,V3181,V3182])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3128)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3132)
| | | | Call: evaluate(parsedate(30_06_2024),[V3183,V3184,V3185])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3132)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3136)
| | | | Call: evaluate(parsedate(01_08_2023),[V3186,V3187,V3188])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3136)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3189)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3190)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3191)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3192)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3193,V3194)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3195)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3196,V3197,V3198])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3199,V3200,V3201])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3202)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3203)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3204)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3205)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3195)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3206)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3207,V3208,V3206)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3207,V3208,V3206)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3206)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3195)
| | | | | Redo: claim.time(claim13,V3193,V3194)
| | | | | Fail: claim.time(claim13,V3193,V3194)
| | | | | Redo: person.dob(person4,V3192)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3193,V3194)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3195)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3209,V3210,V3211])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3212,V3213,V3214])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3215)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3216)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3217)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3218)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3195)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3206)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3219,V3220,V3206)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3219,V3220,V3206)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3206)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3195)
| | | | | Redo: claim.time(claim13,V3193,V3194)
| | | | | Fail: claim.time(claim13,V3193,V3194)
| | | | | Redo: person.dob(person4,V3192)
| | | | | Fail: person.dob(person4,V3192)
| | | | | Redo: claim.claimant(claim13,V3191)
| | | | | Fail: claim.claimant(claim13,V3191)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3221)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3221)
| | | | Fail: covered_list_with_location(V3221)
| | | | Call: covered_list_with_service_provider(V3222)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3222)
| | | | Fail: covered_list_with_service_provider(V3222)
| | | | Call: covered_list(V3223)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3223)
| | | | Fail: covered_list(V3223)
| | | | Call: claim.location(claim13,V3224)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3225)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3225)
| | | | Fail: claim.service_provider(claim13,V3225)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3224)
| | | | Fail: claim.location(claim13,V3224)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3190)
| | | Fail: claim.reason(claim13,V3190)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3189)
| | | Fail: claim.hospital(claim13,V3189)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3136)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3132)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3128)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3124)
| | | Redo: policy.enddate(policy1,person4,V3123)
| | | Fail: policy.enddate(policy1,person4,V3123)
| | | Redo: policy.startdate(policy1,person4,V3122)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V3123)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3124)
| | | | Call: evaluate(parsedate(02_09_2023),[V3226,V3227,V3228])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3124)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3128)
| | | | Call: evaluate(parsedate(02_09_2023),[V3229,V3230,V3231])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3128)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3132)
| | | | Call: evaluate(parsedate(30_06_2024),[V3232,V3233,V3234])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3132)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3136)
| | | | Call: evaluate(parsedate(01_08_2023),[V3235,V3236,V3237])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3136)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3238)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3239)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3240)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3241)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3242,V3243)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3244)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3245,V3246,V3247])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3248,V3249,V3250])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3251)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3252)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3253)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3254)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3244)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3255)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3256,V3257,V3255)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3256,V3257,V3255)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3255)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3244)
| | | | | Redo: claim.time(claim13,V3242,V3243)
| | | | | Fail: claim.time(claim13,V3242,V3243)
| | | | | Redo: person.dob(person4,V3241)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3242,V3243)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3244)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3258,V3259,V3260])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3261,V3262,V3263])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3264)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3265)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3266)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3267)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3244)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3255)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3268,V3269,V3255)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3268,V3269,V3255)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3255)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3244)
| | | | | Redo: claim.time(claim13,V3242,V3243)
| | | | | Fail: claim.time(claim13,V3242,V3243)
| | | | | Redo: person.dob(person4,V3241)
| | | | | Fail: person.dob(person4,V3241)
| | | | | Redo: claim.claimant(claim13,V3240)
| | | | | Fail: claim.claimant(claim13,V3240)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3270)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3270)
| | | | Fail: covered_list_with_location(V3270)
| | | | Call: covered_list_with_service_provider(V3271)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3271)
| | | | Fail: covered_list_with_service_provider(V3271)
| | | | Call: covered_list(V3272)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3272)
| | | | Fail: covered_list(V3272)
| | | | Call: claim.location(claim13,V3273)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3274)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3274)
| | | | Fail: claim.service_provider(claim13,V3274)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3273)
| | | | Fail: claim.location(claim13,V3273)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3239)
| | | Fail: claim.reason(claim13,V3239)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3238)
| | | Fail: claim.hospital(claim13,V3238)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3136)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3132)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3128)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3124)
| | | Redo: policy.enddate(policy1,person4,V3123)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3124)
| | | | Call: evaluate(parsedate(02_09_2023),[V3275,V3276,V3277])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3124)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3128)
| | | | Call: evaluate(parsedate(02_09_2023),[V3278,V3279,V3280])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3128)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3132)
| | | | Call: evaluate(parsedate(30_06_2024),[V3281,V3282,V3283])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3132)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3136)
| | | | Call: evaluate(parsedate(01_08_2023),[V3284,V3285,V3286])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3136)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3287)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3288)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3289)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3290)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3291,V3292)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3293)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3294,V3295,V3296])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3297,V3298,V3299])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3300)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3301)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3302)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3303)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3293)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3304)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3305,V3306,V3304)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3305,V3306,V3304)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3304)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3293)
| | | | | Redo: claim.time(claim13,V3291,V3292)
| | | | | Fail: claim.time(claim13,V3291,V3292)
| | | | | Redo: person.dob(person4,V3290)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3291,V3292)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3293)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3307,V3308,V3309])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3310,V3311,V3312])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3313)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3314)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3315)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3316)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3293)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3304)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3317,V3318,V3304)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3317,V3318,V3304)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3304)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3293)
| | | | | Redo: claim.time(claim13,V3291,V3292)
| | | | | Fail: claim.time(claim13,V3291,V3292)
| | | | | Redo: person.dob(person4,V3290)
| | | | | Fail: person.dob(person4,V3290)
| | | | | Redo: claim.claimant(claim13,V3289)
| | | | | Fail: claim.claimant(claim13,V3289)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3319)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3319)
| | | | Fail: covered_list_with_location(V3319)
| | | | Call: covered_list_with_service_provider(V3320)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3320)
| | | | Fail: covered_list_with_service_provider(V3320)
| | | | Call: covered_list(V3321)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3321)
| | | | Fail: covered_list(V3321)
| | | | Call: claim.location(claim13,V3322)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3323)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3323)
| | | | Fail: claim.service_provider(claim13,V3323)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3322)
| | | | Fail: claim.location(claim13,V3322)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3288)
| | | Fail: claim.reason(claim13,V3288)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3287)
| | | Fail: claim.hospital(claim13,V3287)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3136)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3132)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3128)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3124)
| | | Redo: policy.enddate(policy1,person4,V3123)
| | | Fail: policy.enddate(policy1,person4,V3123)
| | | Redo: policy.startdate(policy1,person4,V3122)
| | | Fail: policy.startdate(policy1,person4,V3122)
| | | Redo: claim.hosp_end_time(claim13,V3120,V3121)
| | | Fail: claim.hosp_end_time(claim13,V3120,V3121)
| | | Redo: claim.hosp_start_time(claim13,V3118,V3119)
| | | Fail: claim.hosp_start_time(claim13,V3118,V3119)
| | | Redo: claim.claimant(claim13,V3117)
| | | Fail: claim.claimant(claim13,V3117)
| | Fail: policy_active(claim13,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Exit: policy.insuree(policy1,person4)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim13,policy1)
| | | Call: claim.claimant(claim13,V3324)
| | | Exit: claim.claimant(claim13,person4)
| | | Call: claim.hosp_start_time(claim13,V3325,V3326)
| | | Exit: claim.hosp_start_time(claim13,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim13,V3327,V3328)
| | | Exit: claim.hosp_end_time(claim13,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person4,V3329)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V3330)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3331)
| | | | Call: evaluate(parsedate(02_09_2023),[V3332,V3333,V3334])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3331)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3335)
| | | | Call: evaluate(parsedate(02_09_2023),[V3336,V3337,V3338])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3335)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3339)
| | | | Call: evaluate(parsedate(30_06_2024),[V3340,V3341,V3342])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3339)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3343)
| | | | Call: evaluate(parsedate(01_08_2023),[V3344,V3345,V3346])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3343)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3347)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3348)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3349)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3350)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3351,V3352)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3353)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3354,V3355,V3356])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3357,V3358,V3359])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3360)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3361)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3362)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3363)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3353)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3364)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3365,V3366,V3364)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3365,V3366,V3364)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3364)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3353)
| | | | | Redo: claim.time(claim13,V3351,V3352)
| | | | | Fail: claim.time(claim13,V3351,V3352)
| | | | | Redo: person.dob(person4,V3350)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3351,V3352)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3353)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3367,V3368,V3369])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3370,V3371,V3372])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3373)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3374)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3375)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3376)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3353)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3364)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3377,V3378,V3364)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3377,V3378,V3364)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3364)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3353)
| | | | | Redo: claim.time(claim13,V3351,V3352)
| | | | | Fail: claim.time(claim13,V3351,V3352)
| | | | | Redo: person.dob(person4,V3350)
| | | | | Fail: person.dob(person4,V3350)
| | | | | Redo: claim.claimant(claim13,V3349)
| | | | | Fail: claim.claimant(claim13,V3349)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3379)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3379)
| | | | Fail: covered_list_with_location(V3379)
| | | | Call: covered_list_with_service_provider(V3380)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3380)
| | | | Fail: covered_list_with_service_provider(V3380)
| | | | Call: covered_list(V3381)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3381)
| | | | Fail: covered_list(V3381)
| | | | Call: claim.location(claim13,V3382)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3383)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3383)
| | | | Fail: claim.service_provider(claim13,V3383)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3382)
| | | | Fail: claim.location(claim13,V3382)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3348)
| | | Fail: claim.reason(claim13,V3348)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3347)
| | | Fail: claim.hospital(claim13,V3347)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3343)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3339)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3335)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3331)
| | | Redo: policy.enddate(policy1,person4,V3330)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3331)
| | | | Call: evaluate(parsedate(02_09_2023),[V3384,V3385,V3386])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3331)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3335)
| | | | Call: evaluate(parsedate(02_09_2023),[V3387,V3388,V3389])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3335)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3339)
| | | | Call: evaluate(parsedate(30_06_2024),[V3390,V3391,V3392])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3339)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3343)
| | | | Call: evaluate(parsedate(01_08_2023),[V3393,V3394,V3395])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3343)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3396)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3397)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3398)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3399)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3400,V3401)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3402)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3403,V3404,V3405])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3406,V3407,V3408])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3409)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3410)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3411)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3412)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3402)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3413)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3414,V3415,V3413)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3414,V3415,V3413)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3413)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3402)
| | | | | Redo: claim.time(claim13,V3400,V3401)
| | | | | Fail: claim.time(claim13,V3400,V3401)
| | | | | Redo: person.dob(person4,V3399)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3400,V3401)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3402)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3416,V3417,V3418])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3419,V3420,V3421])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3422)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3423)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3424)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3425)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3402)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3413)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3426,V3427,V3413)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3426,V3427,V3413)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3413)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3402)
| | | | | Redo: claim.time(claim13,V3400,V3401)
| | | | | Fail: claim.time(claim13,V3400,V3401)
| | | | | Redo: person.dob(person4,V3399)
| | | | | Fail: person.dob(person4,V3399)
| | | | | Redo: claim.claimant(claim13,V3398)
| | | | | Fail: claim.claimant(claim13,V3398)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3428)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3428)
| | | | Fail: covered_list_with_location(V3428)
| | | | Call: covered_list_with_service_provider(V3429)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3429)
| | | | Fail: covered_list_with_service_provider(V3429)
| | | | Call: covered_list(V3430)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3430)
| | | | Fail: covered_list(V3430)
| | | | Call: claim.location(claim13,V3431)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3432)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3432)
| | | | Fail: claim.service_provider(claim13,V3432)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3431)
| | | | Fail: claim.location(claim13,V3431)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3397)
| | | Fail: claim.reason(claim13,V3397)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3396)
| | | Fail: claim.hospital(claim13,V3396)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3343)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3339)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3335)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3331)
| | | Redo: policy.enddate(policy1,person4,V3330)
| | | Fail: policy.enddate(policy1,person4,V3330)
| | | Redo: policy.startdate(policy1,person4,V3329)
| | | Exit: policy.startdate(policy1,person4,01_08_2023)
| | | Call: policy.enddate(policy1,person4,V3330)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3331)
| | | | Call: evaluate(parsedate(02_09_2023),[V3433,V3434,V3435])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3331)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3335)
| | | | Call: evaluate(parsedate(02_09_2023),[V3436,V3437,V3438])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3335)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3339)
| | | | Call: evaluate(parsedate(30_06_2024),[V3439,V3440,V3441])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3339)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3343)
| | | | Call: evaluate(parsedate(01_08_2023),[V3442,V3443,V3444])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3343)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3445)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3446)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3447)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3448)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3449,V3450)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3451)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3452,V3453,V3454])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3455,V3456,V3457])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3458)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3459)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3460)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3461)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3451)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3462)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3463,V3464,V3462)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3463,V3464,V3462)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3462)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3451)
| | | | | Redo: claim.time(claim13,V3449,V3450)
| | | | | Fail: claim.time(claim13,V3449,V3450)
| | | | | Redo: person.dob(person4,V3448)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3449,V3450)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3451)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3465,V3466,V3467])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3468,V3469,V3470])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3471)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3472)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3473)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3474)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3451)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3462)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3475,V3476,V3462)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3475,V3476,V3462)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3462)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3451)
| | | | | Redo: claim.time(claim13,V3449,V3450)
| | | | | Fail: claim.time(claim13,V3449,V3450)
| | | | | Redo: person.dob(person4,V3448)
| | | | | Fail: person.dob(person4,V3448)
| | | | | Redo: claim.claimant(claim13,V3447)
| | | | | Fail: claim.claimant(claim13,V3447)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3477)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3477)
| | | | Fail: covered_list_with_location(V3477)
| | | | Call: covered_list_with_service_provider(V3478)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3478)
| | | | Fail: covered_list_with_service_provider(V3478)
| | | | Call: covered_list(V3479)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3479)
| | | | Fail: covered_list(V3479)
| | | | Call: claim.location(claim13,V3480)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3481)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3481)
| | | | Fail: claim.service_provider(claim13,V3481)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3480)
| | | | Fail: claim.location(claim13,V3480)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3446)
| | | Fail: claim.reason(claim13,V3446)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3445)
| | | Fail: claim.hospital(claim13,V3445)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3343)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3339)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3335)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3331)
| | | Redo: policy.enddate(policy1,person4,V3330)
| | | Exit: policy.enddate(policy1,person4,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3331)
| | | | Call: evaluate(parsedate(02_09_2023),[V3482,V3483,V3484])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3331)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3335)
| | | | Call: evaluate(parsedate(02_09_2023),[V3485,V3486,V3487])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3335)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3339)
| | | | Call: evaluate(parsedate(30_06_2024),[V3488,V3489,V3490])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3339)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3343)
| | | | Call: evaluate(parsedate(01_08_2023),[V3491,V3492,V3493])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3343)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim13,policy1)
| | | Call: claim.hospital(claim13,V3494)
| | | Exit: claim.hospital(claim13,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim13,V3495)
| | | Exit: claim.reason(claim13,outpatient_surgical_services)
| | | Call: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | | Call: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | | Call: claim.claimant(claim13,V3496)
| | | | | Exit: claim.claimant(claim13,person4)
| | | | | Call: person.dob(person4,V3497)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3498,V3499)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3500)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3501,V3502,V3503])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3504,V3505,V3506])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3507)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3508)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3509)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3510)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3500)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3511)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3512,V3513,V3511)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3512,V3513,V3511)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3511)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3500)
| | | | | Redo: claim.time(claim13,V3498,V3499)
| | | | | Fail: claim.time(claim13,V3498,V3499)
| | | | | Redo: person.dob(person4,V3497)
| | | | | Exit: person.dob(person4,01_01_2001)
| | | | | Call: claim.time(claim13,V3498,V3499)
| | | | | Exit: claim.time(claim13,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3500)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3514,V3515,V3516])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3517,V3518,V3519])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3520)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3521)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3522)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3523)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3500)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(outpatient_surgical_services,23,V3511)
| | | | | | Call: yearly_visit_limit(outpatient_surgical_services,V3524,V3525,V3511)
| | | | | | Fail: yearly_visit_limit(outpatient_surgical_services,V3524,V3525,V3511)
| | | | | Fail: yearly_visit_limit(outpatient_surgical_services,23,V3511)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3500)
| | | | | Redo: claim.time(claim13,V3498,V3499)
| | | | | Fail: claim.time(claim13,V3498,V3499)
| | | | | Redo: person.dob(person4,V3497)
| | | | | Fail: person.dob(person4,V3497)
| | | | | Redo: claim.claimant(claim13,V3496)
| | | | | Fail: claim.claimant(claim13,V3496)
| | | | Fail: check_policy_year_limit(claim13,outpatient_surgical_services)
| | | | Call: covered_list_with_location(V3526)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(outpatient_surgical_services,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3526)
| | | | Fail: covered_list_with_location(V3526)
| | | | Call: covered_list_with_service_provider(V3527)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(outpatient_surgical_services,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3527)
| | | | Fail: covered_list_with_service_provider(V3527)
| | | | Call: covered_list(V3528)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(outpatient_surgical_services,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3528)
| | | | Fail: covered_list(V3528)
| | | | Call: claim.location(claim13,V3529)
| | | | Exit: claim.location(claim13,outpatient_dept)
| | | | Call: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Exit: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Call: claim.service_provider(claim13,V3530)
| | | | Exit: claim.service_provider(claim13,other)
| | | | Call: valid_service_provider(outpatient_surgical_services,other)
| | | | Fail: valid_service_provider(outpatient_surgical_services,other)
| | | | Redo: claim.service_provider(claim13,V3530)
| | | | Fail: claim.service_provider(claim13,V3530)
| | | | Redo: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Fail: valid_location(outpatient_surgical_services,outpatient_dept)
| | | | Redo: claim.location(claim13,V3529)
| | | | Fail: claim.location(claim13,V3529)
| | | Fail: eligible_service(claim13,policy1,outpatient_surgical_services)
| | | Redo: claim.reason(claim13,V3495)
| | | Fail: claim.reason(claim13,V3495)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim13,V3494)
| | | Fail: claim.hospital(claim13,V3494)
| | | Call: claim.reason(claim13,emergency_room)
| | | Fail: claim.reason(claim13,emergency_room)
| | Fail: valid_hospitalization(claim13,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3343)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3339)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3335)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3331)
| | | Redo: policy.enddate(policy1,person4,V3330)
| | | Fail: policy.enddate(policy1,person4,V3330)
| | | Redo: policy.startdate(policy1,person4,V3329)
| | | Fail: policy.startdate(policy1,person4,V3329)
| | | Redo: claim.hosp_end_time(claim13,V3327,V3328)
| | | Fail: claim.hosp_end_time(claim13,V3327,V3328)
| | | Redo: claim.hosp_start_time(claim13,V3325,V3326)
| | | Fail: claim.hosp_start_time(claim13,V3325,V3326)
| | | Redo: claim.claimant(claim13,V3324)
| | | Fail: claim.claimant(claim13,V3324)
| | Fail: policy_active(claim13,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person4)
| | | Fail: policy.insuree(policy1,person4)
| | | Redo: claim.claimant(claim13,V3116)
| | | Fail: claim.claimant(claim13,V3116)
| | Fail: valid_insuree(claim13,policy1)
| Fail: covered_under_policy(claim13,policy1,cardinal)
| Redo: policy.type(policy1,V1854)
| Fail: policy.type(policy1,V1854)
| Redo: claim.policy(X,V1853)
| Fail: claim.policy(X,V1853)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_outpatient_surgical_services.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim12' ]
RESULTS: [ 'claim12' ]
===== TEST SUCCEEDED: Test test_cases_outpatient_surgical_services.hdf===== 
Expected Result:  [ 'claim3' ]
Call: covered(X)
| Call: claim.policy(X,V3531)
| Exit: claim.policy(claim3,policy1)
| Call: policy.type(policy1,V3532)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim3,policy1,cardinal)
| | Call: valid_insuree(claim3,policy1)
| | | Call: claim.claimant(claim3,V3533)
| | | Exit: claim.claimant(claim3,person2)
| | | Call: policy.insuree(policy1,person2)
| | | Exit: policy.insuree(policy1,person2)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim3,policy1)
| | | Call: claim.claimant(claim3,V3534)
| | | Exit: claim.claimant(claim3,person2)
| | | Call: claim.hosp_start_time(claim3,V3535,V3536)
| | | Exit: claim.hosp_start_time(claim3,02_09_2023,00_00)
| | | Call: claim.hosp_end_time(claim3,V3537,V3538)
| | | Exit: claim.hosp_end_time(claim3,02_09_2023,01_13)
| | | Call: policy.startdate(policy1,person2,V3539)
| | | Exit: policy.startdate(policy1,person2,01_08_2023)
| | | Call: policy.enddate(policy1,person2,V3540)
| | | Exit: policy.enddate(policy1,person2,30_06_2024)
| | | Call: get_timestamp_from_date(02_09_2023,V3541)
| | | | Call: evaluate(parsedate(02_09_2023),[V3542,V3543,V3544])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3541)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_09_2023,V3545)
| | | | Call: evaluate(parsedate(02_09_2023),[V3546,V3547,V3548])
| | | | Exit: evaluate(parsedate(02_09_2023),[02,09,2023])
| | | | Call: evaluate(maketimestamp(2023,09,02,0,0,0),V3545)
| | | | Exit: evaluate(maketimestamp(2023,09,02,0,0,0),1693638000000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3549)
| | | | Call: evaluate(parsedate(30_06_2024),[V3550,V3551,V3552])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3549)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3553)
| | | | Call: evaluate(parsedate(01_08_2023),[V3554,V3555,V3556])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3553)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1693638000000)
| | | Exit: leq(1690873200000,1693638000000)
| | | Call: leq(1693638000000,1719730800000)
| | | Exit: leq(1693638000000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim3,policy1)
| | | Call: claim.hospital(claim3,V3557)
| | | Exit: claim.hospital(claim3,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim3,V3558)
| | | Exit: claim.reason(claim3,routine_physical)
| | | Call: eligible_service(claim3,policy1,routine_physical)
| | | | Call: check_policy_year_limit(claim3,routine_physical)
| | | | | Call: claim.claimant(claim3,V3559)
| | | | | Exit: claim.claimant(claim3,person2)
| | | | | Call: person.dob(person2,V3560)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim3,V3561,V3562)
| | | | | Exit: claim.time(claim3,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3563)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3564,V3565,V3566])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3567,V3568,V3569])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3570)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3571)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3572)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3573)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3563)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V3574)
| | | | | | Call: yearly_visit_limit(routine_physical,V3575,V3576,V3574)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V3577)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3575,V3576,V3574)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V3577)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V3578,visit_current_year(routine_physical,claim3,V3578)),1),V3579)
| | | | | Exit: evaluate(plus(countofall(V3581,visit_current_year(routine_physical,claim3,V3581)),1),1)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim3,V3582)
| | | | Exit: claim.location(claim3,phys_office)
| | | | Call: valid_location(routine_physical,phys_office)
| | | | Exit: valid_location(routine_physical,phys_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim3,policy1)
Call: exception(claim3,policy1)
| Call: claim.claimant(claim3,V3583)
| Exit: claim.claimant(claim3,person2)
| Call: person.occupation(person2,armed_forces)
| Fail: person.occupation(person2,armed_forces)
| Redo: claim.claimant(claim3,V3583)
| Fail: claim.claimant(claim3,V3583)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
Fail: exception(claim3,policy1)
| | | Exit: ~exception(claim3,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim3)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(routine_physical,phys_office)
| | | | Fail: valid_location(routine_physical,phys_office)
| | | | Redo: claim.location(claim3,V3582)
| | | | Fail: claim.location(claim3,V3582)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3575,V3576,V3574)
| | | | | | Fail: yearly_visit_limit(routine_physical,V3575,V3576,V3574)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V3574)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3563)
| | | | | Redo: claim.time(claim3,V3561,V3562)
| | | | | Fail: claim.time(claim3,V3561,V3562)
| | | | | Redo: person.dob(person2,V3560)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim3,V3561,V3562)
| | | | | Exit: claim.time(claim3,01_01_2024,00_00)
| | | | | Call: get_date_diff(01_01_2024,01_01_2001,V3563)
| | | | | | Call: evaluate(parsedate(01_01_2024),[V3584,V3585,V3586])
| | | | | | Exit: evaluate(parsedate(01_01_2024),[01,01,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3587,V3588,V3589])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3590)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(01,01),V3591)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(minus(01,01),V3592)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,0),0),V3593)
| | | | | | Exit: evaluate(plus(imul(31,0),0),0)
| | | | | | Call: evaluate(plus(23,if(leq(0,-1),-1,true,0)),V3563)
| | | | | | Exit: evaluate(plus(23,if(leq(0,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V3574)
| | | | | | Call: yearly_visit_limit(routine_physical,V3594,V3595,V3574)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V3596)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3594,V3595,V3574)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V3596)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V3581,visit_current_year(routine_physical,claim3,V3581)),1),V3579)
| | | | | Exit: evaluate(plus(countofall(V3598,visit_current_year(routine_physical,claim3,V3598)),1),1)
| | | | | Call: leq(1,1)
| | | | | Exit: leq(1,1)
| | | | Exit: check_policy_year_limit(C,Service)
| | | | Call: claim.location(claim3,V3582)
| | | | Exit: claim.location(claim3,phys_office)
| | | | Call: valid_location(routine_physical,phys_office)
| | | | Exit: valid_location(routine_physical,phys_office)
| | | Exit: eligible_service(C,P,R)
| | | Call: ~exception(claim3,policy1)
Call: exception(claim3,policy1)
| Call: claim.claimant(claim3,V3599)
| Exit: claim.claimant(claim3,person2)
| Call: person.occupation(person2,armed_forces)
| Fail: person.occupation(person2,armed_forces)
| Redo: claim.claimant(claim3,V3599)
| Fail: claim.claimant(claim3,V3599)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
| Call: claim.reason(claim3,home_health_care)
| Fail: claim.reason(claim3,home_health_care)
Fail: exception(claim3,policy1)
| | | Exit: ~exception(claim3,policy1)
| | Exit: valid_hospitalization(C,P)
| Exit: covered_under_policy(C,P,T)
Exit: covered(claim3)
Redo: covered(X)
| Redo: covered_under_policy(C,P,T)
| | Redo: valid_hospitalization(C,P)
| | | Redo: eligible_service(C,P,R)
| | | | Redo: valid_location(routine_physical,phys_office)
| | | | Fail: valid_location(routine_physical,phys_office)
| | | | Redo: claim.location(claim3,V3582)
| | | | Fail: claim.location(claim3,V3582)
| | | | Redo: check_policy_year_limit(C,Service)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3594,V3595,V3574)
| | | | | | Fail: yearly_visit_limit(routine_physical,V3594,V3595,V3574)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V3574)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_01_2024,01_01_2001,V3563)
| | | | | Redo: claim.time(claim3,V3561,V3562)
| | | | | Fail: claim.time(claim3,V3561,V3562)
| | | | | Redo: person.dob(person2,V3560)
| | | | | Fail: person.dob(person2,V3560)
| | | | | Redo: claim.claimant(claim3,V3559)
| | | | | Fail: claim.claimant(claim3,V3559)
| | | | Fail: check_policy_year_limit(claim3,routine_physical)
| | | | Call: covered_list_with_location(V3600)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3600)
| | | | Fail: covered_list_with_location(V3600)
| | | | Call: covered_list_with_service_provider(V3601)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3601)
| | | | Fail: covered_list_with_service_provider(V3601)
| | | | Call: covered_list(V3602)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3602)
| | | | Fail: covered_list(V3602)
| | | Fail: eligible_service(claim3,policy1,routine_physical)
| | | Redo: claim.reason(claim3,V3558)
| | | Fail: claim.reason(claim3,V3558)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim3,V3557)
| | | Fail: claim.hospital(claim3,V3557)
| | | Call: claim.reason(claim3,emergency_room)
| | | Fail: claim.reason(claim3,emergency_room)
| | Fail: valid_hospitalization(claim3,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3553)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3549)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3545)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_09_2023,V3541)
| | | Redo: policy.enddate(policy1,person2,V3540)
| | | Fail: policy.enddate(policy1,person2,V3540)
| | | Redo: policy.startdate(policy1,person2,V3539)
| | | Fail: policy.startdate(policy1,person2,V3539)
| | | Redo: claim.hosp_end_time(claim3,V3537,V3538)
| | | Fail: claim.hosp_end_time(claim3,V3537,V3538)
| | | Redo: claim.hosp_start_time(claim3,V3535,V3536)
| | | Fail: claim.hosp_start_time(claim3,V3535,V3536)
| | | Redo: claim.claimant(claim3,V3534)
| | | Fail: claim.claimant(claim3,V3534)
| | Fail: policy_active(claim3,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person2)
| | | Fail: policy.insuree(policy1,person2)
| | | Redo: claim.claimant(claim3,V3533)
| | | Fail: claim.claimant(claim3,V3533)
| | Fail: valid_insuree(claim3,policy1)
| Fail: covered_under_policy(claim3,policy1,cardinal)
| Redo: policy.type(policy1,V3532)
| Fail: policy.type(policy1,V3532)
| Redo: claim.policy(X,V3531)
| Exit: claim.policy(claim4,policy1)
| Call: policy.type(policy1,V3532)
| Exit: policy.type(policy1,cardinal)
| Call: covered_under_policy(claim4,policy1,cardinal)
| | Call: valid_insuree(claim4,policy1)
| | | Call: claim.claimant(claim4,V3603)
| | | Exit: claim.claimant(claim4,person2)
| | | Call: policy.insuree(policy1,person2)
| | | Exit: policy.insuree(policy1,person2)
| | Exit: valid_insuree(C,P)
| | Call: policy_active(claim4,policy1)
| | | Call: claim.claimant(claim4,V3604)
| | | Exit: claim.claimant(claim4,person2)
| | | Call: claim.hosp_start_time(claim4,V3605,V3606)
| | | Exit: claim.hosp_start_time(claim4,02_08_2023,00_00)
| | | Call: claim.hosp_end_time(claim4,V3607,V3608)
| | | Exit: claim.hosp_end_time(claim4,02_08_2023,01_13)
| | | Call: policy.startdate(policy1,person2,V3609)
| | | Exit: policy.startdate(policy1,person2,01_08_2023)
| | | Call: policy.enddate(policy1,person2,V3610)
| | | Exit: policy.enddate(policy1,person2,30_06_2024)
| | | Call: get_timestamp_from_date(02_08_2023,V3611)
| | | | Call: evaluate(parsedate(02_08_2023),[V3612,V3613,V3614])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V3611)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Call: get_timestamp_from_date(02_08_2023,V3615)
| | | | Call: evaluate(parsedate(02_08_2023),[V3616,V3617,V3618])
| | | | Exit: evaluate(parsedate(02_08_2023),[02,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,02,0,0,0),V3615)
| | | | Exit: evaluate(maketimestamp(2023,08,02,0,0,0),1690959600000)
| | | Exit: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Call: get_timestamp_from_date(30_06_2024,V3619)
| | | | Call: evaluate(parsedate(30_06_2024),[V3620,V3621,V3622])
| | | | Exit: evaluate(parsedate(30_06_2024),[30,06,2024])
| | | | Call: evaluate(maketimestamp(2024,06,30,0,0,0),V3619)
| | | | Exit: evaluate(maketimestamp(2024,06,30,0,0,0),1719730800000)
| | | Exit: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Call: get_timestamp_from_date(01_08_2023,V3623)
| | | | Call: evaluate(parsedate(01_08_2023),[V3624,V3625,V3626])
| | | | Exit: evaluate(parsedate(01_08_2023),[01,08,2023])
| | | | Call: evaluate(maketimestamp(2023,08,01,0,0,0),V3623)
| | | | Exit: evaluate(maketimestamp(2023,08,01,0,0,0),1690873200000)
| | | Exit: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Call: leq(1690873200000,1690959600000)
| | | Exit: leq(1690873200000,1690959600000)
| | | Call: leq(1690959600000,1719730800000)
| | | Exit: leq(1690959600000,1719730800000)
| | Exit: policy_active(C,P)
| | Call: valid_hospitalization(claim4,policy1)
| | | Call: claim.hospital(claim4,V3627)
| | | Exit: claim.hospital(claim4,stanford_medical_center)
| | | Call: valid_hospital(stanford_medical_center)
| | | Exit: valid_hospital(stanford_medical_center)
| | | Call: claim.reason(claim4,V3628)
| | | Exit: claim.reason(claim4,routine_physical)
| | | Call: eligible_service(claim4,policy1,routine_physical)
| | | | Call: check_policy_year_limit(claim4,routine_physical)
| | | | | Call: claim.claimant(claim4,V3629)
| | | | | Exit: claim.claimant(claim4,person2)
| | | | | Call: person.dob(person2,V3630)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim4,V3631,V3632)
| | | | | Exit: claim.time(claim4,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2001,V3633)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V3634,V3635,V3636])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3637,V3638,V3639])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3640)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(02,01),V3641)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V3642)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V3643)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(23,if(leq(31,-1),-1,true,0)),V3633)
| | | | | | Exit: evaluate(plus(23,if(leq(31,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V3644)
| | | | | | Call: yearly_visit_limit(routine_physical,V3645,V3646,V3644)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V3647)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3645,V3646,V3644)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V3647)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V3648,visit_current_year(routine_physical,claim4,V3648)),1),V3649)
| | | | | Exit: evaluate(plus(countofall(V3651,visit_current_year(routine_physical,claim4,V3651)),1),2)
| | | | | Call: leq(2,1)
| | | | | Fail: leq(2,1)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3645,V3646,V3644)
| | | | | | Fail: yearly_visit_limit(routine_physical,V3645,V3646,V3644)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V3644)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2001,V3633)
| | | | | Redo: claim.time(claim4,V3631,V3632)
| | | | | Fail: claim.time(claim4,V3631,V3632)
| | | | | Redo: person.dob(person2,V3630)
| | | | | Exit: person.dob(person2,01_01_2001)
| | | | | Call: claim.time(claim4,V3631,V3632)
| | | | | Exit: claim.time(claim4,01_02_2024,00_00)
| | | | | Call: get_date_diff(01_02_2024,01_01_2001,V3633)
| | | | | | Call: evaluate(parsedate(01_02_2024),[V3652,V3653,V3654])
| | | | | | Exit: evaluate(parsedate(01_02_2024),[01,02,2024])
| | | | | | Call: evaluate(parsedate(01_01_2001),[V3655,V3656,V3657])
| | | | | | Exit: evaluate(parsedate(01_01_2001),[01,01,2001])
| | | | | | Call: evaluate(minus(2024,2001),V3658)
| | | | | | Exit: evaluate(minus(2024,2001),23)
| | | | | | Call: evaluate(minus(02,01),V3659)
| | | | | | Exit: evaluate(minus(02,01),1)
| | | | | | Call: evaluate(minus(01,01),V3660)
| | | | | | Exit: evaluate(minus(01,01),0)
| | | | | | Call: evaluate(plus(imul(31,1),0),V3661)
| | | | | | Exit: evaluate(plus(imul(31,1),0),31)
| | | | | | Call: evaluate(plus(23,if(leq(31,-1),-1,true,0)),V3633)
| | | | | | Exit: evaluate(plus(23,if(leq(31,-1),-1,true,0)),23)
| | | | | Exit: get_date_diff(C_D,DOB,Age)
| | | | | Call: yearly_visit_limit(routine_physical,23,V3644)
| | | | | | Call: yearly_visit_limit(routine_physical,V3662,V3663,V3644)
| | | | | | Exit: yearly_visit_limit(routine_physical,0,22,0)
| | | | | | Call: evaluate(minus(22,1),V3664)
| | | | | | Exit: evaluate(minus(22,1),21)
| | | | | | Call: leq(23,21)
| | | | | | Fail: leq(23,21)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3662,V3663,V3644)
| | | | | | Exit: yearly_visit_limit(routine_physical,22,200,1)
| | | | | | Call: evaluate(minus(200,1),V3664)
| | | | | | Exit: evaluate(minus(200,1),199)
| | | | | | Call: leq(23,199)
| | | | | | Exit: leq(23,199)
| | | | | | Call: leq(22,23)
| | | | | | Exit: leq(22,23)
| | | | | Exit: yearly_visit_limit(Service,Age,Limit)
| | | | | Call: evaluate(plus(countofall(V3651,visit_current_year(routine_physical,claim4,V3651)),1),V3649)
| | | | | Exit: evaluate(plus(countofall(V3666,visit_current_year(routine_physical,claim4,V3666)),1),2)
| | | | | Call: leq(2,1)
| | | | | Fail: leq(2,1)
| | | | | Redo: yearly_visit_limit(Service,Age,Limit)
| | | | | | Redo: yearly_visit_limit(routine_physical,V3662,V3663,V3644)
| | | | | | Fail: yearly_visit_limit(routine_physical,V3662,V3663,V3644)
| | | | | Fail: yearly_visit_limit(routine_physical,23,V3644)
| | | | | Redo: get_date_diff(C_D,DOB,Age)
| | | | | Fail: get_date_diff(01_02_2024,01_01_2001,V3633)
| | | | | Redo: claim.time(claim4,V3631,V3632)
| | | | | Fail: claim.time(claim4,V3631,V3632)
| | | | | Redo: person.dob(person2,V3630)
| | | | | Fail: person.dob(person2,V3630)
| | | | | Redo: claim.claimant(claim4,V3629)
| | | | | Fail: claim.claimant(claim4,V3629)
| | | | Fail: check_policy_year_limit(claim4,routine_physical)
| | | | Call: covered_list_with_location(V3667)
| | | | Exit: covered_list_with_location([physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Call: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Fail: member(routine_physical,[physician_consultation,allergy,inpatient_care,non_surgical_physican_service,inpatient_surgical_services,well_newborn_nursery_care,home_health_care])
| | | | Redo: covered_list_with_location(V3667)
| | | | Fail: covered_list_with_location(V3667)
| | | | Call: covered_list_with_service_provider(V3668)
| | | | Exit: covered_list_with_service_provider([abortion,voluntary_sterilization_reversal])
| | | | Call: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Fail: member(routine_physical,[abortion,voluntary_sterilization_reversal])
| | | | Redo: covered_list_with_service_provider(V3668)
| | | | Fail: covered_list_with_service_provider(V3668)
| | | | Call: covered_list(V3669)
| | | | Exit: covered_list([breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Call: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Fail: member(routine_physical,[breast_pump_supplies,hospice,skilled_nursing,skilled_nursing,maternity_care])
| | | | Redo: covered_list(V3669)
| | | | Fail: covered_list(V3669)
| | | Fail: eligible_service(claim4,policy1,routine_physical)
| | | Redo: claim.reason(claim4,V3628)
| | | Fail: claim.reason(claim4,V3628)
| | | Redo: valid_hospital(stanford_medical_center)
| | | Fail: valid_hospital(stanford_medical_center)
| | | Redo: claim.hospital(claim4,V3627)
| | | Fail: claim.hospital(claim4,V3627)
| | | Call: claim.reason(claim4,emergency_room)
| | | Fail: claim.reason(claim4,emergency_room)
| | Fail: valid_hospitalization(claim4,policy1)
| | Redo: policy_active(C,P)
| | | Redo: get_timestamp_from_date(P_START_DATE,P_START_STAMP)
| | | Fail: get_timestamp_from_date(01_08_2023,V3623)
| | | Redo: get_timestamp_from_date(P_END_DATE,P_END_STAMP)
| | | Fail: get_timestamp_from_date(30_06_2024,V3619)
| | | Redo: get_timestamp_from_date(H_END_DATE,H_END_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V3615)
| | | Redo: get_timestamp_from_date(H_START_DATE,H_START_STAMP)
| | | Fail: get_timestamp_from_date(02_08_2023,V3611)
| | | Redo: policy.enddate(policy1,person2,V3610)
| | | Fail: policy.enddate(policy1,person2,V3610)
| | | Redo: policy.startdate(policy1,person2,V3609)
| | | Fail: policy.startdate(policy1,person2,V3609)
| | | Redo: claim.hosp_end_time(claim4,V3607,V3608)
| | | Fail: claim.hosp_end_time(claim4,V3607,V3608)
| | | Redo: claim.hosp_start_time(claim4,V3605,V3606)
| | | Fail: claim.hosp_start_time(claim4,V3605,V3606)
| | | Redo: claim.claimant(claim4,V3604)
| | | Fail: claim.claimant(claim4,V3604)
| | Fail: policy_active(claim4,policy1)
| | Redo: valid_insuree(C,P)
| | | Redo: policy.insuree(policy1,person2)
| | | Fail: policy.insuree(policy1,person2)
| | | Redo: claim.claimant(claim4,V3603)
| | | Fail: claim.claimant(claim4,V3603)
| | Fail: valid_insuree(claim4,policy1)
| Fail: covered_under_policy(claim4,policy1,cardinal)
| Redo: policy.type(policy1,V3532)
| Fail: policy.type(policy1,V3532)
| Redo: claim.policy(X,V3531)
| Fail: claim.policy(X,V3531)
Fail: covered(X)
====== Verbose Output for test: Test test_cases_routine_physical.hdf ======
variable_expr: X
query_str: covered(X)
expected_result_list: [ 'claim3' ]
RESULTS: [ 'claim3' ]
===== TEST SUCCEEDED: Test test_cases_routine_physical.hdf===== 
======= CARDINAL CARE TEST RESULTS SUMMARY =======
11 out of 11 tests succeeded.
=== FAILING TESTS ===
============ END CARDINAL CARE TESTS ============
