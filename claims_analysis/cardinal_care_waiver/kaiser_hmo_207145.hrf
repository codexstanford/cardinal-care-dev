covered(C) :-
  claim.policy(C, P) &
  policy.type(P, T) &
  covered(C, P, T)

covered(C, P, kaiser_hmo) :-
  valid_insuree(C,P) &
  policy_active(C,P) &
  claim.reason(C, T) &
  eligible_service(C,P,T)

valid_insuree(C,P) :-
  claim.claimant(C,CL) &
  policy.insuree(P,I) &
  same(CL, I)

policy_active(C,P) :-
  claim.claimant(C,C1) &
  policy.startdate(P, C1, P_START_DATE) & 
  policy.enddate(P,C1, P_END_DATE) & 
  claim.date(C, C_DATE) &
  %get_timestamp_from_date(P_END_DATE, P_END_STAMP) &
  %get_timestamp_from_date(P_START_DATE, P_START_STAMP) &
  %get_timestamp_from_date(C_DATE, C_DATE_STAMP) &
  %leq(P_START_STAMP, C_DATE_STAMP) &
  %leq(C_DATE_STAMP, P_END_STAMP)
  leq(P_START_DATE, C_DATE) &
  leq(C_DATE, P_END_DATE)
  % Need more here to determine valid range, but it will depend on a query so trying not to hardcode.

get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[D,M,Y]) &
  evaluate(maketimestamp(Y,M,D,1,1,1), STAMP)

% Preventive Care START

% Page 15
eligible_service(C, P, rehabilitative_habilitative):-
  claim.reason(C, rehabilitative_habilitative) &
  claim.item(C, X) &
  elligible_rehabilitative_habilitative_service(C, P, X)

elligible_rehabilitative_habilitative_service(C, P, X) :-      % Quantity Limit and other exceptions
  rehabilitative_habilitative_list(List) &
  member(X, List) &
  ~rehabilitative_habilitative_exception(C, P, X) &
  rehabilitative_habilitative_cost(X, N) %&
  % cost_to_add(C, P, N)
  

rehabilitative_habilitative_exception(C, P, X) :- % Theoretically this should be covered by line 43's relation
  rehabilitative_habilitative_exclusions_list(List) &
  member(X, List)

rehabilitative_habilitative_exception(C, P, X) :- % Need another exception for pg. 58 "not health care item or service" --> schema thing
  Item.type(X, T) &
  rehabilitative_habilitative_inclusions_list(List) &
  ~member(T, List)

rehabilitative_habilitative_inclusions_list([healthcare_items, healthcare_services])
rehabilitative_habilitative_exclusions_list([respite_care, day_care, recreational_care, residential_treatment, social_services, custodial_care, education_services, vocational_training])

rehabilitative_habilitative_list([individual, group, organized_day_program]).
rehabilitative_habilitative_cost(individual, 30) % per visit
rehabilitative_habilitative_cost(group, 15) % per visit
rehabilitative_habilitative_cost(organized, 30) % per day

% Reproductive Health Services START

% Family Planning
eligible_service(C, P, family_planning):-
  claim.reason(C, family_planning) &
  claim.item(C, X) &
  elligible_family_planning_service(C, P, X)

elligible_family_planning_service(C, P, X) :-
  elligible_family_planning_service_list(List) &
  member(X, List) &
  ~family_planning_exception(C, P, X) &
  family_planning_cost(C, P, X)

family_planning_cost(C, P, X) :-
  elligible_family_planning_cost(X, N) % &
  %cost_to_add(C, P, N)

% Page 15
elligible_family_planning_service_list([counseling, injectible_insertable_internal, female_sterilization_operation, female_sterilization_other, male_sterlization_operation, male_sterilization_other])
% For larger pools, start separating into lists of cost types (none vs some) and check membership (less hardcoding). 
elligible_family_planning_cost(counseling, 0)
elligible_family_planning_cost(injectible_insertable_internal, 0)
elligible_family_planning_cost(female_sterilization_operation, 0)
elligible_family_planning_cost(female_sterilization_other, 0)
elligible_family_planning_cost(male_sterilization_operation, 150)
elligible_family_planning_cost(male_sterilization_other, 50)

% Family Planning
eligible_service(C, P, abortion_related):-
  claim.reason(C, abortion_related) &
  claim.item(C, X) &
  elligible_abortion_service(C, P, X)

elligible_abortion_related_service(C, P, X) :-
  elligible_abortion_related_service_list(List) &
  member(X, List) &
  ~abortion_related_exception(C, P, X)

abortion_related_exception(C, P, X) :-
  claim.item(X, prescription_drugs) &
  ~obeys_formulary_guidelines(X)      % Pg. 15 "prescription drugs, in accord with our drug formulary guidelines" --> This relation may not be worth/necessitate adding schema for/

elligible_abortion_related_service_list([surgical_abortion, prescription_drugs, other_abortion_services])

% Skilled Nursing Facility Care (Pg. 16)
eligible_service(C, P, skilled_nursing_facility_care):-   % Schema for this: admit date, leave date, benefit period (has it been 60 days since prior admit date)
  claim.reason(C, skilled_nursing_facility_care) &
  claim.item(C, X) %&
  % item.admit_date(C, ADate) &
  % item.release_date(C, RDate) & % Assumes days, not date, actually.
  % leq(minus(RDate, ADate), 100) &
  % valid_benefit_period(C, P, X)       % Valid benefit period is 6- days without inpatient in a hospital or skilled nursing facility, receivin a skilled level of care.

% Prescriptions
eligible_service(C, P, prescription):-
  claim.reason(C, prescription) &
  claim.item(C, X) &
  elligible_prescription(C, P, X)

elligible_prescription(C, P, X) :-      % QWuantity Limit and other exceptions
  prescriptions_list(List) &
  member(X, List) &
  ~prescription_exception(C, P, X) &
  prescription_cost(C, P, X) % &

prescription_cost(C, P, X) :-
  prescription.tier(X, T) &
  prescriptions_tier_cost(T, C)

% Using actual data format will transitition to this! 
% elligible_prescription(C, P, X) :-
%   kaiser_hmo_drugs(List) &
%   kaiser_hmo_drugs.drug_id(X, N) & % Check that there doeds exist a drug_id 
%   ~exception_prescriptions(C, P, X) &
%   prescription_cost(C, P, X) 

% % Encoding of exception:
% exception_prescriptions(C, P, X) :-
%   kaiser_hmo_drugs.note(X)
%   % distinct(List, []) % & % If any notes exist, then there is an exception. NOT A LONG TERM SOLUTION
%   % For example, will result in a user "drop down" for now. Then we can ask how many received in past X days, 
%   % but once again like with waiver, kind of similar to "changes based on prescription so wasted work may occur"

% prescription_cost(C, P, X) :-
%   kaiser_hmo_drugs.status(X, T) &
%   prescription_tier_cost(T, N) %& % numerical value to add later, should account for non-formulary by this relation failing
%   % cost_to_add(C, P, N)  % relation to add to coverage sum
  


~international(kaiser_hmo)

% From Formulary
prescriptions_list([ibuprofen, diphenhydramine_hcl, oxycodone_hcl, tracleer, cayston]).
prescription.tier(ibuprofen, 1)
prescription.tier(diphenhydramine_hcl, 1)
prescription.tier(ocycodone_hcl, 1)
prescription.tier(cayston, 4)
prescription_tier_cost(1, 20)
prescription_tier_cost(2, 40)
prescription_tier_cost(4, 40)

lt(X,Y):-
  leq(X,Y) &
  ~same(X,Y).

gt(X,Y) :-
  ~leq(X,Y)

gte(X,Y):-
  ~lt(X, Y)




% User Input
start_date(1672563661000) 
% Jan 1 2023 %
end_date(1737450061000) 
% Jan 21 2025, dummy dates 
sf_bay_care_in_medical(150)
sf_bay_care_out_medical(0)
sf_bay_care_in_mental(150)
sf_bay_care_out_mental(30)
annual_deductible(0)
oop_max(3500)
emb_ppaca(yes)
pc_ppaca(yes)
excluded_conditions(no) % NULL?
prescriptions(yes) 
% Needs data available at kp.og/formulary
prescriptions_tier1_mail(20)
prescriptions_tier2_mail(80)

prescription_tier_cost(1, 10)
prescription_tier_cost(2, 40)
prescription_tier_cost(4, 40)

emergency_room_cost(200)
emergency_transport_cost(50)
provider_urgent_care_cost(30)
outside_urgent_care_cost(NULL)
aggregate_max_benefit_num(NULL) 
% unsure if truly is no max

sep_first(1725177661000)
aug_end(1754035261000)
academic_year_workaround(yes) % For Sierra checks wih getyear

